
evse_technolaf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080048e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000edc  20000008  080048e8  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000ee4  080048e8  00020ee4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001d025  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003b10  00000000  00000000  0003d055  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b0ac  00000000  00000000  00040b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fd0  00000000  00000000  0004bc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001030  00000000  00000000  0004cbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000080f7  00000000  00000000  0004dc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004d36  00000000  00000000  00055d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005aa45  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002a98  00000000  00000000  0005aac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004780 	.word	0x08004780

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	08004780 	.word	0x08004780

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fc41 	bl	8000ab8 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb9b 	bl	800097c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fc33 	bl	8000ab8 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fc29 	bl	8000ab8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fbbb 	bl	80009f0 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fbb1 	bl	80009f0 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__clzsi2>:
 800029c:	211c      	movs	r1, #28
 800029e:	2301      	movs	r3, #1
 80002a0:	041b      	lsls	r3, r3, #16
 80002a2:	4298      	cmp	r0, r3
 80002a4:	d301      	bcc.n	80002aa <__clzsi2+0xe>
 80002a6:	0c00      	lsrs	r0, r0, #16
 80002a8:	3910      	subs	r1, #16
 80002aa:	0a1b      	lsrs	r3, r3, #8
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d301      	bcc.n	80002b4 <__clzsi2+0x18>
 80002b0:	0a00      	lsrs	r0, r0, #8
 80002b2:	3908      	subs	r1, #8
 80002b4:	091b      	lsrs	r3, r3, #4
 80002b6:	4298      	cmp	r0, r3
 80002b8:	d301      	bcc.n	80002be <__clzsi2+0x22>
 80002ba:	0900      	lsrs	r0, r0, #4
 80002bc:	3904      	subs	r1, #4
 80002be:	a202      	add	r2, pc, #8	; (adr r2, 80002c8 <__clzsi2+0x2c>)
 80002c0:	5c10      	ldrb	r0, [r2, r0]
 80002c2:	1840      	adds	r0, r0, r1
 80002c4:	4770      	bx	lr
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	02020304 	.word	0x02020304
 80002cc:	01010101 	.word	0x01010101
	...

080002d8 <__aeabi_d2uiz>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	2200      	movs	r2, #0
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <__aeabi_d2uiz+0x38>)
 80002de:	0004      	movs	r4, r0
 80002e0:	000d      	movs	r5, r1
 80002e2:	f7ff ffd1 	bl	8000288 <__aeabi_dcmpge>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d104      	bne.n	80002f4 <__aeabi_d2uiz+0x1c>
 80002ea:	0020      	movs	r0, r4
 80002ec:	0029      	movs	r1, r5
 80002ee:	f001 f9db 	bl	80016a8 <__aeabi_d2iz>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <__aeabi_d2uiz+0x38>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	0020      	movs	r0, r4
 80002fa:	0029      	movs	r1, r5
 80002fc:	f000 febe 	bl	800107c <__aeabi_dsub>
 8000300:	f001 f9d2 	bl	80016a8 <__aeabi_d2iz>
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	061b      	lsls	r3, r3, #24
 8000308:	469c      	mov	ip, r3
 800030a:	4460      	add	r0, ip
 800030c:	e7f1      	b.n	80002f2 <__aeabi_d2uiz+0x1a>
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	41e00000 	.word	0x41e00000

08000314 <__aeabi_ddiv>:
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	4657      	mov	r7, sl
 8000318:	4645      	mov	r5, r8
 800031a:	46de      	mov	lr, fp
 800031c:	464e      	mov	r6, r9
 800031e:	b5e0      	push	{r5, r6, r7, lr}
 8000320:	004c      	lsls	r4, r1, #1
 8000322:	030e      	lsls	r6, r1, #12
 8000324:	b087      	sub	sp, #28
 8000326:	4683      	mov	fp, r0
 8000328:	4692      	mov	sl, r2
 800032a:	001d      	movs	r5, r3
 800032c:	4680      	mov	r8, r0
 800032e:	0b36      	lsrs	r6, r6, #12
 8000330:	0d64      	lsrs	r4, r4, #21
 8000332:	0fcf      	lsrs	r7, r1, #31
 8000334:	2c00      	cmp	r4, #0
 8000336:	d04f      	beq.n	80003d8 <__aeabi_ddiv+0xc4>
 8000338:	4b6f      	ldr	r3, [pc, #444]	; (80004f8 <__aeabi_ddiv+0x1e4>)
 800033a:	429c      	cmp	r4, r3
 800033c:	d035      	beq.n	80003aa <__aeabi_ddiv+0x96>
 800033e:	2380      	movs	r3, #128	; 0x80
 8000340:	0f42      	lsrs	r2, r0, #29
 8000342:	041b      	lsls	r3, r3, #16
 8000344:	00f6      	lsls	r6, r6, #3
 8000346:	4313      	orrs	r3, r2
 8000348:	4333      	orrs	r3, r6
 800034a:	4699      	mov	r9, r3
 800034c:	00c3      	lsls	r3, r0, #3
 800034e:	4698      	mov	r8, r3
 8000350:	4b6a      	ldr	r3, [pc, #424]	; (80004fc <__aeabi_ddiv+0x1e8>)
 8000352:	2600      	movs	r6, #0
 8000354:	469c      	mov	ip, r3
 8000356:	2300      	movs	r3, #0
 8000358:	4464      	add	r4, ip
 800035a:	9303      	str	r3, [sp, #12]
 800035c:	032b      	lsls	r3, r5, #12
 800035e:	0b1b      	lsrs	r3, r3, #12
 8000360:	469b      	mov	fp, r3
 8000362:	006b      	lsls	r3, r5, #1
 8000364:	0fed      	lsrs	r5, r5, #31
 8000366:	4650      	mov	r0, sl
 8000368:	0d5b      	lsrs	r3, r3, #21
 800036a:	9501      	str	r5, [sp, #4]
 800036c:	d05e      	beq.n	800042c <__aeabi_ddiv+0x118>
 800036e:	4a62      	ldr	r2, [pc, #392]	; (80004f8 <__aeabi_ddiv+0x1e4>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d053      	beq.n	800041c <__aeabi_ddiv+0x108>
 8000374:	465a      	mov	r2, fp
 8000376:	00d1      	lsls	r1, r2, #3
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	0f40      	lsrs	r0, r0, #29
 800037c:	0412      	lsls	r2, r2, #16
 800037e:	4302      	orrs	r2, r0
 8000380:	430a      	orrs	r2, r1
 8000382:	4693      	mov	fp, r2
 8000384:	4652      	mov	r2, sl
 8000386:	00d1      	lsls	r1, r2, #3
 8000388:	4a5c      	ldr	r2, [pc, #368]	; (80004fc <__aeabi_ddiv+0x1e8>)
 800038a:	4694      	mov	ip, r2
 800038c:	2200      	movs	r2, #0
 800038e:	4463      	add	r3, ip
 8000390:	0038      	movs	r0, r7
 8000392:	4068      	eors	r0, r5
 8000394:	4684      	mov	ip, r0
 8000396:	9002      	str	r0, [sp, #8]
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	4316      	orrs	r6, r2
 800039c:	2e0f      	cmp	r6, #15
 800039e:	d900      	bls.n	80003a2 <__aeabi_ddiv+0x8e>
 80003a0:	e0b4      	b.n	800050c <__aeabi_ddiv+0x1f8>
 80003a2:	4b57      	ldr	r3, [pc, #348]	; (8000500 <__aeabi_ddiv+0x1ec>)
 80003a4:	00b6      	lsls	r6, r6, #2
 80003a6:	599b      	ldr	r3, [r3, r6]
 80003a8:	469f      	mov	pc, r3
 80003aa:	0003      	movs	r3, r0
 80003ac:	4333      	orrs	r3, r6
 80003ae:	4699      	mov	r9, r3
 80003b0:	d16c      	bne.n	800048c <__aeabi_ddiv+0x178>
 80003b2:	2300      	movs	r3, #0
 80003b4:	4698      	mov	r8, r3
 80003b6:	3302      	adds	r3, #2
 80003b8:	2608      	movs	r6, #8
 80003ba:	9303      	str	r3, [sp, #12]
 80003bc:	e7ce      	b.n	800035c <__aeabi_ddiv+0x48>
 80003be:	46cb      	mov	fp, r9
 80003c0:	4641      	mov	r1, r8
 80003c2:	9a03      	ldr	r2, [sp, #12]
 80003c4:	9701      	str	r7, [sp, #4]
 80003c6:	2a02      	cmp	r2, #2
 80003c8:	d165      	bne.n	8000496 <__aeabi_ddiv+0x182>
 80003ca:	9b01      	ldr	r3, [sp, #4]
 80003cc:	4c4a      	ldr	r4, [pc, #296]	; (80004f8 <__aeabi_ddiv+0x1e4>)
 80003ce:	469c      	mov	ip, r3
 80003d0:	2300      	movs	r3, #0
 80003d2:	2200      	movs	r2, #0
 80003d4:	4698      	mov	r8, r3
 80003d6:	e06b      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 80003d8:	0003      	movs	r3, r0
 80003da:	4333      	orrs	r3, r6
 80003dc:	4699      	mov	r9, r3
 80003de:	d04e      	beq.n	800047e <__aeabi_ddiv+0x16a>
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d100      	bne.n	80003e6 <__aeabi_ddiv+0xd2>
 80003e4:	e1bc      	b.n	8000760 <__aeabi_ddiv+0x44c>
 80003e6:	0030      	movs	r0, r6
 80003e8:	f7ff ff58 	bl	800029c <__clzsi2>
 80003ec:	0003      	movs	r3, r0
 80003ee:	3b0b      	subs	r3, #11
 80003f0:	2b1c      	cmp	r3, #28
 80003f2:	dd00      	ble.n	80003f6 <__aeabi_ddiv+0xe2>
 80003f4:	e1ac      	b.n	8000750 <__aeabi_ddiv+0x43c>
 80003f6:	221d      	movs	r2, #29
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	465a      	mov	r2, fp
 80003fc:	0001      	movs	r1, r0
 80003fe:	40da      	lsrs	r2, r3
 8000400:	3908      	subs	r1, #8
 8000402:	408e      	lsls	r6, r1
 8000404:	0013      	movs	r3, r2
 8000406:	4333      	orrs	r3, r6
 8000408:	4699      	mov	r9, r3
 800040a:	465b      	mov	r3, fp
 800040c:	408b      	lsls	r3, r1
 800040e:	4698      	mov	r8, r3
 8000410:	2300      	movs	r3, #0
 8000412:	4c3c      	ldr	r4, [pc, #240]	; (8000504 <__aeabi_ddiv+0x1f0>)
 8000414:	2600      	movs	r6, #0
 8000416:	1a24      	subs	r4, r4, r0
 8000418:	9303      	str	r3, [sp, #12]
 800041a:	e79f      	b.n	800035c <__aeabi_ddiv+0x48>
 800041c:	4651      	mov	r1, sl
 800041e:	465a      	mov	r2, fp
 8000420:	4311      	orrs	r1, r2
 8000422:	d129      	bne.n	8000478 <__aeabi_ddiv+0x164>
 8000424:	2200      	movs	r2, #0
 8000426:	4693      	mov	fp, r2
 8000428:	3202      	adds	r2, #2
 800042a:	e7b1      	b.n	8000390 <__aeabi_ddiv+0x7c>
 800042c:	4659      	mov	r1, fp
 800042e:	4301      	orrs	r1, r0
 8000430:	d01e      	beq.n	8000470 <__aeabi_ddiv+0x15c>
 8000432:	465b      	mov	r3, fp
 8000434:	2b00      	cmp	r3, #0
 8000436:	d100      	bne.n	800043a <__aeabi_ddiv+0x126>
 8000438:	e19e      	b.n	8000778 <__aeabi_ddiv+0x464>
 800043a:	4658      	mov	r0, fp
 800043c:	f7ff ff2e 	bl	800029c <__clzsi2>
 8000440:	0003      	movs	r3, r0
 8000442:	3b0b      	subs	r3, #11
 8000444:	2b1c      	cmp	r3, #28
 8000446:	dd00      	ble.n	800044a <__aeabi_ddiv+0x136>
 8000448:	e18f      	b.n	800076a <__aeabi_ddiv+0x456>
 800044a:	0002      	movs	r2, r0
 800044c:	4659      	mov	r1, fp
 800044e:	3a08      	subs	r2, #8
 8000450:	4091      	lsls	r1, r2
 8000452:	468b      	mov	fp, r1
 8000454:	211d      	movs	r1, #29
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	4651      	mov	r1, sl
 800045a:	40d9      	lsrs	r1, r3
 800045c:	000b      	movs	r3, r1
 800045e:	4659      	mov	r1, fp
 8000460:	430b      	orrs	r3, r1
 8000462:	4651      	mov	r1, sl
 8000464:	469b      	mov	fp, r3
 8000466:	4091      	lsls	r1, r2
 8000468:	4b26      	ldr	r3, [pc, #152]	; (8000504 <__aeabi_ddiv+0x1f0>)
 800046a:	2200      	movs	r2, #0
 800046c:	1a1b      	subs	r3, r3, r0
 800046e:	e78f      	b.n	8000390 <__aeabi_ddiv+0x7c>
 8000470:	2300      	movs	r3, #0
 8000472:	2201      	movs	r2, #1
 8000474:	469b      	mov	fp, r3
 8000476:	e78b      	b.n	8000390 <__aeabi_ddiv+0x7c>
 8000478:	4651      	mov	r1, sl
 800047a:	2203      	movs	r2, #3
 800047c:	e788      	b.n	8000390 <__aeabi_ddiv+0x7c>
 800047e:	2300      	movs	r3, #0
 8000480:	4698      	mov	r8, r3
 8000482:	3301      	adds	r3, #1
 8000484:	2604      	movs	r6, #4
 8000486:	2400      	movs	r4, #0
 8000488:	9303      	str	r3, [sp, #12]
 800048a:	e767      	b.n	800035c <__aeabi_ddiv+0x48>
 800048c:	2303      	movs	r3, #3
 800048e:	46b1      	mov	r9, r6
 8000490:	9303      	str	r3, [sp, #12]
 8000492:	260c      	movs	r6, #12
 8000494:	e762      	b.n	800035c <__aeabi_ddiv+0x48>
 8000496:	2a03      	cmp	r2, #3
 8000498:	d100      	bne.n	800049c <__aeabi_ddiv+0x188>
 800049a:	e25c      	b.n	8000956 <__aeabi_ddiv+0x642>
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	2a01      	cmp	r2, #1
 80004a0:	d000      	beq.n	80004a4 <__aeabi_ddiv+0x190>
 80004a2:	e1e4      	b.n	800086e <__aeabi_ddiv+0x55a>
 80004a4:	4013      	ands	r3, r2
 80004a6:	469c      	mov	ip, r3
 80004a8:	2300      	movs	r3, #0
 80004aa:	2400      	movs	r4, #0
 80004ac:	2200      	movs	r2, #0
 80004ae:	4698      	mov	r8, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	0312      	lsls	r2, r2, #12
 80004b4:	0b13      	lsrs	r3, r2, #12
 80004b6:	0d0a      	lsrs	r2, r1, #20
 80004b8:	0512      	lsls	r2, r2, #20
 80004ba:	431a      	orrs	r2, r3
 80004bc:	0523      	lsls	r3, r4, #20
 80004be:	4c12      	ldr	r4, [pc, #72]	; (8000508 <__aeabi_ddiv+0x1f4>)
 80004c0:	4640      	mov	r0, r8
 80004c2:	4022      	ands	r2, r4
 80004c4:	4313      	orrs	r3, r2
 80004c6:	4662      	mov	r2, ip
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	07d2      	lsls	r2, r2, #31
 80004cc:	085b      	lsrs	r3, r3, #1
 80004ce:	4313      	orrs	r3, r2
 80004d0:	0019      	movs	r1, r3
 80004d2:	b007      	add	sp, #28
 80004d4:	bc3c      	pop	{r2, r3, r4, r5}
 80004d6:	4690      	mov	r8, r2
 80004d8:	4699      	mov	r9, r3
 80004da:	46a2      	mov	sl, r4
 80004dc:	46ab      	mov	fp, r5
 80004de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e0:	2300      	movs	r3, #0
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	469c      	mov	ip, r3
 80004e6:	0312      	lsls	r2, r2, #12
 80004e8:	4698      	mov	r8, r3
 80004ea:	4c03      	ldr	r4, [pc, #12]	; (80004f8 <__aeabi_ddiv+0x1e4>)
 80004ec:	e7e0      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 80004ee:	2300      	movs	r3, #0
 80004f0:	4c01      	ldr	r4, [pc, #4]	; (80004f8 <__aeabi_ddiv+0x1e4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	4698      	mov	r8, r3
 80004f6:	e7db      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 80004f8:	000007ff 	.word	0x000007ff
 80004fc:	fffffc01 	.word	0xfffffc01
 8000500:	080047fc 	.word	0x080047fc
 8000504:	fffffc0d 	.word	0xfffffc0d
 8000508:	800fffff 	.word	0x800fffff
 800050c:	45d9      	cmp	r9, fp
 800050e:	d900      	bls.n	8000512 <__aeabi_ddiv+0x1fe>
 8000510:	e139      	b.n	8000786 <__aeabi_ddiv+0x472>
 8000512:	d100      	bne.n	8000516 <__aeabi_ddiv+0x202>
 8000514:	e134      	b.n	8000780 <__aeabi_ddiv+0x46c>
 8000516:	2300      	movs	r3, #0
 8000518:	4646      	mov	r6, r8
 800051a:	464d      	mov	r5, r9
 800051c:	469a      	mov	sl, r3
 800051e:	3c01      	subs	r4, #1
 8000520:	465b      	mov	r3, fp
 8000522:	0e0a      	lsrs	r2, r1, #24
 8000524:	021b      	lsls	r3, r3, #8
 8000526:	431a      	orrs	r2, r3
 8000528:	020b      	lsls	r3, r1, #8
 800052a:	0c17      	lsrs	r7, r2, #16
 800052c:	9303      	str	r3, [sp, #12]
 800052e:	0413      	lsls	r3, r2, #16
 8000530:	0c1b      	lsrs	r3, r3, #16
 8000532:	0039      	movs	r1, r7
 8000534:	0028      	movs	r0, r5
 8000536:	4690      	mov	r8, r2
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	f7ff fde5 	bl	8000108 <__udivsi3>
 800053e:	0002      	movs	r2, r0
 8000540:	9b01      	ldr	r3, [sp, #4]
 8000542:	4683      	mov	fp, r0
 8000544:	435a      	muls	r2, r3
 8000546:	0028      	movs	r0, r5
 8000548:	0039      	movs	r1, r7
 800054a:	4691      	mov	r9, r2
 800054c:	f7ff fe62 	bl	8000214 <__aeabi_uidivmod>
 8000550:	0c35      	lsrs	r5, r6, #16
 8000552:	0409      	lsls	r1, r1, #16
 8000554:	430d      	orrs	r5, r1
 8000556:	45a9      	cmp	r9, r5
 8000558:	d90d      	bls.n	8000576 <__aeabi_ddiv+0x262>
 800055a:	465b      	mov	r3, fp
 800055c:	4445      	add	r5, r8
 800055e:	3b01      	subs	r3, #1
 8000560:	45a8      	cmp	r8, r5
 8000562:	d900      	bls.n	8000566 <__aeabi_ddiv+0x252>
 8000564:	e13a      	b.n	80007dc <__aeabi_ddiv+0x4c8>
 8000566:	45a9      	cmp	r9, r5
 8000568:	d800      	bhi.n	800056c <__aeabi_ddiv+0x258>
 800056a:	e137      	b.n	80007dc <__aeabi_ddiv+0x4c8>
 800056c:	2302      	movs	r3, #2
 800056e:	425b      	negs	r3, r3
 8000570:	469c      	mov	ip, r3
 8000572:	4445      	add	r5, r8
 8000574:	44e3      	add	fp, ip
 8000576:	464b      	mov	r3, r9
 8000578:	1aeb      	subs	r3, r5, r3
 800057a:	0039      	movs	r1, r7
 800057c:	0018      	movs	r0, r3
 800057e:	9304      	str	r3, [sp, #16]
 8000580:	f7ff fdc2 	bl	8000108 <__udivsi3>
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	0005      	movs	r5, r0
 8000588:	4343      	muls	r3, r0
 800058a:	0039      	movs	r1, r7
 800058c:	9804      	ldr	r0, [sp, #16]
 800058e:	4699      	mov	r9, r3
 8000590:	f7ff fe40 	bl	8000214 <__aeabi_uidivmod>
 8000594:	0433      	lsls	r3, r6, #16
 8000596:	0409      	lsls	r1, r1, #16
 8000598:	0c1b      	lsrs	r3, r3, #16
 800059a:	430b      	orrs	r3, r1
 800059c:	4599      	cmp	r9, r3
 800059e:	d909      	bls.n	80005b4 <__aeabi_ddiv+0x2a0>
 80005a0:	4443      	add	r3, r8
 80005a2:	1e6a      	subs	r2, r5, #1
 80005a4:	4598      	cmp	r8, r3
 80005a6:	d900      	bls.n	80005aa <__aeabi_ddiv+0x296>
 80005a8:	e11a      	b.n	80007e0 <__aeabi_ddiv+0x4cc>
 80005aa:	4599      	cmp	r9, r3
 80005ac:	d800      	bhi.n	80005b0 <__aeabi_ddiv+0x29c>
 80005ae:	e117      	b.n	80007e0 <__aeabi_ddiv+0x4cc>
 80005b0:	3d02      	subs	r5, #2
 80005b2:	4443      	add	r3, r8
 80005b4:	464a      	mov	r2, r9
 80005b6:	1a9b      	subs	r3, r3, r2
 80005b8:	465a      	mov	r2, fp
 80005ba:	0412      	lsls	r2, r2, #16
 80005bc:	432a      	orrs	r2, r5
 80005be:	9903      	ldr	r1, [sp, #12]
 80005c0:	4693      	mov	fp, r2
 80005c2:	0c10      	lsrs	r0, r2, #16
 80005c4:	0c0a      	lsrs	r2, r1, #16
 80005c6:	4691      	mov	r9, r2
 80005c8:	0409      	lsls	r1, r1, #16
 80005ca:	465a      	mov	r2, fp
 80005cc:	0c09      	lsrs	r1, r1, #16
 80005ce:	464e      	mov	r6, r9
 80005d0:	000d      	movs	r5, r1
 80005d2:	0412      	lsls	r2, r2, #16
 80005d4:	0c12      	lsrs	r2, r2, #16
 80005d6:	4345      	muls	r5, r0
 80005d8:	9105      	str	r1, [sp, #20]
 80005da:	4351      	muls	r1, r2
 80005dc:	4372      	muls	r2, r6
 80005de:	4370      	muls	r0, r6
 80005e0:	1952      	adds	r2, r2, r5
 80005e2:	0c0e      	lsrs	r6, r1, #16
 80005e4:	18b2      	adds	r2, r6, r2
 80005e6:	4295      	cmp	r5, r2
 80005e8:	d903      	bls.n	80005f2 <__aeabi_ddiv+0x2de>
 80005ea:	2580      	movs	r5, #128	; 0x80
 80005ec:	026d      	lsls	r5, r5, #9
 80005ee:	46ac      	mov	ip, r5
 80005f0:	4460      	add	r0, ip
 80005f2:	0c15      	lsrs	r5, r2, #16
 80005f4:	0409      	lsls	r1, r1, #16
 80005f6:	0412      	lsls	r2, r2, #16
 80005f8:	0c09      	lsrs	r1, r1, #16
 80005fa:	1828      	adds	r0, r5, r0
 80005fc:	1852      	adds	r2, r2, r1
 80005fe:	4283      	cmp	r3, r0
 8000600:	d200      	bcs.n	8000604 <__aeabi_ddiv+0x2f0>
 8000602:	e0ce      	b.n	80007a2 <__aeabi_ddiv+0x48e>
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x2f4>
 8000606:	e0c8      	b.n	800079a <__aeabi_ddiv+0x486>
 8000608:	1a1d      	subs	r5, r3, r0
 800060a:	4653      	mov	r3, sl
 800060c:	1a9e      	subs	r6, r3, r2
 800060e:	45b2      	cmp	sl, r6
 8000610:	4192      	sbcs	r2, r2
 8000612:	4252      	negs	r2, r2
 8000614:	1aab      	subs	r3, r5, r2
 8000616:	469a      	mov	sl, r3
 8000618:	4598      	cmp	r8, r3
 800061a:	d100      	bne.n	800061e <__aeabi_ddiv+0x30a>
 800061c:	e117      	b.n	800084e <__aeabi_ddiv+0x53a>
 800061e:	0039      	movs	r1, r7
 8000620:	0018      	movs	r0, r3
 8000622:	f7ff fd71 	bl	8000108 <__udivsi3>
 8000626:	9b01      	ldr	r3, [sp, #4]
 8000628:	0005      	movs	r5, r0
 800062a:	4343      	muls	r3, r0
 800062c:	0039      	movs	r1, r7
 800062e:	4650      	mov	r0, sl
 8000630:	9304      	str	r3, [sp, #16]
 8000632:	f7ff fdef 	bl	8000214 <__aeabi_uidivmod>
 8000636:	9804      	ldr	r0, [sp, #16]
 8000638:	040b      	lsls	r3, r1, #16
 800063a:	0c31      	lsrs	r1, r6, #16
 800063c:	4319      	orrs	r1, r3
 800063e:	4288      	cmp	r0, r1
 8000640:	d909      	bls.n	8000656 <__aeabi_ddiv+0x342>
 8000642:	4441      	add	r1, r8
 8000644:	1e6b      	subs	r3, r5, #1
 8000646:	4588      	cmp	r8, r1
 8000648:	d900      	bls.n	800064c <__aeabi_ddiv+0x338>
 800064a:	e107      	b.n	800085c <__aeabi_ddiv+0x548>
 800064c:	4288      	cmp	r0, r1
 800064e:	d800      	bhi.n	8000652 <__aeabi_ddiv+0x33e>
 8000650:	e104      	b.n	800085c <__aeabi_ddiv+0x548>
 8000652:	3d02      	subs	r5, #2
 8000654:	4441      	add	r1, r8
 8000656:	9b04      	ldr	r3, [sp, #16]
 8000658:	1acb      	subs	r3, r1, r3
 800065a:	0018      	movs	r0, r3
 800065c:	0039      	movs	r1, r7
 800065e:	9304      	str	r3, [sp, #16]
 8000660:	f7ff fd52 	bl	8000108 <__udivsi3>
 8000664:	9b01      	ldr	r3, [sp, #4]
 8000666:	4682      	mov	sl, r0
 8000668:	4343      	muls	r3, r0
 800066a:	0039      	movs	r1, r7
 800066c:	9804      	ldr	r0, [sp, #16]
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	f7ff fdd0 	bl	8000214 <__aeabi_uidivmod>
 8000674:	9801      	ldr	r0, [sp, #4]
 8000676:	040b      	lsls	r3, r1, #16
 8000678:	0431      	lsls	r1, r6, #16
 800067a:	0c09      	lsrs	r1, r1, #16
 800067c:	4319      	orrs	r1, r3
 800067e:	4288      	cmp	r0, r1
 8000680:	d90d      	bls.n	800069e <__aeabi_ddiv+0x38a>
 8000682:	4653      	mov	r3, sl
 8000684:	4441      	add	r1, r8
 8000686:	3b01      	subs	r3, #1
 8000688:	4588      	cmp	r8, r1
 800068a:	d900      	bls.n	800068e <__aeabi_ddiv+0x37a>
 800068c:	e0e8      	b.n	8000860 <__aeabi_ddiv+0x54c>
 800068e:	4288      	cmp	r0, r1
 8000690:	d800      	bhi.n	8000694 <__aeabi_ddiv+0x380>
 8000692:	e0e5      	b.n	8000860 <__aeabi_ddiv+0x54c>
 8000694:	2302      	movs	r3, #2
 8000696:	425b      	negs	r3, r3
 8000698:	469c      	mov	ip, r3
 800069a:	4441      	add	r1, r8
 800069c:	44e2      	add	sl, ip
 800069e:	9b01      	ldr	r3, [sp, #4]
 80006a0:	042d      	lsls	r5, r5, #16
 80006a2:	1ace      	subs	r6, r1, r3
 80006a4:	4651      	mov	r1, sl
 80006a6:	4329      	orrs	r1, r5
 80006a8:	9d05      	ldr	r5, [sp, #20]
 80006aa:	464f      	mov	r7, r9
 80006ac:	002a      	movs	r2, r5
 80006ae:	040b      	lsls	r3, r1, #16
 80006b0:	0c08      	lsrs	r0, r1, #16
 80006b2:	0c1b      	lsrs	r3, r3, #16
 80006b4:	435a      	muls	r2, r3
 80006b6:	4345      	muls	r5, r0
 80006b8:	437b      	muls	r3, r7
 80006ba:	4378      	muls	r0, r7
 80006bc:	195b      	adds	r3, r3, r5
 80006be:	0c17      	lsrs	r7, r2, #16
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	429d      	cmp	r5, r3
 80006c4:	d903      	bls.n	80006ce <__aeabi_ddiv+0x3ba>
 80006c6:	2580      	movs	r5, #128	; 0x80
 80006c8:	026d      	lsls	r5, r5, #9
 80006ca:	46ac      	mov	ip, r5
 80006cc:	4460      	add	r0, ip
 80006ce:	0c1d      	lsrs	r5, r3, #16
 80006d0:	0412      	lsls	r2, r2, #16
 80006d2:	041b      	lsls	r3, r3, #16
 80006d4:	0c12      	lsrs	r2, r2, #16
 80006d6:	1828      	adds	r0, r5, r0
 80006d8:	189b      	adds	r3, r3, r2
 80006da:	4286      	cmp	r6, r0
 80006dc:	d200      	bcs.n	80006e0 <__aeabi_ddiv+0x3cc>
 80006de:	e093      	b.n	8000808 <__aeabi_ddiv+0x4f4>
 80006e0:	d100      	bne.n	80006e4 <__aeabi_ddiv+0x3d0>
 80006e2:	e08e      	b.n	8000802 <__aeabi_ddiv+0x4ee>
 80006e4:	2301      	movs	r3, #1
 80006e6:	4319      	orrs	r1, r3
 80006e8:	4ba0      	ldr	r3, [pc, #640]	; (800096c <__aeabi_ddiv+0x658>)
 80006ea:	18e3      	adds	r3, r4, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dc00      	bgt.n	80006f2 <__aeabi_ddiv+0x3de>
 80006f0:	e099      	b.n	8000826 <__aeabi_ddiv+0x512>
 80006f2:	074a      	lsls	r2, r1, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_ddiv+0x3e4>
 80006f6:	e09e      	b.n	8000836 <__aeabi_ddiv+0x522>
 80006f8:	465a      	mov	r2, fp
 80006fa:	01d2      	lsls	r2, r2, #7
 80006fc:	d506      	bpl.n	800070c <__aeabi_ddiv+0x3f8>
 80006fe:	465a      	mov	r2, fp
 8000700:	4b9b      	ldr	r3, [pc, #620]	; (8000970 <__aeabi_ddiv+0x65c>)
 8000702:	401a      	ands	r2, r3
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	4693      	mov	fp, r2
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	18e3      	adds	r3, r4, r3
 800070c:	4a99      	ldr	r2, [pc, #612]	; (8000974 <__aeabi_ddiv+0x660>)
 800070e:	4293      	cmp	r3, r2
 8000710:	dd68      	ble.n	80007e4 <__aeabi_ddiv+0x4d0>
 8000712:	2301      	movs	r3, #1
 8000714:	9a02      	ldr	r2, [sp, #8]
 8000716:	4c98      	ldr	r4, [pc, #608]	; (8000978 <__aeabi_ddiv+0x664>)
 8000718:	401a      	ands	r2, r3
 800071a:	2300      	movs	r3, #0
 800071c:	4694      	mov	ip, r2
 800071e:	4698      	mov	r8, r3
 8000720:	2200      	movs	r2, #0
 8000722:	e6c5      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	464b      	mov	r3, r9
 8000728:	0312      	lsls	r2, r2, #12
 800072a:	4213      	tst	r3, r2
 800072c:	d00a      	beq.n	8000744 <__aeabi_ddiv+0x430>
 800072e:	465b      	mov	r3, fp
 8000730:	4213      	tst	r3, r2
 8000732:	d106      	bne.n	8000742 <__aeabi_ddiv+0x42e>
 8000734:	431a      	orrs	r2, r3
 8000736:	0312      	lsls	r2, r2, #12
 8000738:	0b12      	lsrs	r2, r2, #12
 800073a:	46ac      	mov	ip, r5
 800073c:	4688      	mov	r8, r1
 800073e:	4c8e      	ldr	r4, [pc, #568]	; (8000978 <__aeabi_ddiv+0x664>)
 8000740:	e6b6      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 8000742:	464b      	mov	r3, r9
 8000744:	431a      	orrs	r2, r3
 8000746:	0312      	lsls	r2, r2, #12
 8000748:	0b12      	lsrs	r2, r2, #12
 800074a:	46bc      	mov	ip, r7
 800074c:	4c8a      	ldr	r4, [pc, #552]	; (8000978 <__aeabi_ddiv+0x664>)
 800074e:	e6af      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 8000750:	0003      	movs	r3, r0
 8000752:	465a      	mov	r2, fp
 8000754:	3b28      	subs	r3, #40	; 0x28
 8000756:	409a      	lsls	r2, r3
 8000758:	2300      	movs	r3, #0
 800075a:	4691      	mov	r9, r2
 800075c:	4698      	mov	r8, r3
 800075e:	e657      	b.n	8000410 <__aeabi_ddiv+0xfc>
 8000760:	4658      	mov	r0, fp
 8000762:	f7ff fd9b 	bl	800029c <__clzsi2>
 8000766:	3020      	adds	r0, #32
 8000768:	e640      	b.n	80003ec <__aeabi_ddiv+0xd8>
 800076a:	0003      	movs	r3, r0
 800076c:	4652      	mov	r2, sl
 800076e:	3b28      	subs	r3, #40	; 0x28
 8000770:	409a      	lsls	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	4693      	mov	fp, r2
 8000776:	e677      	b.n	8000468 <__aeabi_ddiv+0x154>
 8000778:	f7ff fd90 	bl	800029c <__clzsi2>
 800077c:	3020      	adds	r0, #32
 800077e:	e65f      	b.n	8000440 <__aeabi_ddiv+0x12c>
 8000780:	4588      	cmp	r8, r1
 8000782:	d200      	bcs.n	8000786 <__aeabi_ddiv+0x472>
 8000784:	e6c7      	b.n	8000516 <__aeabi_ddiv+0x202>
 8000786:	464b      	mov	r3, r9
 8000788:	07de      	lsls	r6, r3, #31
 800078a:	085d      	lsrs	r5, r3, #1
 800078c:	4643      	mov	r3, r8
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	431e      	orrs	r6, r3
 8000792:	4643      	mov	r3, r8
 8000794:	07db      	lsls	r3, r3, #31
 8000796:	469a      	mov	sl, r3
 8000798:	e6c2      	b.n	8000520 <__aeabi_ddiv+0x20c>
 800079a:	2500      	movs	r5, #0
 800079c:	4592      	cmp	sl, r2
 800079e:	d300      	bcc.n	80007a2 <__aeabi_ddiv+0x48e>
 80007a0:	e733      	b.n	800060a <__aeabi_ddiv+0x2f6>
 80007a2:	9e03      	ldr	r6, [sp, #12]
 80007a4:	4659      	mov	r1, fp
 80007a6:	46b4      	mov	ip, r6
 80007a8:	44e2      	add	sl, ip
 80007aa:	45b2      	cmp	sl, r6
 80007ac:	41ad      	sbcs	r5, r5
 80007ae:	426d      	negs	r5, r5
 80007b0:	4445      	add	r5, r8
 80007b2:	18eb      	adds	r3, r5, r3
 80007b4:	3901      	subs	r1, #1
 80007b6:	4598      	cmp	r8, r3
 80007b8:	d207      	bcs.n	80007ca <__aeabi_ddiv+0x4b6>
 80007ba:	4298      	cmp	r0, r3
 80007bc:	d900      	bls.n	80007c0 <__aeabi_ddiv+0x4ac>
 80007be:	e07f      	b.n	80008c0 <__aeabi_ddiv+0x5ac>
 80007c0:	d100      	bne.n	80007c4 <__aeabi_ddiv+0x4b0>
 80007c2:	e0bc      	b.n	800093e <__aeabi_ddiv+0x62a>
 80007c4:	1a1d      	subs	r5, r3, r0
 80007c6:	468b      	mov	fp, r1
 80007c8:	e71f      	b.n	800060a <__aeabi_ddiv+0x2f6>
 80007ca:	4598      	cmp	r8, r3
 80007cc:	d1fa      	bne.n	80007c4 <__aeabi_ddiv+0x4b0>
 80007ce:	9d03      	ldr	r5, [sp, #12]
 80007d0:	4555      	cmp	r5, sl
 80007d2:	d9f2      	bls.n	80007ba <__aeabi_ddiv+0x4a6>
 80007d4:	4643      	mov	r3, r8
 80007d6:	468b      	mov	fp, r1
 80007d8:	1a1d      	subs	r5, r3, r0
 80007da:	e716      	b.n	800060a <__aeabi_ddiv+0x2f6>
 80007dc:	469b      	mov	fp, r3
 80007de:	e6ca      	b.n	8000576 <__aeabi_ddiv+0x262>
 80007e0:	0015      	movs	r5, r2
 80007e2:	e6e7      	b.n	80005b4 <__aeabi_ddiv+0x2a0>
 80007e4:	465a      	mov	r2, fp
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	0752      	lsls	r2, r2, #29
 80007ea:	430a      	orrs	r2, r1
 80007ec:	055b      	lsls	r3, r3, #21
 80007ee:	4690      	mov	r8, r2
 80007f0:	0d5c      	lsrs	r4, r3, #21
 80007f2:	465a      	mov	r2, fp
 80007f4:	2301      	movs	r3, #1
 80007f6:	9902      	ldr	r1, [sp, #8]
 80007f8:	0252      	lsls	r2, r2, #9
 80007fa:	4019      	ands	r1, r3
 80007fc:	0b12      	lsrs	r2, r2, #12
 80007fe:	468c      	mov	ip, r1
 8000800:	e656      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 8000802:	2b00      	cmp	r3, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_ddiv+0x4f4>
 8000806:	e76f      	b.n	80006e8 <__aeabi_ddiv+0x3d4>
 8000808:	4446      	add	r6, r8
 800080a:	1e4a      	subs	r2, r1, #1
 800080c:	45b0      	cmp	r8, r6
 800080e:	d929      	bls.n	8000864 <__aeabi_ddiv+0x550>
 8000810:	0011      	movs	r1, r2
 8000812:	4286      	cmp	r6, r0
 8000814:	d000      	beq.n	8000818 <__aeabi_ddiv+0x504>
 8000816:	e765      	b.n	80006e4 <__aeabi_ddiv+0x3d0>
 8000818:	9a03      	ldr	r2, [sp, #12]
 800081a:	4293      	cmp	r3, r2
 800081c:	d000      	beq.n	8000820 <__aeabi_ddiv+0x50c>
 800081e:	e761      	b.n	80006e4 <__aeabi_ddiv+0x3d0>
 8000820:	e762      	b.n	80006e8 <__aeabi_ddiv+0x3d4>
 8000822:	2101      	movs	r1, #1
 8000824:	4249      	negs	r1, r1
 8000826:	2001      	movs	r0, #1
 8000828:	1ac2      	subs	r2, r0, r3
 800082a:	2a38      	cmp	r2, #56	; 0x38
 800082c:	dd21      	ble.n	8000872 <__aeabi_ddiv+0x55e>
 800082e:	9b02      	ldr	r3, [sp, #8]
 8000830:	4003      	ands	r3, r0
 8000832:	469c      	mov	ip, r3
 8000834:	e638      	b.n	80004a8 <__aeabi_ddiv+0x194>
 8000836:	220f      	movs	r2, #15
 8000838:	400a      	ands	r2, r1
 800083a:	2a04      	cmp	r2, #4
 800083c:	d100      	bne.n	8000840 <__aeabi_ddiv+0x52c>
 800083e:	e75b      	b.n	80006f8 <__aeabi_ddiv+0x3e4>
 8000840:	000a      	movs	r2, r1
 8000842:	1d11      	adds	r1, r2, #4
 8000844:	4291      	cmp	r1, r2
 8000846:	4192      	sbcs	r2, r2
 8000848:	4252      	negs	r2, r2
 800084a:	4493      	add	fp, r2
 800084c:	e754      	b.n	80006f8 <__aeabi_ddiv+0x3e4>
 800084e:	4b47      	ldr	r3, [pc, #284]	; (800096c <__aeabi_ddiv+0x658>)
 8000850:	18e3      	adds	r3, r4, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	dde5      	ble.n	8000822 <__aeabi_ddiv+0x50e>
 8000856:	2201      	movs	r2, #1
 8000858:	4252      	negs	r2, r2
 800085a:	e7f2      	b.n	8000842 <__aeabi_ddiv+0x52e>
 800085c:	001d      	movs	r5, r3
 800085e:	e6fa      	b.n	8000656 <__aeabi_ddiv+0x342>
 8000860:	469a      	mov	sl, r3
 8000862:	e71c      	b.n	800069e <__aeabi_ddiv+0x38a>
 8000864:	42b0      	cmp	r0, r6
 8000866:	d839      	bhi.n	80008dc <__aeabi_ddiv+0x5c8>
 8000868:	d06e      	beq.n	8000948 <__aeabi_ddiv+0x634>
 800086a:	0011      	movs	r1, r2
 800086c:	e73a      	b.n	80006e4 <__aeabi_ddiv+0x3d0>
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	e73a      	b.n	80006e8 <__aeabi_ddiv+0x3d4>
 8000872:	2a1f      	cmp	r2, #31
 8000874:	dc3c      	bgt.n	80008f0 <__aeabi_ddiv+0x5dc>
 8000876:	2320      	movs	r3, #32
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	000c      	movs	r4, r1
 800087c:	4658      	mov	r0, fp
 800087e:	4099      	lsls	r1, r3
 8000880:	4098      	lsls	r0, r3
 8000882:	1e4b      	subs	r3, r1, #1
 8000884:	4199      	sbcs	r1, r3
 8000886:	465b      	mov	r3, fp
 8000888:	40d4      	lsrs	r4, r2
 800088a:	40d3      	lsrs	r3, r2
 800088c:	4320      	orrs	r0, r4
 800088e:	4308      	orrs	r0, r1
 8000890:	001a      	movs	r2, r3
 8000892:	0743      	lsls	r3, r0, #29
 8000894:	d009      	beq.n	80008aa <__aeabi_ddiv+0x596>
 8000896:	230f      	movs	r3, #15
 8000898:	4003      	ands	r3, r0
 800089a:	2b04      	cmp	r3, #4
 800089c:	d005      	beq.n	80008aa <__aeabi_ddiv+0x596>
 800089e:	0001      	movs	r1, r0
 80008a0:	1d08      	adds	r0, r1, #4
 80008a2:	4288      	cmp	r0, r1
 80008a4:	419b      	sbcs	r3, r3
 80008a6:	425b      	negs	r3, r3
 80008a8:	18d2      	adds	r2, r2, r3
 80008aa:	0213      	lsls	r3, r2, #8
 80008ac:	d53a      	bpl.n	8000924 <__aeabi_ddiv+0x610>
 80008ae:	2301      	movs	r3, #1
 80008b0:	9a02      	ldr	r2, [sp, #8]
 80008b2:	2401      	movs	r4, #1
 80008b4:	401a      	ands	r2, r3
 80008b6:	2300      	movs	r3, #0
 80008b8:	4694      	mov	ip, r2
 80008ba:	4698      	mov	r8, r3
 80008bc:	2200      	movs	r2, #0
 80008be:	e5f7      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 80008c0:	2102      	movs	r1, #2
 80008c2:	4249      	negs	r1, r1
 80008c4:	468c      	mov	ip, r1
 80008c6:	9d03      	ldr	r5, [sp, #12]
 80008c8:	44e3      	add	fp, ip
 80008ca:	46ac      	mov	ip, r5
 80008cc:	44e2      	add	sl, ip
 80008ce:	45aa      	cmp	sl, r5
 80008d0:	41ad      	sbcs	r5, r5
 80008d2:	426d      	negs	r5, r5
 80008d4:	4445      	add	r5, r8
 80008d6:	18ed      	adds	r5, r5, r3
 80008d8:	1a2d      	subs	r5, r5, r0
 80008da:	e696      	b.n	800060a <__aeabi_ddiv+0x2f6>
 80008dc:	1e8a      	subs	r2, r1, #2
 80008de:	9903      	ldr	r1, [sp, #12]
 80008e0:	004d      	lsls	r5, r1, #1
 80008e2:	428d      	cmp	r5, r1
 80008e4:	4189      	sbcs	r1, r1
 80008e6:	4249      	negs	r1, r1
 80008e8:	4441      	add	r1, r8
 80008ea:	1876      	adds	r6, r6, r1
 80008ec:	9503      	str	r5, [sp, #12]
 80008ee:	e78f      	b.n	8000810 <__aeabi_ddiv+0x4fc>
 80008f0:	201f      	movs	r0, #31
 80008f2:	4240      	negs	r0, r0
 80008f4:	1ac3      	subs	r3, r0, r3
 80008f6:	4658      	mov	r0, fp
 80008f8:	40d8      	lsrs	r0, r3
 80008fa:	0003      	movs	r3, r0
 80008fc:	2a20      	cmp	r2, #32
 80008fe:	d028      	beq.n	8000952 <__aeabi_ddiv+0x63e>
 8000900:	2040      	movs	r0, #64	; 0x40
 8000902:	465d      	mov	r5, fp
 8000904:	1a82      	subs	r2, r0, r2
 8000906:	4095      	lsls	r5, r2
 8000908:	4329      	orrs	r1, r5
 800090a:	1e4a      	subs	r2, r1, #1
 800090c:	4191      	sbcs	r1, r2
 800090e:	4319      	orrs	r1, r3
 8000910:	2307      	movs	r3, #7
 8000912:	2200      	movs	r2, #0
 8000914:	400b      	ands	r3, r1
 8000916:	d009      	beq.n	800092c <__aeabi_ddiv+0x618>
 8000918:	230f      	movs	r3, #15
 800091a:	2200      	movs	r2, #0
 800091c:	400b      	ands	r3, r1
 800091e:	0008      	movs	r0, r1
 8000920:	2b04      	cmp	r3, #4
 8000922:	d1bd      	bne.n	80008a0 <__aeabi_ddiv+0x58c>
 8000924:	0001      	movs	r1, r0
 8000926:	0753      	lsls	r3, r2, #29
 8000928:	0252      	lsls	r2, r2, #9
 800092a:	0b12      	lsrs	r2, r2, #12
 800092c:	08c9      	lsrs	r1, r1, #3
 800092e:	4319      	orrs	r1, r3
 8000930:	2301      	movs	r3, #1
 8000932:	4688      	mov	r8, r1
 8000934:	9902      	ldr	r1, [sp, #8]
 8000936:	2400      	movs	r4, #0
 8000938:	4019      	ands	r1, r3
 800093a:	468c      	mov	ip, r1
 800093c:	e5b8      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 800093e:	4552      	cmp	r2, sl
 8000940:	d8be      	bhi.n	80008c0 <__aeabi_ddiv+0x5ac>
 8000942:	468b      	mov	fp, r1
 8000944:	2500      	movs	r5, #0
 8000946:	e660      	b.n	800060a <__aeabi_ddiv+0x2f6>
 8000948:	9d03      	ldr	r5, [sp, #12]
 800094a:	429d      	cmp	r5, r3
 800094c:	d3c6      	bcc.n	80008dc <__aeabi_ddiv+0x5c8>
 800094e:	0011      	movs	r1, r2
 8000950:	e762      	b.n	8000818 <__aeabi_ddiv+0x504>
 8000952:	2500      	movs	r5, #0
 8000954:	e7d8      	b.n	8000908 <__aeabi_ddiv+0x5f4>
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	465b      	mov	r3, fp
 800095a:	0312      	lsls	r2, r2, #12
 800095c:	431a      	orrs	r2, r3
 800095e:	9b01      	ldr	r3, [sp, #4]
 8000960:	0312      	lsls	r2, r2, #12
 8000962:	0b12      	lsrs	r2, r2, #12
 8000964:	469c      	mov	ip, r3
 8000966:	4688      	mov	r8, r1
 8000968:	4c03      	ldr	r4, [pc, #12]	; (8000978 <__aeabi_ddiv+0x664>)
 800096a:	e5a1      	b.n	80004b0 <__aeabi_ddiv+0x19c>
 800096c:	000003ff 	.word	0x000003ff
 8000970:	feffffff 	.word	0xfeffffff
 8000974:	000007fe 	.word	0x000007fe
 8000978:	000007ff 	.word	0x000007ff

0800097c <__eqdf2>:
 800097c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097e:	464f      	mov	r7, r9
 8000980:	4646      	mov	r6, r8
 8000982:	46d6      	mov	lr, sl
 8000984:	005c      	lsls	r4, r3, #1
 8000986:	b5c0      	push	{r6, r7, lr}
 8000988:	031f      	lsls	r7, r3, #12
 800098a:	0fdb      	lsrs	r3, r3, #31
 800098c:	469a      	mov	sl, r3
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <__eqdf2+0x70>)
 8000990:	030e      	lsls	r6, r1, #12
 8000992:	004d      	lsls	r5, r1, #1
 8000994:	4684      	mov	ip, r0
 8000996:	4680      	mov	r8, r0
 8000998:	0b36      	lsrs	r6, r6, #12
 800099a:	0d6d      	lsrs	r5, r5, #21
 800099c:	0fc9      	lsrs	r1, r1, #31
 800099e:	4691      	mov	r9, r2
 80009a0:	0b3f      	lsrs	r7, r7, #12
 80009a2:	0d64      	lsrs	r4, r4, #21
 80009a4:	2001      	movs	r0, #1
 80009a6:	429d      	cmp	r5, r3
 80009a8:	d008      	beq.n	80009bc <__eqdf2+0x40>
 80009aa:	429c      	cmp	r4, r3
 80009ac:	d001      	beq.n	80009b2 <__eqdf2+0x36>
 80009ae:	42a5      	cmp	r5, r4
 80009b0:	d00b      	beq.n	80009ca <__eqdf2+0x4e>
 80009b2:	bc1c      	pop	{r2, r3, r4}
 80009b4:	4690      	mov	r8, r2
 80009b6:	4699      	mov	r9, r3
 80009b8:	46a2      	mov	sl, r4
 80009ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009bc:	4663      	mov	r3, ip
 80009be:	4333      	orrs	r3, r6
 80009c0:	d1f7      	bne.n	80009b2 <__eqdf2+0x36>
 80009c2:	42ac      	cmp	r4, r5
 80009c4:	d1f5      	bne.n	80009b2 <__eqdf2+0x36>
 80009c6:	433a      	orrs	r2, r7
 80009c8:	d1f3      	bne.n	80009b2 <__eqdf2+0x36>
 80009ca:	2001      	movs	r0, #1
 80009cc:	42be      	cmp	r6, r7
 80009ce:	d1f0      	bne.n	80009b2 <__eqdf2+0x36>
 80009d0:	45c8      	cmp	r8, r9
 80009d2:	d1ee      	bne.n	80009b2 <__eqdf2+0x36>
 80009d4:	4551      	cmp	r1, sl
 80009d6:	d007      	beq.n	80009e8 <__eqdf2+0x6c>
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d1ea      	bne.n	80009b2 <__eqdf2+0x36>
 80009dc:	4663      	mov	r3, ip
 80009de:	431e      	orrs	r6, r3
 80009e0:	0030      	movs	r0, r6
 80009e2:	1e46      	subs	r6, r0, #1
 80009e4:	41b0      	sbcs	r0, r6
 80009e6:	e7e4      	b.n	80009b2 <__eqdf2+0x36>
 80009e8:	2000      	movs	r0, #0
 80009ea:	e7e2      	b.n	80009b2 <__eqdf2+0x36>
 80009ec:	000007ff 	.word	0x000007ff

080009f0 <__gedf2>:
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	4645      	mov	r5, r8
 80009f4:	46de      	mov	lr, fp
 80009f6:	4657      	mov	r7, sl
 80009f8:	464e      	mov	r6, r9
 80009fa:	b5e0      	push	{r5, r6, r7, lr}
 80009fc:	031f      	lsls	r7, r3, #12
 80009fe:	0b3d      	lsrs	r5, r7, #12
 8000a00:	4f2c      	ldr	r7, [pc, #176]	; (8000ab4 <__gedf2+0xc4>)
 8000a02:	030e      	lsls	r6, r1, #12
 8000a04:	004c      	lsls	r4, r1, #1
 8000a06:	46ab      	mov	fp, r5
 8000a08:	005d      	lsls	r5, r3, #1
 8000a0a:	4684      	mov	ip, r0
 8000a0c:	0b36      	lsrs	r6, r6, #12
 8000a0e:	0d64      	lsrs	r4, r4, #21
 8000a10:	0fc9      	lsrs	r1, r1, #31
 8000a12:	4690      	mov	r8, r2
 8000a14:	0d6d      	lsrs	r5, r5, #21
 8000a16:	0fdb      	lsrs	r3, r3, #31
 8000a18:	42bc      	cmp	r4, r7
 8000a1a:	d02a      	beq.n	8000a72 <__gedf2+0x82>
 8000a1c:	4f25      	ldr	r7, [pc, #148]	; (8000ab4 <__gedf2+0xc4>)
 8000a1e:	42bd      	cmp	r5, r7
 8000a20:	d02d      	beq.n	8000a7e <__gedf2+0x8e>
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d10f      	bne.n	8000a46 <__gedf2+0x56>
 8000a26:	4330      	orrs	r0, r6
 8000a28:	0007      	movs	r7, r0
 8000a2a:	4681      	mov	r9, r0
 8000a2c:	4278      	negs	r0, r7
 8000a2e:	4178      	adcs	r0, r7
 8000a30:	b2c0      	uxtb	r0, r0
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d117      	bne.n	8000a66 <__gedf2+0x76>
 8000a36:	465f      	mov	r7, fp
 8000a38:	433a      	orrs	r2, r7
 8000a3a:	d114      	bne.n	8000a66 <__gedf2+0x76>
 8000a3c:	464b      	mov	r3, r9
 8000a3e:	2000      	movs	r0, #0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00a      	beq.n	8000a5a <__gedf2+0x6a>
 8000a44:	e006      	b.n	8000a54 <__gedf2+0x64>
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d102      	bne.n	8000a50 <__gedf2+0x60>
 8000a4a:	4658      	mov	r0, fp
 8000a4c:	4302      	orrs	r2, r0
 8000a4e:	d001      	beq.n	8000a54 <__gedf2+0x64>
 8000a50:	4299      	cmp	r1, r3
 8000a52:	d018      	beq.n	8000a86 <__gedf2+0x96>
 8000a54:	4248      	negs	r0, r1
 8000a56:	2101      	movs	r1, #1
 8000a58:	4308      	orrs	r0, r1
 8000a5a:	bc3c      	pop	{r2, r3, r4, r5}
 8000a5c:	4690      	mov	r8, r2
 8000a5e:	4699      	mov	r9, r3
 8000a60:	46a2      	mov	sl, r4
 8000a62:	46ab      	mov	fp, r5
 8000a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d0f2      	beq.n	8000a50 <__gedf2+0x60>
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4318      	orrs	r0, r3
 8000a70:	e7f3      	b.n	8000a5a <__gedf2+0x6a>
 8000a72:	0037      	movs	r7, r6
 8000a74:	4307      	orrs	r7, r0
 8000a76:	d0d1      	beq.n	8000a1c <__gedf2+0x2c>
 8000a78:	2002      	movs	r0, #2
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	e7ed      	b.n	8000a5a <__gedf2+0x6a>
 8000a7e:	465f      	mov	r7, fp
 8000a80:	4317      	orrs	r7, r2
 8000a82:	d0ce      	beq.n	8000a22 <__gedf2+0x32>
 8000a84:	e7f8      	b.n	8000a78 <__gedf2+0x88>
 8000a86:	42ac      	cmp	r4, r5
 8000a88:	dce4      	bgt.n	8000a54 <__gedf2+0x64>
 8000a8a:	da03      	bge.n	8000a94 <__gedf2+0xa4>
 8000a8c:	1e48      	subs	r0, r1, #1
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4308      	orrs	r0, r1
 8000a92:	e7e2      	b.n	8000a5a <__gedf2+0x6a>
 8000a94:	455e      	cmp	r6, fp
 8000a96:	d8dd      	bhi.n	8000a54 <__gedf2+0x64>
 8000a98:	d006      	beq.n	8000aa8 <__gedf2+0xb8>
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	455e      	cmp	r6, fp
 8000a9e:	d2dc      	bcs.n	8000a5a <__gedf2+0x6a>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	1e48      	subs	r0, r1, #1
 8000aa4:	4318      	orrs	r0, r3
 8000aa6:	e7d8      	b.n	8000a5a <__gedf2+0x6a>
 8000aa8:	45c4      	cmp	ip, r8
 8000aaa:	d8d3      	bhi.n	8000a54 <__gedf2+0x64>
 8000aac:	2000      	movs	r0, #0
 8000aae:	45c4      	cmp	ip, r8
 8000ab0:	d3f6      	bcc.n	8000aa0 <__gedf2+0xb0>
 8000ab2:	e7d2      	b.n	8000a5a <__gedf2+0x6a>
 8000ab4:	000007ff 	.word	0x000007ff

08000ab8 <__ledf2>:
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	464e      	mov	r6, r9
 8000abc:	4645      	mov	r5, r8
 8000abe:	46de      	mov	lr, fp
 8000ac0:	4657      	mov	r7, sl
 8000ac2:	005c      	lsls	r4, r3, #1
 8000ac4:	b5e0      	push	{r5, r6, r7, lr}
 8000ac6:	031f      	lsls	r7, r3, #12
 8000ac8:	0fdb      	lsrs	r3, r3, #31
 8000aca:	4699      	mov	r9, r3
 8000acc:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <__ledf2+0xc0>)
 8000ace:	030e      	lsls	r6, r1, #12
 8000ad0:	004d      	lsls	r5, r1, #1
 8000ad2:	0fc9      	lsrs	r1, r1, #31
 8000ad4:	4684      	mov	ip, r0
 8000ad6:	0b36      	lsrs	r6, r6, #12
 8000ad8:	0d6d      	lsrs	r5, r5, #21
 8000ada:	468b      	mov	fp, r1
 8000adc:	4690      	mov	r8, r2
 8000ade:	0b3f      	lsrs	r7, r7, #12
 8000ae0:	0d64      	lsrs	r4, r4, #21
 8000ae2:	429d      	cmp	r5, r3
 8000ae4:	d020      	beq.n	8000b28 <__ledf2+0x70>
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <__ledf2+0xc0>)
 8000ae8:	429c      	cmp	r4, r3
 8000aea:	d022      	beq.n	8000b32 <__ledf2+0x7a>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d112      	bne.n	8000b16 <__ledf2+0x5e>
 8000af0:	4330      	orrs	r0, r6
 8000af2:	4243      	negs	r3, r0
 8000af4:	4143      	adcs	r3, r0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2c00      	cmp	r4, #0
 8000afa:	d01f      	beq.n	8000b3c <__ledf2+0x84>
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00c      	beq.n	8000b1a <__ledf2+0x62>
 8000b00:	464b      	mov	r3, r9
 8000b02:	2001      	movs	r0, #1
 8000b04:	3b01      	subs	r3, #1
 8000b06:	4303      	orrs	r3, r0
 8000b08:	0018      	movs	r0, r3
 8000b0a:	bc3c      	pop	{r2, r3, r4, r5}
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	4699      	mov	r9, r3
 8000b10:	46a2      	mov	sl, r4
 8000b12:	46ab      	mov	fp, r5
 8000b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d016      	beq.n	8000b48 <__ledf2+0x90>
 8000b1a:	45cb      	cmp	fp, r9
 8000b1c:	d017      	beq.n	8000b4e <__ledf2+0x96>
 8000b1e:	465b      	mov	r3, fp
 8000b20:	4259      	negs	r1, r3
 8000b22:	2301      	movs	r3, #1
 8000b24:	430b      	orrs	r3, r1
 8000b26:	e7ef      	b.n	8000b08 <__ledf2+0x50>
 8000b28:	0031      	movs	r1, r6
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	4301      	orrs	r1, r0
 8000b2e:	d1eb      	bne.n	8000b08 <__ledf2+0x50>
 8000b30:	e7d9      	b.n	8000ae6 <__ledf2+0x2e>
 8000b32:	0039      	movs	r1, r7
 8000b34:	2302      	movs	r3, #2
 8000b36:	4311      	orrs	r1, r2
 8000b38:	d1e6      	bne.n	8000b08 <__ledf2+0x50>
 8000b3a:	e7d7      	b.n	8000aec <__ledf2+0x34>
 8000b3c:	433a      	orrs	r2, r7
 8000b3e:	d1dd      	bne.n	8000afc <__ledf2+0x44>
 8000b40:	2300      	movs	r3, #0
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d0e0      	beq.n	8000b08 <__ledf2+0x50>
 8000b46:	e7ea      	b.n	8000b1e <__ledf2+0x66>
 8000b48:	433a      	orrs	r2, r7
 8000b4a:	d1e6      	bne.n	8000b1a <__ledf2+0x62>
 8000b4c:	e7e7      	b.n	8000b1e <__ledf2+0x66>
 8000b4e:	42a5      	cmp	r5, r4
 8000b50:	dce5      	bgt.n	8000b1e <__ledf2+0x66>
 8000b52:	db05      	blt.n	8000b60 <__ledf2+0xa8>
 8000b54:	42be      	cmp	r6, r7
 8000b56:	d8e2      	bhi.n	8000b1e <__ledf2+0x66>
 8000b58:	d007      	beq.n	8000b6a <__ledf2+0xb2>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	42be      	cmp	r6, r7
 8000b5e:	d2d3      	bcs.n	8000b08 <__ledf2+0x50>
 8000b60:	4659      	mov	r1, fp
 8000b62:	2301      	movs	r3, #1
 8000b64:	3901      	subs	r1, #1
 8000b66:	430b      	orrs	r3, r1
 8000b68:	e7ce      	b.n	8000b08 <__ledf2+0x50>
 8000b6a:	45c4      	cmp	ip, r8
 8000b6c:	d8d7      	bhi.n	8000b1e <__ledf2+0x66>
 8000b6e:	2300      	movs	r3, #0
 8000b70:	45c4      	cmp	ip, r8
 8000b72:	d3f5      	bcc.n	8000b60 <__ledf2+0xa8>
 8000b74:	e7c8      	b.n	8000b08 <__ledf2+0x50>
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	000007ff 	.word	0x000007ff

08000b7c <__aeabi_dmul>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	4645      	mov	r5, r8
 8000b82:	46de      	mov	lr, fp
 8000b84:	464e      	mov	r6, r9
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	030c      	lsls	r4, r1, #12
 8000b8a:	4698      	mov	r8, r3
 8000b8c:	004e      	lsls	r6, r1, #1
 8000b8e:	0b23      	lsrs	r3, r4, #12
 8000b90:	b087      	sub	sp, #28
 8000b92:	0007      	movs	r7, r0
 8000b94:	4692      	mov	sl, r2
 8000b96:	469b      	mov	fp, r3
 8000b98:	0d76      	lsrs	r6, r6, #21
 8000b9a:	0fcd      	lsrs	r5, r1, #31
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d06b      	beq.n	8000c78 <__aeabi_dmul+0xfc>
 8000ba0:	4b6d      	ldr	r3, [pc, #436]	; (8000d58 <__aeabi_dmul+0x1dc>)
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	d035      	beq.n	8000c12 <__aeabi_dmul+0x96>
 8000ba6:	2480      	movs	r4, #128	; 0x80
 8000ba8:	465b      	mov	r3, fp
 8000baa:	0f42      	lsrs	r2, r0, #29
 8000bac:	0424      	lsls	r4, r4, #16
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	4314      	orrs	r4, r2
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	00c3      	lsls	r3, r0, #3
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	4b68      	ldr	r3, [pc, #416]	; (8000d5c <__aeabi_dmul+0x1e0>)
 8000bba:	46a3      	mov	fp, r4
 8000bbc:	469c      	mov	ip, r3
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	4466      	add	r6, ip
 8000bc4:	9302      	str	r3, [sp, #8]
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	031c      	lsls	r4, r3, #12
 8000bca:	005a      	lsls	r2, r3, #1
 8000bcc:	0fdb      	lsrs	r3, r3, #31
 8000bce:	4650      	mov	r0, sl
 8000bd0:	0b24      	lsrs	r4, r4, #12
 8000bd2:	0d52      	lsrs	r2, r2, #21
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dmul+0x5e>
 8000bd8:	e076      	b.n	8000cc8 <__aeabi_dmul+0x14c>
 8000bda:	4b5f      	ldr	r3, [pc, #380]	; (8000d58 <__aeabi_dmul+0x1dc>)
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d06d      	beq.n	8000cbc <__aeabi_dmul+0x140>
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	0f41      	lsrs	r1, r0, #29
 8000be4:	041b      	lsls	r3, r3, #16
 8000be6:	430b      	orrs	r3, r1
 8000be8:	495c      	ldr	r1, [pc, #368]	; (8000d5c <__aeabi_dmul+0x1e0>)
 8000bea:	00e4      	lsls	r4, r4, #3
 8000bec:	468c      	mov	ip, r1
 8000bee:	431c      	orrs	r4, r3
 8000bf0:	00c3      	lsls	r3, r0, #3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	4462      	add	r2, ip
 8000bf6:	4641      	mov	r1, r8
 8000bf8:	18b6      	adds	r6, r6, r2
 8000bfa:	4069      	eors	r1, r5
 8000bfc:	1c72      	adds	r2, r6, #1
 8000bfe:	9101      	str	r1, [sp, #4]
 8000c00:	4694      	mov	ip, r2
 8000c02:	4307      	orrs	r7, r0
 8000c04:	2f0f      	cmp	r7, #15
 8000c06:	d900      	bls.n	8000c0a <__aeabi_dmul+0x8e>
 8000c08:	e0b0      	b.n	8000d6c <__aeabi_dmul+0x1f0>
 8000c0a:	4a55      	ldr	r2, [pc, #340]	; (8000d60 <__aeabi_dmul+0x1e4>)
 8000c0c:	00bf      	lsls	r7, r7, #2
 8000c0e:	59d2      	ldr	r2, [r2, r7]
 8000c10:	4697      	mov	pc, r2
 8000c12:	465b      	mov	r3, fp
 8000c14:	4303      	orrs	r3, r0
 8000c16:	4699      	mov	r9, r3
 8000c18:	d000      	beq.n	8000c1c <__aeabi_dmul+0xa0>
 8000c1a:	e087      	b.n	8000d2c <__aeabi_dmul+0x1b0>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	469b      	mov	fp, r3
 8000c20:	3302      	adds	r3, #2
 8000c22:	2708      	movs	r7, #8
 8000c24:	9302      	str	r3, [sp, #8]
 8000c26:	e7ce      	b.n	8000bc6 <__aeabi_dmul+0x4a>
 8000c28:	4642      	mov	r2, r8
 8000c2a:	9201      	str	r2, [sp, #4]
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d067      	beq.n	8000d00 <__aeabi_dmul+0x184>
 8000c30:	2803      	cmp	r0, #3
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dmul+0xba>
 8000c34:	e20e      	b.n	8001054 <__aeabi_dmul+0x4d8>
 8000c36:	2801      	cmp	r0, #1
 8000c38:	d000      	beq.n	8000c3c <__aeabi_dmul+0xc0>
 8000c3a:	e162      	b.n	8000f02 <__aeabi_dmul+0x386>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2400      	movs	r4, #0
 8000c40:	2200      	movs	r2, #0
 8000c42:	4699      	mov	r9, r3
 8000c44:	9901      	ldr	r1, [sp, #4]
 8000c46:	4001      	ands	r1, r0
 8000c48:	b2cd      	uxtb	r5, r1
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	0312      	lsls	r2, r2, #12
 8000c4e:	0d0b      	lsrs	r3, r1, #20
 8000c50:	0b12      	lsrs	r2, r2, #12
 8000c52:	051b      	lsls	r3, r3, #20
 8000c54:	4313      	orrs	r3, r2
 8000c56:	4a43      	ldr	r2, [pc, #268]	; (8000d64 <__aeabi_dmul+0x1e8>)
 8000c58:	0524      	lsls	r4, r4, #20
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	431c      	orrs	r4, r3
 8000c5e:	0064      	lsls	r4, r4, #1
 8000c60:	07ed      	lsls	r5, r5, #31
 8000c62:	0864      	lsrs	r4, r4, #1
 8000c64:	432c      	orrs	r4, r5
 8000c66:	4648      	mov	r0, r9
 8000c68:	0021      	movs	r1, r4
 8000c6a:	b007      	add	sp, #28
 8000c6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c6e:	4690      	mov	r8, r2
 8000c70:	4699      	mov	r9, r3
 8000c72:	46a2      	mov	sl, r4
 8000c74:	46ab      	mov	fp, r5
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c78:	4303      	orrs	r3, r0
 8000c7a:	4699      	mov	r9, r3
 8000c7c:	d04f      	beq.n	8000d1e <__aeabi_dmul+0x1a2>
 8000c7e:	465b      	mov	r3, fp
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dmul+0x10a>
 8000c84:	e189      	b.n	8000f9a <__aeabi_dmul+0x41e>
 8000c86:	4658      	mov	r0, fp
 8000c88:	f7ff fb08 	bl	800029c <__clzsi2>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	3b0b      	subs	r3, #11
 8000c90:	2b1c      	cmp	r3, #28
 8000c92:	dd00      	ble.n	8000c96 <__aeabi_dmul+0x11a>
 8000c94:	e17a      	b.n	8000f8c <__aeabi_dmul+0x410>
 8000c96:	221d      	movs	r2, #29
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	003a      	movs	r2, r7
 8000c9c:	0001      	movs	r1, r0
 8000c9e:	465c      	mov	r4, fp
 8000ca0:	40da      	lsrs	r2, r3
 8000ca2:	3908      	subs	r1, #8
 8000ca4:	408c      	lsls	r4, r1
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	408f      	lsls	r7, r1
 8000caa:	4323      	orrs	r3, r4
 8000cac:	469b      	mov	fp, r3
 8000cae:	46b9      	mov	r9, r7
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	4e2d      	ldr	r6, [pc, #180]	; (8000d68 <__aeabi_dmul+0x1ec>)
 8000cb4:	2700      	movs	r7, #0
 8000cb6:	1a36      	subs	r6, r6, r0
 8000cb8:	9302      	str	r3, [sp, #8]
 8000cba:	e784      	b.n	8000bc6 <__aeabi_dmul+0x4a>
 8000cbc:	4653      	mov	r3, sl
 8000cbe:	4323      	orrs	r3, r4
 8000cc0:	d12a      	bne.n	8000d18 <__aeabi_dmul+0x19c>
 8000cc2:	2400      	movs	r4, #0
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	e796      	b.n	8000bf6 <__aeabi_dmul+0x7a>
 8000cc8:	4653      	mov	r3, sl
 8000cca:	4323      	orrs	r3, r4
 8000ccc:	d020      	beq.n	8000d10 <__aeabi_dmul+0x194>
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dmul+0x158>
 8000cd2:	e157      	b.n	8000f84 <__aeabi_dmul+0x408>
 8000cd4:	0020      	movs	r0, r4
 8000cd6:	f7ff fae1 	bl	800029c <__clzsi2>
 8000cda:	0003      	movs	r3, r0
 8000cdc:	3b0b      	subs	r3, #11
 8000cde:	2b1c      	cmp	r3, #28
 8000ce0:	dd00      	ble.n	8000ce4 <__aeabi_dmul+0x168>
 8000ce2:	e149      	b.n	8000f78 <__aeabi_dmul+0x3fc>
 8000ce4:	211d      	movs	r1, #29
 8000ce6:	1acb      	subs	r3, r1, r3
 8000ce8:	4651      	mov	r1, sl
 8000cea:	0002      	movs	r2, r0
 8000cec:	40d9      	lsrs	r1, r3
 8000cee:	4653      	mov	r3, sl
 8000cf0:	3a08      	subs	r2, #8
 8000cf2:	4094      	lsls	r4, r2
 8000cf4:	4093      	lsls	r3, r2
 8000cf6:	430c      	orrs	r4, r1
 8000cf8:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <__aeabi_dmul+0x1ec>)
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	e77a      	b.n	8000bf6 <__aeabi_dmul+0x7a>
 8000d00:	2501      	movs	r5, #1
 8000d02:	9b01      	ldr	r3, [sp, #4]
 8000d04:	4c14      	ldr	r4, [pc, #80]	; (8000d58 <__aeabi_dmul+0x1dc>)
 8000d06:	401d      	ands	r5, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	e79c      	b.n	8000c4a <__aeabi_dmul+0xce>
 8000d10:	2400      	movs	r4, #0
 8000d12:	2200      	movs	r2, #0
 8000d14:	2001      	movs	r0, #1
 8000d16:	e76e      	b.n	8000bf6 <__aeabi_dmul+0x7a>
 8000d18:	4653      	mov	r3, sl
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	e76b      	b.n	8000bf6 <__aeabi_dmul+0x7a>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	469b      	mov	fp, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	2704      	movs	r7, #4
 8000d26:	2600      	movs	r6, #0
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	e74c      	b.n	8000bc6 <__aeabi_dmul+0x4a>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	4681      	mov	r9, r0
 8000d30:	270c      	movs	r7, #12
 8000d32:	9302      	str	r3, [sp, #8]
 8000d34:	e747      	b.n	8000bc6 <__aeabi_dmul+0x4a>
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2500      	movs	r5, #0
 8000d3c:	0312      	lsls	r2, r2, #12
 8000d3e:	4699      	mov	r9, r3
 8000d40:	4c05      	ldr	r4, [pc, #20]	; (8000d58 <__aeabi_dmul+0x1dc>)
 8000d42:	e782      	b.n	8000c4a <__aeabi_dmul+0xce>
 8000d44:	465c      	mov	r4, fp
 8000d46:	464b      	mov	r3, r9
 8000d48:	9802      	ldr	r0, [sp, #8]
 8000d4a:	e76f      	b.n	8000c2c <__aeabi_dmul+0xb0>
 8000d4c:	465c      	mov	r4, fp
 8000d4e:	464b      	mov	r3, r9
 8000d50:	9501      	str	r5, [sp, #4]
 8000d52:	9802      	ldr	r0, [sp, #8]
 8000d54:	e76a      	b.n	8000c2c <__aeabi_dmul+0xb0>
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	000007ff 	.word	0x000007ff
 8000d5c:	fffffc01 	.word	0xfffffc01
 8000d60:	0800483c 	.word	0x0800483c
 8000d64:	800fffff 	.word	0x800fffff
 8000d68:	fffffc0d 	.word	0xfffffc0d
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	4649      	mov	r1, r9
 8000d70:	0c17      	lsrs	r7, r2, #16
 8000d72:	0c1a      	lsrs	r2, r3, #16
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	0c1b      	lsrs	r3, r3, #16
 8000d78:	0408      	lsls	r0, r1, #16
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	0c00      	lsrs	r0, r0, #16
 8000d7e:	4341      	muls	r1, r0
 8000d80:	0015      	movs	r5, r2
 8000d82:	4688      	mov	r8, r1
 8000d84:	0019      	movs	r1, r3
 8000d86:	437d      	muls	r5, r7
 8000d88:	4379      	muls	r1, r7
 8000d8a:	9503      	str	r5, [sp, #12]
 8000d8c:	4689      	mov	r9, r1
 8000d8e:	0029      	movs	r1, r5
 8000d90:	0015      	movs	r5, r2
 8000d92:	4345      	muls	r5, r0
 8000d94:	444d      	add	r5, r9
 8000d96:	9502      	str	r5, [sp, #8]
 8000d98:	4645      	mov	r5, r8
 8000d9a:	0c2d      	lsrs	r5, r5, #16
 8000d9c:	46aa      	mov	sl, r5
 8000d9e:	9d02      	ldr	r5, [sp, #8]
 8000da0:	4455      	add	r5, sl
 8000da2:	45a9      	cmp	r9, r5
 8000da4:	d906      	bls.n	8000db4 <__aeabi_dmul+0x238>
 8000da6:	468a      	mov	sl, r1
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0249      	lsls	r1, r1, #9
 8000dac:	4689      	mov	r9, r1
 8000dae:	44ca      	add	sl, r9
 8000db0:	4651      	mov	r1, sl
 8000db2:	9103      	str	r1, [sp, #12]
 8000db4:	0c29      	lsrs	r1, r5, #16
 8000db6:	9104      	str	r1, [sp, #16]
 8000db8:	4641      	mov	r1, r8
 8000dba:	0409      	lsls	r1, r1, #16
 8000dbc:	042d      	lsls	r5, r5, #16
 8000dbe:	0c09      	lsrs	r1, r1, #16
 8000dc0:	4688      	mov	r8, r1
 8000dc2:	0029      	movs	r1, r5
 8000dc4:	0c25      	lsrs	r5, r4, #16
 8000dc6:	0424      	lsls	r4, r4, #16
 8000dc8:	4441      	add	r1, r8
 8000dca:	0c24      	lsrs	r4, r4, #16
 8000dcc:	9105      	str	r1, [sp, #20]
 8000dce:	0021      	movs	r1, r4
 8000dd0:	4341      	muls	r1, r0
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	0021      	movs	r1, r4
 8000dd6:	4379      	muls	r1, r7
 8000dd8:	468a      	mov	sl, r1
 8000dda:	4368      	muls	r0, r5
 8000ddc:	4641      	mov	r1, r8
 8000dde:	4450      	add	r0, sl
 8000de0:	4681      	mov	r9, r0
 8000de2:	0c08      	lsrs	r0, r1, #16
 8000de4:	4448      	add	r0, r9
 8000de6:	436f      	muls	r7, r5
 8000de8:	4582      	cmp	sl, r0
 8000dea:	d903      	bls.n	8000df4 <__aeabi_dmul+0x278>
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0249      	lsls	r1, r1, #9
 8000df0:	4689      	mov	r9, r1
 8000df2:	444f      	add	r7, r9
 8000df4:	0c01      	lsrs	r1, r0, #16
 8000df6:	4689      	mov	r9, r1
 8000df8:	0039      	movs	r1, r7
 8000dfa:	4449      	add	r1, r9
 8000dfc:	9102      	str	r1, [sp, #8]
 8000dfe:	4641      	mov	r1, r8
 8000e00:	040f      	lsls	r7, r1, #16
 8000e02:	9904      	ldr	r1, [sp, #16]
 8000e04:	0c3f      	lsrs	r7, r7, #16
 8000e06:	4688      	mov	r8, r1
 8000e08:	0400      	lsls	r0, r0, #16
 8000e0a:	19c0      	adds	r0, r0, r7
 8000e0c:	4480      	add	r8, r0
 8000e0e:	4641      	mov	r1, r8
 8000e10:	9104      	str	r1, [sp, #16]
 8000e12:	4659      	mov	r1, fp
 8000e14:	0c0f      	lsrs	r7, r1, #16
 8000e16:	0409      	lsls	r1, r1, #16
 8000e18:	0c09      	lsrs	r1, r1, #16
 8000e1a:	4688      	mov	r8, r1
 8000e1c:	4359      	muls	r1, r3
 8000e1e:	468a      	mov	sl, r1
 8000e20:	0039      	movs	r1, r7
 8000e22:	4351      	muls	r1, r2
 8000e24:	4689      	mov	r9, r1
 8000e26:	4641      	mov	r1, r8
 8000e28:	434a      	muls	r2, r1
 8000e2a:	4651      	mov	r1, sl
 8000e2c:	0c09      	lsrs	r1, r1, #16
 8000e2e:	468b      	mov	fp, r1
 8000e30:	437b      	muls	r3, r7
 8000e32:	18d2      	adds	r2, r2, r3
 8000e34:	445a      	add	r2, fp
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d903      	bls.n	8000e42 <__aeabi_dmul+0x2c6>
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	025b      	lsls	r3, r3, #9
 8000e3e:	469b      	mov	fp, r3
 8000e40:	44d9      	add	r9, fp
 8000e42:	4651      	mov	r1, sl
 8000e44:	0409      	lsls	r1, r1, #16
 8000e46:	0c09      	lsrs	r1, r1, #16
 8000e48:	468a      	mov	sl, r1
 8000e4a:	4641      	mov	r1, r8
 8000e4c:	4361      	muls	r1, r4
 8000e4e:	437c      	muls	r4, r7
 8000e50:	0c13      	lsrs	r3, r2, #16
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	444b      	add	r3, r9
 8000e56:	4452      	add	r2, sl
 8000e58:	46a1      	mov	r9, r4
 8000e5a:	468a      	mov	sl, r1
 8000e5c:	003c      	movs	r4, r7
 8000e5e:	4641      	mov	r1, r8
 8000e60:	436c      	muls	r4, r5
 8000e62:	434d      	muls	r5, r1
 8000e64:	4651      	mov	r1, sl
 8000e66:	444d      	add	r5, r9
 8000e68:	0c0f      	lsrs	r7, r1, #16
 8000e6a:	197d      	adds	r5, r7, r5
 8000e6c:	45a9      	cmp	r9, r5
 8000e6e:	d903      	bls.n	8000e78 <__aeabi_dmul+0x2fc>
 8000e70:	2180      	movs	r1, #128	; 0x80
 8000e72:	0249      	lsls	r1, r1, #9
 8000e74:	4688      	mov	r8, r1
 8000e76:	4444      	add	r4, r8
 8000e78:	9f04      	ldr	r7, [sp, #16]
 8000e7a:	9903      	ldr	r1, [sp, #12]
 8000e7c:	46b8      	mov	r8, r7
 8000e7e:	4441      	add	r1, r8
 8000e80:	468b      	mov	fp, r1
 8000e82:	4583      	cmp	fp, r0
 8000e84:	4180      	sbcs	r0, r0
 8000e86:	4241      	negs	r1, r0
 8000e88:	4688      	mov	r8, r1
 8000e8a:	4651      	mov	r1, sl
 8000e8c:	0408      	lsls	r0, r1, #16
 8000e8e:	042f      	lsls	r7, r5, #16
 8000e90:	0c00      	lsrs	r0, r0, #16
 8000e92:	183f      	adds	r7, r7, r0
 8000e94:	4658      	mov	r0, fp
 8000e96:	9902      	ldr	r1, [sp, #8]
 8000e98:	1810      	adds	r0, r2, r0
 8000e9a:	4689      	mov	r9, r1
 8000e9c:	4290      	cmp	r0, r2
 8000e9e:	4192      	sbcs	r2, r2
 8000ea0:	444f      	add	r7, r9
 8000ea2:	46ba      	mov	sl, r7
 8000ea4:	4252      	negs	r2, r2
 8000ea6:	4699      	mov	r9, r3
 8000ea8:	4693      	mov	fp, r2
 8000eaa:	44c2      	add	sl, r8
 8000eac:	44d1      	add	r9, sl
 8000eae:	44cb      	add	fp, r9
 8000eb0:	428f      	cmp	r7, r1
 8000eb2:	41bf      	sbcs	r7, r7
 8000eb4:	45c2      	cmp	sl, r8
 8000eb6:	4189      	sbcs	r1, r1
 8000eb8:	4599      	cmp	r9, r3
 8000eba:	419b      	sbcs	r3, r3
 8000ebc:	4593      	cmp	fp, r2
 8000ebe:	4192      	sbcs	r2, r2
 8000ec0:	427f      	negs	r7, r7
 8000ec2:	4249      	negs	r1, r1
 8000ec4:	0c2d      	lsrs	r5, r5, #16
 8000ec6:	4252      	negs	r2, r2
 8000ec8:	430f      	orrs	r7, r1
 8000eca:	425b      	negs	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	197f      	adds	r7, r7, r5
 8000ed0:	18ff      	adds	r7, r7, r3
 8000ed2:	465b      	mov	r3, fp
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	0ddb      	lsrs	r3, r3, #23
 8000ed8:	9a05      	ldr	r2, [sp, #20]
 8000eda:	0264      	lsls	r4, r4, #9
 8000edc:	431c      	orrs	r4, r3
 8000ede:	0243      	lsls	r3, r0, #9
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	1e5d      	subs	r5, r3, #1
 8000ee4:	41ab      	sbcs	r3, r5
 8000ee6:	465a      	mov	r2, fp
 8000ee8:	0dc0      	lsrs	r0, r0, #23
 8000eea:	4303      	orrs	r3, r0
 8000eec:	0252      	lsls	r2, r2, #9
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	01e2      	lsls	r2, r4, #7
 8000ef2:	d556      	bpl.n	8000fa2 <__aeabi_dmul+0x426>
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	085a      	lsrs	r2, r3, #1
 8000ef8:	4003      	ands	r3, r0
 8000efa:	4313      	orrs	r3, r2
 8000efc:	07e2      	lsls	r2, r4, #31
 8000efe:	4313      	orrs	r3, r2
 8000f00:	0864      	lsrs	r4, r4, #1
 8000f02:	485a      	ldr	r0, [pc, #360]	; (800106c <__aeabi_dmul+0x4f0>)
 8000f04:	4460      	add	r0, ip
 8000f06:	2800      	cmp	r0, #0
 8000f08:	dd4d      	ble.n	8000fa6 <__aeabi_dmul+0x42a>
 8000f0a:	075a      	lsls	r2, r3, #29
 8000f0c:	d009      	beq.n	8000f22 <__aeabi_dmul+0x3a6>
 8000f0e:	220f      	movs	r2, #15
 8000f10:	401a      	ands	r2, r3
 8000f12:	2a04      	cmp	r2, #4
 8000f14:	d005      	beq.n	8000f22 <__aeabi_dmul+0x3a6>
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	419b      	sbcs	r3, r3
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	01e2      	lsls	r2, r4, #7
 8000f24:	d504      	bpl.n	8000f30 <__aeabi_dmul+0x3b4>
 8000f26:	2080      	movs	r0, #128	; 0x80
 8000f28:	4a51      	ldr	r2, [pc, #324]	; (8001070 <__aeabi_dmul+0x4f4>)
 8000f2a:	00c0      	lsls	r0, r0, #3
 8000f2c:	4014      	ands	r4, r2
 8000f2e:	4460      	add	r0, ip
 8000f30:	4a50      	ldr	r2, [pc, #320]	; (8001074 <__aeabi_dmul+0x4f8>)
 8000f32:	4290      	cmp	r0, r2
 8000f34:	dd00      	ble.n	8000f38 <__aeabi_dmul+0x3bc>
 8000f36:	e6e3      	b.n	8000d00 <__aeabi_dmul+0x184>
 8000f38:	2501      	movs	r5, #1
 8000f3a:	08db      	lsrs	r3, r3, #3
 8000f3c:	0762      	lsls	r2, r4, #29
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	0264      	lsls	r4, r4, #9
 8000f42:	9b01      	ldr	r3, [sp, #4]
 8000f44:	4691      	mov	r9, r2
 8000f46:	0b22      	lsrs	r2, r4, #12
 8000f48:	0544      	lsls	r4, r0, #21
 8000f4a:	0d64      	lsrs	r4, r4, #21
 8000f4c:	401d      	ands	r5, r3
 8000f4e:	e67c      	b.n	8000c4a <__aeabi_dmul+0xce>
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	4659      	mov	r1, fp
 8000f54:	0312      	lsls	r2, r2, #12
 8000f56:	4211      	tst	r1, r2
 8000f58:	d008      	beq.n	8000f6c <__aeabi_dmul+0x3f0>
 8000f5a:	4214      	tst	r4, r2
 8000f5c:	d106      	bne.n	8000f6c <__aeabi_dmul+0x3f0>
 8000f5e:	4322      	orrs	r2, r4
 8000f60:	0312      	lsls	r2, r2, #12
 8000f62:	0b12      	lsrs	r2, r2, #12
 8000f64:	4645      	mov	r5, r8
 8000f66:	4699      	mov	r9, r3
 8000f68:	4c43      	ldr	r4, [pc, #268]	; (8001078 <__aeabi_dmul+0x4fc>)
 8000f6a:	e66e      	b.n	8000c4a <__aeabi_dmul+0xce>
 8000f6c:	465b      	mov	r3, fp
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	0312      	lsls	r2, r2, #12
 8000f72:	0b12      	lsrs	r2, r2, #12
 8000f74:	4c40      	ldr	r4, [pc, #256]	; (8001078 <__aeabi_dmul+0x4fc>)
 8000f76:	e668      	b.n	8000c4a <__aeabi_dmul+0xce>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	4654      	mov	r4, sl
 8000f7c:	3b28      	subs	r3, #40	; 0x28
 8000f7e:	409c      	lsls	r4, r3
 8000f80:	2300      	movs	r3, #0
 8000f82:	e6b9      	b.n	8000cf8 <__aeabi_dmul+0x17c>
 8000f84:	f7ff f98a 	bl	800029c <__clzsi2>
 8000f88:	3020      	adds	r0, #32
 8000f8a:	e6a6      	b.n	8000cda <__aeabi_dmul+0x15e>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	3b28      	subs	r3, #40	; 0x28
 8000f90:	409f      	lsls	r7, r3
 8000f92:	2300      	movs	r3, #0
 8000f94:	46bb      	mov	fp, r7
 8000f96:	4699      	mov	r9, r3
 8000f98:	e68a      	b.n	8000cb0 <__aeabi_dmul+0x134>
 8000f9a:	f7ff f97f 	bl	800029c <__clzsi2>
 8000f9e:	3020      	adds	r0, #32
 8000fa0:	e674      	b.n	8000c8c <__aeabi_dmul+0x110>
 8000fa2:	46b4      	mov	ip, r6
 8000fa4:	e7ad      	b.n	8000f02 <__aeabi_dmul+0x386>
 8000fa6:	2501      	movs	r5, #1
 8000fa8:	1a2a      	subs	r2, r5, r0
 8000faa:	2a38      	cmp	r2, #56	; 0x38
 8000fac:	dd06      	ble.n	8000fbc <__aeabi_dmul+0x440>
 8000fae:	9b01      	ldr	r3, [sp, #4]
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	401d      	ands	r5, r3
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4699      	mov	r9, r3
 8000fba:	e646      	b.n	8000c4a <__aeabi_dmul+0xce>
 8000fbc:	2a1f      	cmp	r2, #31
 8000fbe:	dc21      	bgt.n	8001004 <__aeabi_dmul+0x488>
 8000fc0:	2520      	movs	r5, #32
 8000fc2:	0020      	movs	r0, r4
 8000fc4:	1aad      	subs	r5, r5, r2
 8000fc6:	001e      	movs	r6, r3
 8000fc8:	40ab      	lsls	r3, r5
 8000fca:	40a8      	lsls	r0, r5
 8000fcc:	40d6      	lsrs	r6, r2
 8000fce:	1e5d      	subs	r5, r3, #1
 8000fd0:	41ab      	sbcs	r3, r5
 8000fd2:	4330      	orrs	r0, r6
 8000fd4:	4318      	orrs	r0, r3
 8000fd6:	40d4      	lsrs	r4, r2
 8000fd8:	0743      	lsls	r3, r0, #29
 8000fda:	d009      	beq.n	8000ff0 <__aeabi_dmul+0x474>
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4003      	ands	r3, r0
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d005      	beq.n	8000ff0 <__aeabi_dmul+0x474>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	1d18      	adds	r0, r3, #4
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	419b      	sbcs	r3, r3
 8000fec:	425b      	negs	r3, r3
 8000fee:	18e4      	adds	r4, r4, r3
 8000ff0:	0223      	lsls	r3, r4, #8
 8000ff2:	d521      	bpl.n	8001038 <__aeabi_dmul+0x4bc>
 8000ff4:	2501      	movs	r5, #1
 8000ff6:	9b01      	ldr	r3, [sp, #4]
 8000ff8:	2401      	movs	r4, #1
 8000ffa:	401d      	ands	r5, r3
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	2200      	movs	r2, #0
 8001000:	4699      	mov	r9, r3
 8001002:	e622      	b.n	8000c4a <__aeabi_dmul+0xce>
 8001004:	251f      	movs	r5, #31
 8001006:	0021      	movs	r1, r4
 8001008:	426d      	negs	r5, r5
 800100a:	1a28      	subs	r0, r5, r0
 800100c:	40c1      	lsrs	r1, r0
 800100e:	0008      	movs	r0, r1
 8001010:	2a20      	cmp	r2, #32
 8001012:	d01d      	beq.n	8001050 <__aeabi_dmul+0x4d4>
 8001014:	355f      	adds	r5, #95	; 0x5f
 8001016:	1aaa      	subs	r2, r5, r2
 8001018:	4094      	lsls	r4, r2
 800101a:	4323      	orrs	r3, r4
 800101c:	1e5c      	subs	r4, r3, #1
 800101e:	41a3      	sbcs	r3, r4
 8001020:	2507      	movs	r5, #7
 8001022:	4303      	orrs	r3, r0
 8001024:	401d      	ands	r5, r3
 8001026:	2200      	movs	r2, #0
 8001028:	2d00      	cmp	r5, #0
 800102a:	d009      	beq.n	8001040 <__aeabi_dmul+0x4c4>
 800102c:	220f      	movs	r2, #15
 800102e:	2400      	movs	r4, #0
 8001030:	401a      	ands	r2, r3
 8001032:	0018      	movs	r0, r3
 8001034:	2a04      	cmp	r2, #4
 8001036:	d1d6      	bne.n	8000fe6 <__aeabi_dmul+0x46a>
 8001038:	0003      	movs	r3, r0
 800103a:	0765      	lsls	r5, r4, #29
 800103c:	0264      	lsls	r4, r4, #9
 800103e:	0b22      	lsrs	r2, r4, #12
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	432b      	orrs	r3, r5
 8001044:	2501      	movs	r5, #1
 8001046:	4699      	mov	r9, r3
 8001048:	9b01      	ldr	r3, [sp, #4]
 800104a:	2400      	movs	r4, #0
 800104c:	401d      	ands	r5, r3
 800104e:	e5fc      	b.n	8000c4a <__aeabi_dmul+0xce>
 8001050:	2400      	movs	r4, #0
 8001052:	e7e2      	b.n	800101a <__aeabi_dmul+0x49e>
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	2501      	movs	r5, #1
 8001058:	0312      	lsls	r2, r2, #12
 800105a:	4322      	orrs	r2, r4
 800105c:	9901      	ldr	r1, [sp, #4]
 800105e:	0312      	lsls	r2, r2, #12
 8001060:	0b12      	lsrs	r2, r2, #12
 8001062:	400d      	ands	r5, r1
 8001064:	4699      	mov	r9, r3
 8001066:	4c04      	ldr	r4, [pc, #16]	; (8001078 <__aeabi_dmul+0x4fc>)
 8001068:	e5ef      	b.n	8000c4a <__aeabi_dmul+0xce>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000003ff 	.word	0x000003ff
 8001070:	feffffff 	.word	0xfeffffff
 8001074:	000007fe 	.word	0x000007fe
 8001078:	000007ff 	.word	0x000007ff

0800107c <__aeabi_dsub>:
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	4646      	mov	r6, r8
 8001080:	46d6      	mov	lr, sl
 8001082:	464f      	mov	r7, r9
 8001084:	030c      	lsls	r4, r1, #12
 8001086:	b5c0      	push	{r6, r7, lr}
 8001088:	0fcd      	lsrs	r5, r1, #31
 800108a:	004e      	lsls	r6, r1, #1
 800108c:	0a61      	lsrs	r1, r4, #9
 800108e:	0f44      	lsrs	r4, r0, #29
 8001090:	430c      	orrs	r4, r1
 8001092:	00c1      	lsls	r1, r0, #3
 8001094:	0058      	lsls	r0, r3, #1
 8001096:	0d40      	lsrs	r0, r0, #21
 8001098:	4684      	mov	ip, r0
 800109a:	468a      	mov	sl, r1
 800109c:	000f      	movs	r7, r1
 800109e:	0319      	lsls	r1, r3, #12
 80010a0:	0f50      	lsrs	r0, r2, #29
 80010a2:	0a49      	lsrs	r1, r1, #9
 80010a4:	4301      	orrs	r1, r0
 80010a6:	48c6      	ldr	r0, [pc, #792]	; (80013c0 <__aeabi_dsub+0x344>)
 80010a8:	0d76      	lsrs	r6, r6, #21
 80010aa:	46a8      	mov	r8, r5
 80010ac:	0fdb      	lsrs	r3, r3, #31
 80010ae:	00d2      	lsls	r2, r2, #3
 80010b0:	4584      	cmp	ip, r0
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dsub+0x3a>
 80010b4:	e0d8      	b.n	8001268 <__aeabi_dsub+0x1ec>
 80010b6:	2001      	movs	r0, #1
 80010b8:	4043      	eors	r3, r0
 80010ba:	42ab      	cmp	r3, r5
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x44>
 80010be:	e0a6      	b.n	800120e <__aeabi_dsub+0x192>
 80010c0:	4660      	mov	r0, ip
 80010c2:	1a35      	subs	r5, r6, r0
 80010c4:	2d00      	cmp	r5, #0
 80010c6:	dc00      	bgt.n	80010ca <__aeabi_dsub+0x4e>
 80010c8:	e105      	b.n	80012d6 <__aeabi_dsub+0x25a>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d110      	bne.n	80010f0 <__aeabi_dsub+0x74>
 80010ce:	000b      	movs	r3, r1
 80010d0:	4313      	orrs	r3, r2
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dsub+0x5a>
 80010d4:	e0d7      	b.n	8001286 <__aeabi_dsub+0x20a>
 80010d6:	1e6b      	subs	r3, r5, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d000      	beq.n	80010de <__aeabi_dsub+0x62>
 80010dc:	e14b      	b.n	8001376 <__aeabi_dsub+0x2fa>
 80010de:	4653      	mov	r3, sl
 80010e0:	1a9f      	subs	r7, r3, r2
 80010e2:	45ba      	cmp	sl, r7
 80010e4:	4180      	sbcs	r0, r0
 80010e6:	1a64      	subs	r4, r4, r1
 80010e8:	4240      	negs	r0, r0
 80010ea:	1a24      	subs	r4, r4, r0
 80010ec:	2601      	movs	r6, #1
 80010ee:	e01e      	b.n	800112e <__aeabi_dsub+0xb2>
 80010f0:	4bb3      	ldr	r3, [pc, #716]	; (80013c0 <__aeabi_dsub+0x344>)
 80010f2:	429e      	cmp	r6, r3
 80010f4:	d048      	beq.n	8001188 <__aeabi_dsub+0x10c>
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	4319      	orrs	r1, r3
 80010fc:	2d38      	cmp	r5, #56	; 0x38
 80010fe:	dd00      	ble.n	8001102 <__aeabi_dsub+0x86>
 8001100:	e119      	b.n	8001336 <__aeabi_dsub+0x2ba>
 8001102:	2d1f      	cmp	r5, #31
 8001104:	dd00      	ble.n	8001108 <__aeabi_dsub+0x8c>
 8001106:	e14c      	b.n	80013a2 <__aeabi_dsub+0x326>
 8001108:	2320      	movs	r3, #32
 800110a:	000f      	movs	r7, r1
 800110c:	1b5b      	subs	r3, r3, r5
 800110e:	0010      	movs	r0, r2
 8001110:	409a      	lsls	r2, r3
 8001112:	409f      	lsls	r7, r3
 8001114:	40e8      	lsrs	r0, r5
 8001116:	1e53      	subs	r3, r2, #1
 8001118:	419a      	sbcs	r2, r3
 800111a:	40e9      	lsrs	r1, r5
 800111c:	4307      	orrs	r7, r0
 800111e:	4317      	orrs	r7, r2
 8001120:	4653      	mov	r3, sl
 8001122:	1bdf      	subs	r7, r3, r7
 8001124:	1a61      	subs	r1, r4, r1
 8001126:	45ba      	cmp	sl, r7
 8001128:	41a4      	sbcs	r4, r4
 800112a:	4264      	negs	r4, r4
 800112c:	1b0c      	subs	r4, r1, r4
 800112e:	0223      	lsls	r3, r4, #8
 8001130:	d400      	bmi.n	8001134 <__aeabi_dsub+0xb8>
 8001132:	e0c5      	b.n	80012c0 <__aeabi_dsub+0x244>
 8001134:	0264      	lsls	r4, r4, #9
 8001136:	0a65      	lsrs	r5, r4, #9
 8001138:	2d00      	cmp	r5, #0
 800113a:	d100      	bne.n	800113e <__aeabi_dsub+0xc2>
 800113c:	e0f6      	b.n	800132c <__aeabi_dsub+0x2b0>
 800113e:	0028      	movs	r0, r5
 8001140:	f7ff f8ac 	bl	800029c <__clzsi2>
 8001144:	0003      	movs	r3, r0
 8001146:	3b08      	subs	r3, #8
 8001148:	2b1f      	cmp	r3, #31
 800114a:	dd00      	ble.n	800114e <__aeabi_dsub+0xd2>
 800114c:	e0e9      	b.n	8001322 <__aeabi_dsub+0x2a6>
 800114e:	2220      	movs	r2, #32
 8001150:	003c      	movs	r4, r7
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	409d      	lsls	r5, r3
 8001156:	40d4      	lsrs	r4, r2
 8001158:	409f      	lsls	r7, r3
 800115a:	4325      	orrs	r5, r4
 800115c:	429e      	cmp	r6, r3
 800115e:	dd00      	ble.n	8001162 <__aeabi_dsub+0xe6>
 8001160:	e0db      	b.n	800131a <__aeabi_dsub+0x29e>
 8001162:	1b9e      	subs	r6, r3, r6
 8001164:	1c73      	adds	r3, r6, #1
 8001166:	2b1f      	cmp	r3, #31
 8001168:	dd00      	ble.n	800116c <__aeabi_dsub+0xf0>
 800116a:	e10a      	b.n	8001382 <__aeabi_dsub+0x306>
 800116c:	2220      	movs	r2, #32
 800116e:	0038      	movs	r0, r7
 8001170:	1ad2      	subs	r2, r2, r3
 8001172:	0029      	movs	r1, r5
 8001174:	4097      	lsls	r7, r2
 8001176:	002c      	movs	r4, r5
 8001178:	4091      	lsls	r1, r2
 800117a:	40d8      	lsrs	r0, r3
 800117c:	1e7a      	subs	r2, r7, #1
 800117e:	4197      	sbcs	r7, r2
 8001180:	40dc      	lsrs	r4, r3
 8001182:	2600      	movs	r6, #0
 8001184:	4301      	orrs	r1, r0
 8001186:	430f      	orrs	r7, r1
 8001188:	077b      	lsls	r3, r7, #29
 800118a:	d009      	beq.n	80011a0 <__aeabi_dsub+0x124>
 800118c:	230f      	movs	r3, #15
 800118e:	403b      	ands	r3, r7
 8001190:	2b04      	cmp	r3, #4
 8001192:	d005      	beq.n	80011a0 <__aeabi_dsub+0x124>
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	42bb      	cmp	r3, r7
 8001198:	41bf      	sbcs	r7, r7
 800119a:	427f      	negs	r7, r7
 800119c:	19e4      	adds	r4, r4, r7
 800119e:	001f      	movs	r7, r3
 80011a0:	0223      	lsls	r3, r4, #8
 80011a2:	d525      	bpl.n	80011f0 <__aeabi_dsub+0x174>
 80011a4:	4b86      	ldr	r3, [pc, #536]	; (80013c0 <__aeabi_dsub+0x344>)
 80011a6:	3601      	adds	r6, #1
 80011a8:	429e      	cmp	r6, r3
 80011aa:	d100      	bne.n	80011ae <__aeabi_dsub+0x132>
 80011ac:	e0af      	b.n	800130e <__aeabi_dsub+0x292>
 80011ae:	4b85      	ldr	r3, [pc, #532]	; (80013c4 <__aeabi_dsub+0x348>)
 80011b0:	2501      	movs	r5, #1
 80011b2:	401c      	ands	r4, r3
 80011b4:	4643      	mov	r3, r8
 80011b6:	0762      	lsls	r2, r4, #29
 80011b8:	08ff      	lsrs	r7, r7, #3
 80011ba:	0264      	lsls	r4, r4, #9
 80011bc:	0576      	lsls	r6, r6, #21
 80011be:	4317      	orrs	r7, r2
 80011c0:	0b24      	lsrs	r4, r4, #12
 80011c2:	0d76      	lsrs	r6, r6, #21
 80011c4:	401d      	ands	r5, r3
 80011c6:	2100      	movs	r1, #0
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	0b23      	lsrs	r3, r4, #12
 80011cc:	0d0c      	lsrs	r4, r1, #20
 80011ce:	4a7e      	ldr	r2, [pc, #504]	; (80013c8 <__aeabi_dsub+0x34c>)
 80011d0:	0524      	lsls	r4, r4, #20
 80011d2:	431c      	orrs	r4, r3
 80011d4:	4014      	ands	r4, r2
 80011d6:	0533      	lsls	r3, r6, #20
 80011d8:	4323      	orrs	r3, r4
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	07ed      	lsls	r5, r5, #31
 80011de:	085b      	lsrs	r3, r3, #1
 80011e0:	432b      	orrs	r3, r5
 80011e2:	0038      	movs	r0, r7
 80011e4:	0019      	movs	r1, r3
 80011e6:	bc1c      	pop	{r2, r3, r4}
 80011e8:	4690      	mov	r8, r2
 80011ea:	4699      	mov	r9, r3
 80011ec:	46a2      	mov	sl, r4
 80011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f0:	2501      	movs	r5, #1
 80011f2:	4643      	mov	r3, r8
 80011f4:	0762      	lsls	r2, r4, #29
 80011f6:	08ff      	lsrs	r7, r7, #3
 80011f8:	4317      	orrs	r7, r2
 80011fa:	08e4      	lsrs	r4, r4, #3
 80011fc:	401d      	ands	r5, r3
 80011fe:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <__aeabi_dsub+0x344>)
 8001200:	429e      	cmp	r6, r3
 8001202:	d036      	beq.n	8001272 <__aeabi_dsub+0x1f6>
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	0576      	lsls	r6, r6, #21
 8001208:	0b24      	lsrs	r4, r4, #12
 800120a:	0d76      	lsrs	r6, r6, #21
 800120c:	e7db      	b.n	80011c6 <__aeabi_dsub+0x14a>
 800120e:	4663      	mov	r3, ip
 8001210:	1af3      	subs	r3, r6, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	dc00      	bgt.n	8001218 <__aeabi_dsub+0x19c>
 8001216:	e094      	b.n	8001342 <__aeabi_dsub+0x2c6>
 8001218:	4660      	mov	r0, ip
 800121a:	2800      	cmp	r0, #0
 800121c:	d035      	beq.n	800128a <__aeabi_dsub+0x20e>
 800121e:	4868      	ldr	r0, [pc, #416]	; (80013c0 <__aeabi_dsub+0x344>)
 8001220:	4286      	cmp	r6, r0
 8001222:	d0b1      	beq.n	8001188 <__aeabi_dsub+0x10c>
 8001224:	2780      	movs	r7, #128	; 0x80
 8001226:	043f      	lsls	r7, r7, #16
 8001228:	4339      	orrs	r1, r7
 800122a:	2b38      	cmp	r3, #56	; 0x38
 800122c:	dc00      	bgt.n	8001230 <__aeabi_dsub+0x1b4>
 800122e:	e0fd      	b.n	800142c <__aeabi_dsub+0x3b0>
 8001230:	430a      	orrs	r2, r1
 8001232:	0017      	movs	r7, r2
 8001234:	2100      	movs	r1, #0
 8001236:	1e7a      	subs	r2, r7, #1
 8001238:	4197      	sbcs	r7, r2
 800123a:	4457      	add	r7, sl
 800123c:	4557      	cmp	r7, sl
 800123e:	4180      	sbcs	r0, r0
 8001240:	1909      	adds	r1, r1, r4
 8001242:	4244      	negs	r4, r0
 8001244:	190c      	adds	r4, r1, r4
 8001246:	0223      	lsls	r3, r4, #8
 8001248:	d53a      	bpl.n	80012c0 <__aeabi_dsub+0x244>
 800124a:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <__aeabi_dsub+0x344>)
 800124c:	3601      	adds	r6, #1
 800124e:	429e      	cmp	r6, r3
 8001250:	d100      	bne.n	8001254 <__aeabi_dsub+0x1d8>
 8001252:	e14b      	b.n	80014ec <__aeabi_dsub+0x470>
 8001254:	2201      	movs	r2, #1
 8001256:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <__aeabi_dsub+0x348>)
 8001258:	401c      	ands	r4, r3
 800125a:	087b      	lsrs	r3, r7, #1
 800125c:	4017      	ands	r7, r2
 800125e:	431f      	orrs	r7, r3
 8001260:	07e2      	lsls	r2, r4, #31
 8001262:	4317      	orrs	r7, r2
 8001264:	0864      	lsrs	r4, r4, #1
 8001266:	e78f      	b.n	8001188 <__aeabi_dsub+0x10c>
 8001268:	0008      	movs	r0, r1
 800126a:	4310      	orrs	r0, r2
 800126c:	d000      	beq.n	8001270 <__aeabi_dsub+0x1f4>
 800126e:	e724      	b.n	80010ba <__aeabi_dsub+0x3e>
 8001270:	e721      	b.n	80010b6 <__aeabi_dsub+0x3a>
 8001272:	0023      	movs	r3, r4
 8001274:	433b      	orrs	r3, r7
 8001276:	d100      	bne.n	800127a <__aeabi_dsub+0x1fe>
 8001278:	e1b9      	b.n	80015ee <__aeabi_dsub+0x572>
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0312      	lsls	r2, r2, #12
 800127e:	4314      	orrs	r4, r2
 8001280:	0324      	lsls	r4, r4, #12
 8001282:	0b24      	lsrs	r4, r4, #12
 8001284:	e79f      	b.n	80011c6 <__aeabi_dsub+0x14a>
 8001286:	002e      	movs	r6, r5
 8001288:	e77e      	b.n	8001188 <__aeabi_dsub+0x10c>
 800128a:	0008      	movs	r0, r1
 800128c:	4310      	orrs	r0, r2
 800128e:	d100      	bne.n	8001292 <__aeabi_dsub+0x216>
 8001290:	e0ca      	b.n	8001428 <__aeabi_dsub+0x3ac>
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	4684      	mov	ip, r0
 8001296:	2800      	cmp	r0, #0
 8001298:	d000      	beq.n	800129c <__aeabi_dsub+0x220>
 800129a:	e0e7      	b.n	800146c <__aeabi_dsub+0x3f0>
 800129c:	4452      	add	r2, sl
 800129e:	4552      	cmp	r2, sl
 80012a0:	4180      	sbcs	r0, r0
 80012a2:	1864      	adds	r4, r4, r1
 80012a4:	4240      	negs	r0, r0
 80012a6:	1824      	adds	r4, r4, r0
 80012a8:	0017      	movs	r7, r2
 80012aa:	2601      	movs	r6, #1
 80012ac:	0223      	lsls	r3, r4, #8
 80012ae:	d507      	bpl.n	80012c0 <__aeabi_dsub+0x244>
 80012b0:	2602      	movs	r6, #2
 80012b2:	e7cf      	b.n	8001254 <__aeabi_dsub+0x1d8>
 80012b4:	4664      	mov	r4, ip
 80012b6:	432c      	orrs	r4, r5
 80012b8:	d100      	bne.n	80012bc <__aeabi_dsub+0x240>
 80012ba:	e1b3      	b.n	8001624 <__aeabi_dsub+0x5a8>
 80012bc:	002c      	movs	r4, r5
 80012be:	4667      	mov	r7, ip
 80012c0:	077b      	lsls	r3, r7, #29
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dsub+0x24a>
 80012c4:	e762      	b.n	800118c <__aeabi_dsub+0x110>
 80012c6:	0763      	lsls	r3, r4, #29
 80012c8:	08ff      	lsrs	r7, r7, #3
 80012ca:	431f      	orrs	r7, r3
 80012cc:	2501      	movs	r5, #1
 80012ce:	4643      	mov	r3, r8
 80012d0:	08e4      	lsrs	r4, r4, #3
 80012d2:	401d      	ands	r5, r3
 80012d4:	e793      	b.n	80011fe <__aeabi_dsub+0x182>
 80012d6:	2d00      	cmp	r5, #0
 80012d8:	d178      	bne.n	80013cc <__aeabi_dsub+0x350>
 80012da:	1c75      	adds	r5, r6, #1
 80012dc:	056d      	lsls	r5, r5, #21
 80012de:	0d6d      	lsrs	r5, r5, #21
 80012e0:	2d01      	cmp	r5, #1
 80012e2:	dc00      	bgt.n	80012e6 <__aeabi_dsub+0x26a>
 80012e4:	e0f2      	b.n	80014cc <__aeabi_dsub+0x450>
 80012e6:	4650      	mov	r0, sl
 80012e8:	1a80      	subs	r0, r0, r2
 80012ea:	4582      	cmp	sl, r0
 80012ec:	41bf      	sbcs	r7, r7
 80012ee:	1a65      	subs	r5, r4, r1
 80012f0:	427f      	negs	r7, r7
 80012f2:	1bed      	subs	r5, r5, r7
 80012f4:	4684      	mov	ip, r0
 80012f6:	0228      	lsls	r0, r5, #8
 80012f8:	d400      	bmi.n	80012fc <__aeabi_dsub+0x280>
 80012fa:	e08c      	b.n	8001416 <__aeabi_dsub+0x39a>
 80012fc:	4650      	mov	r0, sl
 80012fe:	1a17      	subs	r7, r2, r0
 8001300:	42ba      	cmp	r2, r7
 8001302:	4192      	sbcs	r2, r2
 8001304:	1b0c      	subs	r4, r1, r4
 8001306:	4255      	negs	r5, r2
 8001308:	1b65      	subs	r5, r4, r5
 800130a:	4698      	mov	r8, r3
 800130c:	e714      	b.n	8001138 <__aeabi_dsub+0xbc>
 800130e:	2501      	movs	r5, #1
 8001310:	4643      	mov	r3, r8
 8001312:	2400      	movs	r4, #0
 8001314:	401d      	ands	r5, r3
 8001316:	2700      	movs	r7, #0
 8001318:	e755      	b.n	80011c6 <__aeabi_dsub+0x14a>
 800131a:	4c2a      	ldr	r4, [pc, #168]	; (80013c4 <__aeabi_dsub+0x348>)
 800131c:	1af6      	subs	r6, r6, r3
 800131e:	402c      	ands	r4, r5
 8001320:	e732      	b.n	8001188 <__aeabi_dsub+0x10c>
 8001322:	003d      	movs	r5, r7
 8001324:	3828      	subs	r0, #40	; 0x28
 8001326:	4085      	lsls	r5, r0
 8001328:	2700      	movs	r7, #0
 800132a:	e717      	b.n	800115c <__aeabi_dsub+0xe0>
 800132c:	0038      	movs	r0, r7
 800132e:	f7fe ffb5 	bl	800029c <__clzsi2>
 8001332:	3020      	adds	r0, #32
 8001334:	e706      	b.n	8001144 <__aeabi_dsub+0xc8>
 8001336:	430a      	orrs	r2, r1
 8001338:	0017      	movs	r7, r2
 800133a:	2100      	movs	r1, #0
 800133c:	1e7a      	subs	r2, r7, #1
 800133e:	4197      	sbcs	r7, r2
 8001340:	e6ee      	b.n	8001120 <__aeabi_dsub+0xa4>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d000      	beq.n	8001348 <__aeabi_dsub+0x2cc>
 8001346:	e0e5      	b.n	8001514 <__aeabi_dsub+0x498>
 8001348:	1c73      	adds	r3, r6, #1
 800134a:	469c      	mov	ip, r3
 800134c:	055b      	lsls	r3, r3, #21
 800134e:	0d5b      	lsrs	r3, r3, #21
 8001350:	2b01      	cmp	r3, #1
 8001352:	dc00      	bgt.n	8001356 <__aeabi_dsub+0x2da>
 8001354:	e09f      	b.n	8001496 <__aeabi_dsub+0x41a>
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <__aeabi_dsub+0x344>)
 8001358:	459c      	cmp	ip, r3
 800135a:	d100      	bne.n	800135e <__aeabi_dsub+0x2e2>
 800135c:	e0c5      	b.n	80014ea <__aeabi_dsub+0x46e>
 800135e:	4452      	add	r2, sl
 8001360:	4552      	cmp	r2, sl
 8001362:	4180      	sbcs	r0, r0
 8001364:	1864      	adds	r4, r4, r1
 8001366:	4240      	negs	r0, r0
 8001368:	1824      	adds	r4, r4, r0
 800136a:	07e7      	lsls	r7, r4, #31
 800136c:	0852      	lsrs	r2, r2, #1
 800136e:	4317      	orrs	r7, r2
 8001370:	0864      	lsrs	r4, r4, #1
 8001372:	4666      	mov	r6, ip
 8001374:	e708      	b.n	8001188 <__aeabi_dsub+0x10c>
 8001376:	4812      	ldr	r0, [pc, #72]	; (80013c0 <__aeabi_dsub+0x344>)
 8001378:	4285      	cmp	r5, r0
 800137a:	d100      	bne.n	800137e <__aeabi_dsub+0x302>
 800137c:	e085      	b.n	800148a <__aeabi_dsub+0x40e>
 800137e:	001d      	movs	r5, r3
 8001380:	e6bc      	b.n	80010fc <__aeabi_dsub+0x80>
 8001382:	0029      	movs	r1, r5
 8001384:	3e1f      	subs	r6, #31
 8001386:	40f1      	lsrs	r1, r6
 8001388:	2b20      	cmp	r3, #32
 800138a:	d100      	bne.n	800138e <__aeabi_dsub+0x312>
 800138c:	e07f      	b.n	800148e <__aeabi_dsub+0x412>
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	409d      	lsls	r5, r3
 8001394:	432f      	orrs	r7, r5
 8001396:	1e7d      	subs	r5, r7, #1
 8001398:	41af      	sbcs	r7, r5
 800139a:	2400      	movs	r4, #0
 800139c:	430f      	orrs	r7, r1
 800139e:	2600      	movs	r6, #0
 80013a0:	e78e      	b.n	80012c0 <__aeabi_dsub+0x244>
 80013a2:	002b      	movs	r3, r5
 80013a4:	000f      	movs	r7, r1
 80013a6:	3b20      	subs	r3, #32
 80013a8:	40df      	lsrs	r7, r3
 80013aa:	2d20      	cmp	r5, #32
 80013ac:	d071      	beq.n	8001492 <__aeabi_dsub+0x416>
 80013ae:	2340      	movs	r3, #64	; 0x40
 80013b0:	1b5d      	subs	r5, r3, r5
 80013b2:	40a9      	lsls	r1, r5
 80013b4:	430a      	orrs	r2, r1
 80013b6:	1e51      	subs	r1, r2, #1
 80013b8:	418a      	sbcs	r2, r1
 80013ba:	2100      	movs	r1, #0
 80013bc:	4317      	orrs	r7, r2
 80013be:	e6af      	b.n	8001120 <__aeabi_dsub+0xa4>
 80013c0:	000007ff 	.word	0x000007ff
 80013c4:	ff7fffff 	.word	0xff7fffff
 80013c8:	800fffff 	.word	0x800fffff
 80013cc:	2e00      	cmp	r6, #0
 80013ce:	d03e      	beq.n	800144e <__aeabi_dsub+0x3d2>
 80013d0:	4eb3      	ldr	r6, [pc, #716]	; (80016a0 <__aeabi_dsub+0x624>)
 80013d2:	45b4      	cmp	ip, r6
 80013d4:	d045      	beq.n	8001462 <__aeabi_dsub+0x3e6>
 80013d6:	2680      	movs	r6, #128	; 0x80
 80013d8:	0436      	lsls	r6, r6, #16
 80013da:	426d      	negs	r5, r5
 80013dc:	4334      	orrs	r4, r6
 80013de:	2d38      	cmp	r5, #56	; 0x38
 80013e0:	dd00      	ble.n	80013e4 <__aeabi_dsub+0x368>
 80013e2:	e0a8      	b.n	8001536 <__aeabi_dsub+0x4ba>
 80013e4:	2d1f      	cmp	r5, #31
 80013e6:	dd00      	ble.n	80013ea <__aeabi_dsub+0x36e>
 80013e8:	e11f      	b.n	800162a <__aeabi_dsub+0x5ae>
 80013ea:	2620      	movs	r6, #32
 80013ec:	0027      	movs	r7, r4
 80013ee:	4650      	mov	r0, sl
 80013f0:	1b76      	subs	r6, r6, r5
 80013f2:	40b7      	lsls	r7, r6
 80013f4:	40e8      	lsrs	r0, r5
 80013f6:	4307      	orrs	r7, r0
 80013f8:	4650      	mov	r0, sl
 80013fa:	40b0      	lsls	r0, r6
 80013fc:	1e46      	subs	r6, r0, #1
 80013fe:	41b0      	sbcs	r0, r6
 8001400:	40ec      	lsrs	r4, r5
 8001402:	4338      	orrs	r0, r7
 8001404:	1a17      	subs	r7, r2, r0
 8001406:	42ba      	cmp	r2, r7
 8001408:	4192      	sbcs	r2, r2
 800140a:	1b0c      	subs	r4, r1, r4
 800140c:	4252      	negs	r2, r2
 800140e:	1aa4      	subs	r4, r4, r2
 8001410:	4666      	mov	r6, ip
 8001412:	4698      	mov	r8, r3
 8001414:	e68b      	b.n	800112e <__aeabi_dsub+0xb2>
 8001416:	4664      	mov	r4, ip
 8001418:	4667      	mov	r7, ip
 800141a:	432c      	orrs	r4, r5
 800141c:	d000      	beq.n	8001420 <__aeabi_dsub+0x3a4>
 800141e:	e68b      	b.n	8001138 <__aeabi_dsub+0xbc>
 8001420:	2500      	movs	r5, #0
 8001422:	2600      	movs	r6, #0
 8001424:	2700      	movs	r7, #0
 8001426:	e6ea      	b.n	80011fe <__aeabi_dsub+0x182>
 8001428:	001e      	movs	r6, r3
 800142a:	e6ad      	b.n	8001188 <__aeabi_dsub+0x10c>
 800142c:	2b1f      	cmp	r3, #31
 800142e:	dc60      	bgt.n	80014f2 <__aeabi_dsub+0x476>
 8001430:	2720      	movs	r7, #32
 8001432:	1af8      	subs	r0, r7, r3
 8001434:	000f      	movs	r7, r1
 8001436:	4684      	mov	ip, r0
 8001438:	4087      	lsls	r7, r0
 800143a:	0010      	movs	r0, r2
 800143c:	40d8      	lsrs	r0, r3
 800143e:	4307      	orrs	r7, r0
 8001440:	4660      	mov	r0, ip
 8001442:	4082      	lsls	r2, r0
 8001444:	1e50      	subs	r0, r2, #1
 8001446:	4182      	sbcs	r2, r0
 8001448:	40d9      	lsrs	r1, r3
 800144a:	4317      	orrs	r7, r2
 800144c:	e6f5      	b.n	800123a <__aeabi_dsub+0x1be>
 800144e:	0026      	movs	r6, r4
 8001450:	4650      	mov	r0, sl
 8001452:	4306      	orrs	r6, r0
 8001454:	d005      	beq.n	8001462 <__aeabi_dsub+0x3e6>
 8001456:	43ed      	mvns	r5, r5
 8001458:	2d00      	cmp	r5, #0
 800145a:	d0d3      	beq.n	8001404 <__aeabi_dsub+0x388>
 800145c:	4e90      	ldr	r6, [pc, #576]	; (80016a0 <__aeabi_dsub+0x624>)
 800145e:	45b4      	cmp	ip, r6
 8001460:	d1bd      	bne.n	80013de <__aeabi_dsub+0x362>
 8001462:	000c      	movs	r4, r1
 8001464:	0017      	movs	r7, r2
 8001466:	4666      	mov	r6, ip
 8001468:	4698      	mov	r8, r3
 800146a:	e68d      	b.n	8001188 <__aeabi_dsub+0x10c>
 800146c:	488c      	ldr	r0, [pc, #560]	; (80016a0 <__aeabi_dsub+0x624>)
 800146e:	4283      	cmp	r3, r0
 8001470:	d00b      	beq.n	800148a <__aeabi_dsub+0x40e>
 8001472:	4663      	mov	r3, ip
 8001474:	e6d9      	b.n	800122a <__aeabi_dsub+0x1ae>
 8001476:	2d00      	cmp	r5, #0
 8001478:	d000      	beq.n	800147c <__aeabi_dsub+0x400>
 800147a:	e096      	b.n	80015aa <__aeabi_dsub+0x52e>
 800147c:	0008      	movs	r0, r1
 800147e:	4310      	orrs	r0, r2
 8001480:	d100      	bne.n	8001484 <__aeabi_dsub+0x408>
 8001482:	e0e2      	b.n	800164a <__aeabi_dsub+0x5ce>
 8001484:	000c      	movs	r4, r1
 8001486:	0017      	movs	r7, r2
 8001488:	4698      	mov	r8, r3
 800148a:	4e85      	ldr	r6, [pc, #532]	; (80016a0 <__aeabi_dsub+0x624>)
 800148c:	e67c      	b.n	8001188 <__aeabi_dsub+0x10c>
 800148e:	2500      	movs	r5, #0
 8001490:	e780      	b.n	8001394 <__aeabi_dsub+0x318>
 8001492:	2100      	movs	r1, #0
 8001494:	e78e      	b.n	80013b4 <__aeabi_dsub+0x338>
 8001496:	0023      	movs	r3, r4
 8001498:	4650      	mov	r0, sl
 800149a:	4303      	orrs	r3, r0
 800149c:	2e00      	cmp	r6, #0
 800149e:	d000      	beq.n	80014a2 <__aeabi_dsub+0x426>
 80014a0:	e0a8      	b.n	80015f4 <__aeabi_dsub+0x578>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dsub+0x42c>
 80014a6:	e0de      	b.n	8001666 <__aeabi_dsub+0x5ea>
 80014a8:	000b      	movs	r3, r1
 80014aa:	4313      	orrs	r3, r2
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dsub+0x434>
 80014ae:	e66b      	b.n	8001188 <__aeabi_dsub+0x10c>
 80014b0:	4452      	add	r2, sl
 80014b2:	4552      	cmp	r2, sl
 80014b4:	4180      	sbcs	r0, r0
 80014b6:	1864      	adds	r4, r4, r1
 80014b8:	4240      	negs	r0, r0
 80014ba:	1824      	adds	r4, r4, r0
 80014bc:	0017      	movs	r7, r2
 80014be:	0223      	lsls	r3, r4, #8
 80014c0:	d400      	bmi.n	80014c4 <__aeabi_dsub+0x448>
 80014c2:	e6fd      	b.n	80012c0 <__aeabi_dsub+0x244>
 80014c4:	4b77      	ldr	r3, [pc, #476]	; (80016a4 <__aeabi_dsub+0x628>)
 80014c6:	4666      	mov	r6, ip
 80014c8:	401c      	ands	r4, r3
 80014ca:	e65d      	b.n	8001188 <__aeabi_dsub+0x10c>
 80014cc:	0025      	movs	r5, r4
 80014ce:	4650      	mov	r0, sl
 80014d0:	4305      	orrs	r5, r0
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	d1cf      	bne.n	8001476 <__aeabi_dsub+0x3fa>
 80014d6:	2d00      	cmp	r5, #0
 80014d8:	d14f      	bne.n	800157a <__aeabi_dsub+0x4fe>
 80014da:	000c      	movs	r4, r1
 80014dc:	4314      	orrs	r4, r2
 80014de:	d100      	bne.n	80014e2 <__aeabi_dsub+0x466>
 80014e0:	e0a0      	b.n	8001624 <__aeabi_dsub+0x5a8>
 80014e2:	000c      	movs	r4, r1
 80014e4:	0017      	movs	r7, r2
 80014e6:	4698      	mov	r8, r3
 80014e8:	e64e      	b.n	8001188 <__aeabi_dsub+0x10c>
 80014ea:	4666      	mov	r6, ip
 80014ec:	2400      	movs	r4, #0
 80014ee:	2700      	movs	r7, #0
 80014f0:	e685      	b.n	80011fe <__aeabi_dsub+0x182>
 80014f2:	001f      	movs	r7, r3
 80014f4:	0008      	movs	r0, r1
 80014f6:	3f20      	subs	r7, #32
 80014f8:	40f8      	lsrs	r0, r7
 80014fa:	0007      	movs	r7, r0
 80014fc:	2b20      	cmp	r3, #32
 80014fe:	d100      	bne.n	8001502 <__aeabi_dsub+0x486>
 8001500:	e08e      	b.n	8001620 <__aeabi_dsub+0x5a4>
 8001502:	2040      	movs	r0, #64	; 0x40
 8001504:	1ac3      	subs	r3, r0, r3
 8001506:	4099      	lsls	r1, r3
 8001508:	430a      	orrs	r2, r1
 800150a:	1e51      	subs	r1, r2, #1
 800150c:	418a      	sbcs	r2, r1
 800150e:	2100      	movs	r1, #0
 8001510:	4317      	orrs	r7, r2
 8001512:	e692      	b.n	800123a <__aeabi_dsub+0x1be>
 8001514:	2e00      	cmp	r6, #0
 8001516:	d114      	bne.n	8001542 <__aeabi_dsub+0x4c6>
 8001518:	0026      	movs	r6, r4
 800151a:	4650      	mov	r0, sl
 800151c:	4306      	orrs	r6, r0
 800151e:	d062      	beq.n	80015e6 <__aeabi_dsub+0x56a>
 8001520:	43db      	mvns	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d15c      	bne.n	80015e0 <__aeabi_dsub+0x564>
 8001526:	1887      	adds	r7, r0, r2
 8001528:	4297      	cmp	r7, r2
 800152a:	4192      	sbcs	r2, r2
 800152c:	1864      	adds	r4, r4, r1
 800152e:	4252      	negs	r2, r2
 8001530:	18a4      	adds	r4, r4, r2
 8001532:	4666      	mov	r6, ip
 8001534:	e687      	b.n	8001246 <__aeabi_dsub+0x1ca>
 8001536:	4650      	mov	r0, sl
 8001538:	4320      	orrs	r0, r4
 800153a:	1e44      	subs	r4, r0, #1
 800153c:	41a0      	sbcs	r0, r4
 800153e:	2400      	movs	r4, #0
 8001540:	e760      	b.n	8001404 <__aeabi_dsub+0x388>
 8001542:	4e57      	ldr	r6, [pc, #348]	; (80016a0 <__aeabi_dsub+0x624>)
 8001544:	45b4      	cmp	ip, r6
 8001546:	d04e      	beq.n	80015e6 <__aeabi_dsub+0x56a>
 8001548:	2680      	movs	r6, #128	; 0x80
 800154a:	0436      	lsls	r6, r6, #16
 800154c:	425b      	negs	r3, r3
 800154e:	4334      	orrs	r4, r6
 8001550:	2b38      	cmp	r3, #56	; 0x38
 8001552:	dd00      	ble.n	8001556 <__aeabi_dsub+0x4da>
 8001554:	e07f      	b.n	8001656 <__aeabi_dsub+0x5da>
 8001556:	2b1f      	cmp	r3, #31
 8001558:	dd00      	ble.n	800155c <__aeabi_dsub+0x4e0>
 800155a:	e08b      	b.n	8001674 <__aeabi_dsub+0x5f8>
 800155c:	2620      	movs	r6, #32
 800155e:	0027      	movs	r7, r4
 8001560:	4650      	mov	r0, sl
 8001562:	1af6      	subs	r6, r6, r3
 8001564:	40b7      	lsls	r7, r6
 8001566:	40d8      	lsrs	r0, r3
 8001568:	4307      	orrs	r7, r0
 800156a:	4650      	mov	r0, sl
 800156c:	40b0      	lsls	r0, r6
 800156e:	1e46      	subs	r6, r0, #1
 8001570:	41b0      	sbcs	r0, r6
 8001572:	4307      	orrs	r7, r0
 8001574:	40dc      	lsrs	r4, r3
 8001576:	18bf      	adds	r7, r7, r2
 8001578:	e7d6      	b.n	8001528 <__aeabi_dsub+0x4ac>
 800157a:	000d      	movs	r5, r1
 800157c:	4315      	orrs	r5, r2
 800157e:	d100      	bne.n	8001582 <__aeabi_dsub+0x506>
 8001580:	e602      	b.n	8001188 <__aeabi_dsub+0x10c>
 8001582:	4650      	mov	r0, sl
 8001584:	1a80      	subs	r0, r0, r2
 8001586:	4582      	cmp	sl, r0
 8001588:	41bf      	sbcs	r7, r7
 800158a:	1a65      	subs	r5, r4, r1
 800158c:	427f      	negs	r7, r7
 800158e:	1bed      	subs	r5, r5, r7
 8001590:	4684      	mov	ip, r0
 8001592:	0228      	lsls	r0, r5, #8
 8001594:	d400      	bmi.n	8001598 <__aeabi_dsub+0x51c>
 8001596:	e68d      	b.n	80012b4 <__aeabi_dsub+0x238>
 8001598:	4650      	mov	r0, sl
 800159a:	1a17      	subs	r7, r2, r0
 800159c:	42ba      	cmp	r2, r7
 800159e:	4192      	sbcs	r2, r2
 80015a0:	1b0c      	subs	r4, r1, r4
 80015a2:	4252      	negs	r2, r2
 80015a4:	1aa4      	subs	r4, r4, r2
 80015a6:	4698      	mov	r8, r3
 80015a8:	e5ee      	b.n	8001188 <__aeabi_dsub+0x10c>
 80015aa:	000d      	movs	r5, r1
 80015ac:	4315      	orrs	r5, r2
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dsub+0x536>
 80015b0:	e76b      	b.n	800148a <__aeabi_dsub+0x40e>
 80015b2:	4650      	mov	r0, sl
 80015b4:	0767      	lsls	r7, r4, #29
 80015b6:	08c0      	lsrs	r0, r0, #3
 80015b8:	4307      	orrs	r7, r0
 80015ba:	2080      	movs	r0, #128	; 0x80
 80015bc:	08e4      	lsrs	r4, r4, #3
 80015be:	0300      	lsls	r0, r0, #12
 80015c0:	4204      	tst	r4, r0
 80015c2:	d007      	beq.n	80015d4 <__aeabi_dsub+0x558>
 80015c4:	08cd      	lsrs	r5, r1, #3
 80015c6:	4205      	tst	r5, r0
 80015c8:	d104      	bne.n	80015d4 <__aeabi_dsub+0x558>
 80015ca:	002c      	movs	r4, r5
 80015cc:	4698      	mov	r8, r3
 80015ce:	08d7      	lsrs	r7, r2, #3
 80015d0:	0749      	lsls	r1, r1, #29
 80015d2:	430f      	orrs	r7, r1
 80015d4:	0f7b      	lsrs	r3, r7, #29
 80015d6:	00e4      	lsls	r4, r4, #3
 80015d8:	431c      	orrs	r4, r3
 80015da:	00ff      	lsls	r7, r7, #3
 80015dc:	4e30      	ldr	r6, [pc, #192]	; (80016a0 <__aeabi_dsub+0x624>)
 80015de:	e5d3      	b.n	8001188 <__aeabi_dsub+0x10c>
 80015e0:	4e2f      	ldr	r6, [pc, #188]	; (80016a0 <__aeabi_dsub+0x624>)
 80015e2:	45b4      	cmp	ip, r6
 80015e4:	d1b4      	bne.n	8001550 <__aeabi_dsub+0x4d4>
 80015e6:	000c      	movs	r4, r1
 80015e8:	0017      	movs	r7, r2
 80015ea:	4666      	mov	r6, ip
 80015ec:	e5cc      	b.n	8001188 <__aeabi_dsub+0x10c>
 80015ee:	2700      	movs	r7, #0
 80015f0:	2400      	movs	r4, #0
 80015f2:	e5e8      	b.n	80011c6 <__aeabi_dsub+0x14a>
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d039      	beq.n	800166c <__aeabi_dsub+0x5f0>
 80015f8:	000b      	movs	r3, r1
 80015fa:	4313      	orrs	r3, r2
 80015fc:	d100      	bne.n	8001600 <__aeabi_dsub+0x584>
 80015fe:	e744      	b.n	800148a <__aeabi_dsub+0x40e>
 8001600:	08c0      	lsrs	r0, r0, #3
 8001602:	0767      	lsls	r7, r4, #29
 8001604:	4307      	orrs	r7, r0
 8001606:	2080      	movs	r0, #128	; 0x80
 8001608:	08e4      	lsrs	r4, r4, #3
 800160a:	0300      	lsls	r0, r0, #12
 800160c:	4204      	tst	r4, r0
 800160e:	d0e1      	beq.n	80015d4 <__aeabi_dsub+0x558>
 8001610:	08cb      	lsrs	r3, r1, #3
 8001612:	4203      	tst	r3, r0
 8001614:	d1de      	bne.n	80015d4 <__aeabi_dsub+0x558>
 8001616:	08d7      	lsrs	r7, r2, #3
 8001618:	0749      	lsls	r1, r1, #29
 800161a:	430f      	orrs	r7, r1
 800161c:	001c      	movs	r4, r3
 800161e:	e7d9      	b.n	80015d4 <__aeabi_dsub+0x558>
 8001620:	2100      	movs	r1, #0
 8001622:	e771      	b.n	8001508 <__aeabi_dsub+0x48c>
 8001624:	2500      	movs	r5, #0
 8001626:	2700      	movs	r7, #0
 8001628:	e5e9      	b.n	80011fe <__aeabi_dsub+0x182>
 800162a:	002e      	movs	r6, r5
 800162c:	0027      	movs	r7, r4
 800162e:	3e20      	subs	r6, #32
 8001630:	40f7      	lsrs	r7, r6
 8001632:	2d20      	cmp	r5, #32
 8001634:	d02f      	beq.n	8001696 <__aeabi_dsub+0x61a>
 8001636:	2640      	movs	r6, #64	; 0x40
 8001638:	1b75      	subs	r5, r6, r5
 800163a:	40ac      	lsls	r4, r5
 800163c:	4650      	mov	r0, sl
 800163e:	4320      	orrs	r0, r4
 8001640:	1e44      	subs	r4, r0, #1
 8001642:	41a0      	sbcs	r0, r4
 8001644:	2400      	movs	r4, #0
 8001646:	4338      	orrs	r0, r7
 8001648:	e6dc      	b.n	8001404 <__aeabi_dsub+0x388>
 800164a:	2480      	movs	r4, #128	; 0x80
 800164c:	2500      	movs	r5, #0
 800164e:	0324      	lsls	r4, r4, #12
 8001650:	4e13      	ldr	r6, [pc, #76]	; (80016a0 <__aeabi_dsub+0x624>)
 8001652:	2700      	movs	r7, #0
 8001654:	e5d3      	b.n	80011fe <__aeabi_dsub+0x182>
 8001656:	4650      	mov	r0, sl
 8001658:	4320      	orrs	r0, r4
 800165a:	0007      	movs	r7, r0
 800165c:	1e78      	subs	r0, r7, #1
 800165e:	4187      	sbcs	r7, r0
 8001660:	2400      	movs	r4, #0
 8001662:	18bf      	adds	r7, r7, r2
 8001664:	e760      	b.n	8001528 <__aeabi_dsub+0x4ac>
 8001666:	000c      	movs	r4, r1
 8001668:	0017      	movs	r7, r2
 800166a:	e58d      	b.n	8001188 <__aeabi_dsub+0x10c>
 800166c:	000c      	movs	r4, r1
 800166e:	0017      	movs	r7, r2
 8001670:	4e0b      	ldr	r6, [pc, #44]	; (80016a0 <__aeabi_dsub+0x624>)
 8001672:	e589      	b.n	8001188 <__aeabi_dsub+0x10c>
 8001674:	001e      	movs	r6, r3
 8001676:	0027      	movs	r7, r4
 8001678:	3e20      	subs	r6, #32
 800167a:	40f7      	lsrs	r7, r6
 800167c:	2b20      	cmp	r3, #32
 800167e:	d00c      	beq.n	800169a <__aeabi_dsub+0x61e>
 8001680:	2640      	movs	r6, #64	; 0x40
 8001682:	1af3      	subs	r3, r6, r3
 8001684:	409c      	lsls	r4, r3
 8001686:	4650      	mov	r0, sl
 8001688:	4320      	orrs	r0, r4
 800168a:	1e44      	subs	r4, r0, #1
 800168c:	41a0      	sbcs	r0, r4
 800168e:	4307      	orrs	r7, r0
 8001690:	2400      	movs	r4, #0
 8001692:	18bf      	adds	r7, r7, r2
 8001694:	e748      	b.n	8001528 <__aeabi_dsub+0x4ac>
 8001696:	2400      	movs	r4, #0
 8001698:	e7d0      	b.n	800163c <__aeabi_dsub+0x5c0>
 800169a:	2400      	movs	r4, #0
 800169c:	e7f3      	b.n	8001686 <__aeabi_dsub+0x60a>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	000007ff 	.word	0x000007ff
 80016a4:	ff7fffff 	.word	0xff7fffff

080016a8 <__aeabi_d2iz>:
 80016a8:	b530      	push	{r4, r5, lr}
 80016aa:	4d13      	ldr	r5, [pc, #76]	; (80016f8 <__aeabi_d2iz+0x50>)
 80016ac:	030a      	lsls	r2, r1, #12
 80016ae:	004b      	lsls	r3, r1, #1
 80016b0:	0b12      	lsrs	r2, r2, #12
 80016b2:	0d5b      	lsrs	r3, r3, #21
 80016b4:	0fc9      	lsrs	r1, r1, #31
 80016b6:	2400      	movs	r4, #0
 80016b8:	42ab      	cmp	r3, r5
 80016ba:	dd10      	ble.n	80016de <__aeabi_d2iz+0x36>
 80016bc:	4c0f      	ldr	r4, [pc, #60]	; (80016fc <__aeabi_d2iz+0x54>)
 80016be:	42a3      	cmp	r3, r4
 80016c0:	dc0f      	bgt.n	80016e2 <__aeabi_d2iz+0x3a>
 80016c2:	2480      	movs	r4, #128	; 0x80
 80016c4:	4d0e      	ldr	r5, [pc, #56]	; (8001700 <__aeabi_d2iz+0x58>)
 80016c6:	0364      	lsls	r4, r4, #13
 80016c8:	4322      	orrs	r2, r4
 80016ca:	1aed      	subs	r5, r5, r3
 80016cc:	2d1f      	cmp	r5, #31
 80016ce:	dd0b      	ble.n	80016e8 <__aeabi_d2iz+0x40>
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <__aeabi_d2iz+0x5c>)
 80016d2:	1ac3      	subs	r3, r0, r3
 80016d4:	40da      	lsrs	r2, r3
 80016d6:	4254      	negs	r4, r2
 80016d8:	2900      	cmp	r1, #0
 80016da:	d100      	bne.n	80016de <__aeabi_d2iz+0x36>
 80016dc:	0014      	movs	r4, r2
 80016de:	0020      	movs	r0, r4
 80016e0:	bd30      	pop	{r4, r5, pc}
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <__aeabi_d2iz+0x60>)
 80016e4:	18cc      	adds	r4, r1, r3
 80016e6:	e7fa      	b.n	80016de <__aeabi_d2iz+0x36>
 80016e8:	4c08      	ldr	r4, [pc, #32]	; (800170c <__aeabi_d2iz+0x64>)
 80016ea:	40e8      	lsrs	r0, r5
 80016ec:	46a4      	mov	ip, r4
 80016ee:	4463      	add	r3, ip
 80016f0:	409a      	lsls	r2, r3
 80016f2:	4302      	orrs	r2, r0
 80016f4:	e7ef      	b.n	80016d6 <__aeabi_d2iz+0x2e>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	000003fe 	.word	0x000003fe
 80016fc:	0000041d 	.word	0x0000041d
 8001700:	00000433 	.word	0x00000433
 8001704:	00000413 	.word	0x00000413
 8001708:	7fffffff 	.word	0x7fffffff
 800170c:	fffffbed 	.word	0xfffffbed

08001710 <__aeabi_ui2d>:
 8001710:	b510      	push	{r4, lr}
 8001712:	1e04      	subs	r4, r0, #0
 8001714:	d028      	beq.n	8001768 <__aeabi_ui2d+0x58>
 8001716:	f7fe fdc1 	bl	800029c <__clzsi2>
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <__aeabi_ui2d+0x60>)
 800171c:	4a15      	ldr	r2, [pc, #84]	; (8001774 <__aeabi_ui2d+0x64>)
 800171e:	1a1b      	subs	r3, r3, r0
 8001720:	1ad2      	subs	r2, r2, r3
 8001722:	2a1f      	cmp	r2, #31
 8001724:	dd15      	ble.n	8001752 <__aeabi_ui2d+0x42>
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <__aeabi_ui2d+0x68>)
 8001728:	1ad2      	subs	r2, r2, r3
 800172a:	4094      	lsls	r4, r2
 800172c:	2200      	movs	r2, #0
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	055b      	lsls	r3, r3, #21
 8001732:	0b24      	lsrs	r4, r4, #12
 8001734:	0d5b      	lsrs	r3, r3, #21
 8001736:	2100      	movs	r1, #0
 8001738:	0010      	movs	r0, r2
 800173a:	0324      	lsls	r4, r4, #12
 800173c:	0d0a      	lsrs	r2, r1, #20
 800173e:	0b24      	lsrs	r4, r4, #12
 8001740:	0512      	lsls	r2, r2, #20
 8001742:	4322      	orrs	r2, r4
 8001744:	4c0d      	ldr	r4, [pc, #52]	; (800177c <__aeabi_ui2d+0x6c>)
 8001746:	051b      	lsls	r3, r3, #20
 8001748:	4022      	ands	r2, r4
 800174a:	4313      	orrs	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	0859      	lsrs	r1, r3, #1
 8001750:	bd10      	pop	{r4, pc}
 8001752:	0021      	movs	r1, r4
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	210b      	movs	r1, #11
 800175a:	1a08      	subs	r0, r1, r0
 800175c:	40c4      	lsrs	r4, r0
 800175e:	055b      	lsls	r3, r3, #21
 8001760:	0324      	lsls	r4, r4, #12
 8001762:	0b24      	lsrs	r4, r4, #12
 8001764:	0d5b      	lsrs	r3, r3, #21
 8001766:	e7e6      	b.n	8001736 <__aeabi_ui2d+0x26>
 8001768:	2300      	movs	r3, #0
 800176a:	2400      	movs	r4, #0
 800176c:	2200      	movs	r2, #0
 800176e:	e7e2      	b.n	8001736 <__aeabi_ui2d+0x26>
 8001770:	0000041e 	.word	0x0000041e
 8001774:	00000433 	.word	0x00000433
 8001778:	00000413 	.word	0x00000413
 800177c:	800fffff 	.word	0x800fffff

08001780 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001782:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_Init+0x1c>)
 8001784:	6813      	ldr	r3, [r2, #0]
 8001786:	2110      	movs	r1, #16
 8001788:	430b      	orrs	r3, r1
 800178a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800178c:	2000      	movs	r0, #0
 800178e:	f002 fc93 	bl	80040b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001792:	f002 fc73 	bl	800407c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001796:	2000      	movs	r0, #0
 8001798:	bd10      	pop	{r4, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80017a0:	4a02      	ldr	r2, [pc, #8]	; (80017ac <HAL_IncTick+0xc>)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	4770      	bx	lr
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	20000d6c 	.word	0x20000d6c

080017b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017b0:	4b01      	ldr	r3, [pc, #4]	; (80017b8 <HAL_GetTick+0x8>)
 80017b2:	6818      	ldr	r0, [r3, #0]
}
 80017b4:	4770      	bx	lr
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	20000d6c 	.word	0x20000d6c

080017bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017bc:	b530      	push	{r4, r5, lr}
 80017be:	b083      	sub	sp, #12
 80017c0:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017c6:	6802      	ldr	r2, [r0, #0]
 80017c8:	6891      	ldr	r1, [r2, #8]
 80017ca:	3303      	adds	r3, #3
 80017cc:	400b      	ands	r3, r1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d011      	beq.n	80017f6 <ADC_Enable+0x3a>
 80017d2:	2300      	movs	r3, #0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d142      	bne.n	800185e <ADC_Enable+0xa2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017d8:	6891      	ldr	r1, [r2, #8]
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <ADC_Enable+0xa8>)
 80017dc:	4219      	tst	r1, r3
 80017de:	d116      	bne.n	800180e <ADC_Enable+0x52>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017e0:	6893      	ldr	r3, [r2, #8]
 80017e2:	2101      	movs	r1, #1
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <ADC_Enable+0xac>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	491f      	ldr	r1, [pc, #124]	; (800186c <ADC_Enable+0xb0>)
 80017ee:	f7fe fc8b 	bl	8000108 <__udivsi3>
 80017f2:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80017f4:	e018      	b.n	8001828 <ADC_Enable+0x6c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017f6:	6813      	ldr	r3, [r2, #0]
 80017f8:	07db      	lsls	r3, r3, #31
 80017fa:	d404      	bmi.n	8001806 <ADC_Enable+0x4a>
 80017fc:	68d3      	ldr	r3, [r2, #12]
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	d403      	bmi.n	800180a <ADC_Enable+0x4e>
 8001802:	2300      	movs	r3, #0
 8001804:	e7e6      	b.n	80017d4 <ADC_Enable+0x18>
 8001806:	2301      	movs	r3, #1
 8001808:	e7e4      	b.n	80017d4 <ADC_Enable+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e7e2      	b.n	80017d4 <ADC_Enable+0x18>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001810:	2210      	movs	r2, #16
 8001812:	4313      	orrs	r3, r2
 8001814:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001816:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001818:	3a0f      	subs	r2, #15
 800181a:	4313      	orrs	r3, r2
 800181c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800181e:	2001      	movs	r0, #1
 8001820:	e01e      	b.n	8001860 <ADC_Enable+0xa4>
    {
      wait_loop_index--;
 8001822:	9b01      	ldr	r3, [sp, #4]
 8001824:	3b01      	subs	r3, #1
 8001826:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001828:	9b01      	ldr	r3, [sp, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <ADC_Enable+0x66>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800182e:	f7ff ffbf 	bl	80017b0 <HAL_GetTick>
 8001832:	0005      	movs	r5, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	07db      	lsls	r3, r3, #31
 800183a:	d40e      	bmi.n	800185a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800183c:	f7ff ffb8 	bl	80017b0 <HAL_GetTick>
 8001840:	1b40      	subs	r0, r0, r5
 8001842:	2802      	cmp	r0, #2
 8001844:	d9f6      	bls.n	8001834 <ADC_Enable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001846:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001848:	2210      	movs	r2, #16
 800184a:	4313      	orrs	r3, r2
 800184c:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001850:	3a0f      	subs	r2, #15
 8001852:	4313      	orrs	r3, r2
 8001854:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 8001856:	2001      	movs	r0, #1
 8001858:	e002      	b.n	8001860 <ADC_Enable+0xa4>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800185a:	2000      	movs	r0, #0
 800185c:	e000      	b.n	8001860 <ADC_Enable+0xa4>
 800185e:	2000      	movs	r0, #0
}
 8001860:	b003      	add	sp, #12
 8001862:	bd30      	pop	{r4, r5, pc}
 8001864:	80000017 	.word	0x80000017
 8001868:	20000004 	.word	0x20000004
 800186c:	000f4240 	.word	0x000f4240

08001870 <HAL_ADC_Init>:
{
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8001874:	d100      	bne.n	8001878 <HAL_ADC_Init+0x8>
 8001876:	e0b9      	b.n	80019ec <HAL_ADC_Init+0x17c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001878:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800187a:	2b00      	cmp	r3, #0
 800187c:	d100      	bne.n	8001880 <HAL_ADC_Init+0x10>
 800187e:	e080      	b.n	8001982 <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001880:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001882:	06db      	lsls	r3, r3, #27
 8001884:	d500      	bpl.n	8001888 <HAL_ADC_Init+0x18>
 8001886:	e0ab      	b.n	80019e0 <HAL_ADC_Init+0x170>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001888:	6822      	ldr	r2, [r4, #0]
 800188a:	6893      	ldr	r3, [r2, #8]
 800188c:	2104      	movs	r1, #4
 800188e:	400b      	ands	r3, r1
      (tmp_hal_status == HAL_OK)                                &&
 8001890:	d000      	beq.n	8001894 <HAL_ADC_Init+0x24>
 8001892:	e0a5      	b.n	80019e0 <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 8001894:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001896:	4856      	ldr	r0, [pc, #344]	; (80019f0 <HAL_ADC_Init+0x180>)
 8001898:	4001      	ands	r1, r0
 800189a:	3006      	adds	r0, #6
 800189c:	30ff      	adds	r0, #255	; 0xff
 800189e:	4301      	orrs	r1, r0
 80018a0:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80018a2:	6890      	ldr	r0, [r2, #8]
 80018a4:	2103      	movs	r1, #3
 80018a6:	4001      	ands	r1, r0
 80018a8:	2901      	cmp	r1, #1
 80018aa:	d070      	beq.n	800198e <HAL_ADC_Init+0x11e>
 80018ac:	2100      	movs	r1, #0
 80018ae:	2900      	cmp	r1, #0
 80018b0:	d10c      	bne.n	80018cc <HAL_ADC_Init+0x5c>
      MODIFY_REG(hadc->Instance->CFGR1,
 80018b2:	68d1      	ldr	r1, [r2, #12]
 80018b4:	2018      	movs	r0, #24
 80018b6:	4381      	bics	r1, r0
 80018b8:	68a0      	ldr	r0, [r4, #8]
 80018ba:	4301      	orrs	r1, r0
 80018bc:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80018be:	6821      	ldr	r1, [r4, #0]
 80018c0:	690a      	ldr	r2, [r1, #16]
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	0892      	lsrs	r2, r2, #2
 80018c6:	6860      	ldr	r0, [r4, #4]
 80018c8:	4302      	orrs	r2, r0
 80018ca:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80018cc:	6821      	ldr	r1, [r4, #0]
 80018ce:	68ca      	ldr	r2, [r1, #12]
 80018d0:	4848      	ldr	r0, [pc, #288]	; (80019f4 <HAL_ADC_Init+0x184>)
 80018d2:	4002      	ands	r2, r0
 80018d4:	60ca      	str	r2, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80018d6:	69a2      	ldr	r2, [r4, #24]
 80018d8:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80018da:	69e1      	ldr	r1, [r4, #28]
 80018dc:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80018de:	430a      	orrs	r2, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80018e0:	6a20      	ldr	r0, [r4, #32]
 80018e2:	0341      	lsls	r1, r0, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80018e4:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80018e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80018e8:	2901      	cmp	r1, #1
 80018ea:	d05c      	beq.n	80019a6 <HAL_ADC_Init+0x136>
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0149      	lsls	r1, r1, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80018f0:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80018f2:	68e1      	ldr	r1, [r4, #12]
 80018f4:	430a      	orrs	r2, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80018f6:	6921      	ldr	r1, [r4, #16]
 80018f8:	2902      	cmp	r1, #2
 80018fa:	d056      	beq.n	80019aa <HAL_ADC_Init+0x13a>
                 hadc->Init.DataAlign                                   |
 80018fc:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80018fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001900:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001902:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001904:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001906:	2a01      	cmp	r2, #1
 8001908:	d051      	beq.n	80019ae <HAL_ADC_Init+0x13e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800190c:	21c2      	movs	r1, #194	; 0xc2
 800190e:	31ff      	adds	r1, #255	; 0xff
 8001910:	428a      	cmp	r2, r1
 8001912:	d002      	beq.n	800191a <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001914:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001916:	430a      	orrs	r2, r1
 8001918:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800191a:	6821      	ldr	r1, [r4, #0]
 800191c:	68ca      	ldr	r2, [r1, #12]
 800191e:	431a      	orrs	r2, r3
 8001920:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001922:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0549      	lsls	r1, r1, #21
 8001928:	428a      	cmp	r2, r1
 800192a:	d00d      	beq.n	8001948 <HAL_ADC_Init+0xd8>
 800192c:	2a01      	cmp	r2, #1
 800192e:	d00b      	beq.n	8001948 <HAL_ADC_Init+0xd8>
 8001930:	2a02      	cmp	r2, #2
 8001932:	d009      	beq.n	8001948 <HAL_ADC_Init+0xd8>
 8001934:	2a03      	cmp	r2, #3
 8001936:	d007      	beq.n	8001948 <HAL_ADC_Init+0xd8>
 8001938:	2a04      	cmp	r2, #4
 800193a:	d005      	beq.n	8001948 <HAL_ADC_Init+0xd8>
 800193c:	2a05      	cmp	r2, #5
 800193e:	d003      	beq.n	8001948 <HAL_ADC_Init+0xd8>
 8001940:	2a06      	cmp	r2, #6
 8001942:	d001      	beq.n	8001948 <HAL_ADC_Init+0xd8>
 8001944:	2a07      	cmp	r2, #7
 8001946:	d10a      	bne.n	800195e <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001948:	6820      	ldr	r0, [r4, #0]
 800194a:	6941      	ldr	r1, [r0, #20]
 800194c:	2207      	movs	r2, #7
 800194e:	4391      	bics	r1, r2
 8001950:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001952:	6820      	ldr	r0, [r4, #0]
 8001954:	6941      	ldr	r1, [r0, #20]
 8001956:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001958:	402a      	ands	r2, r5
 800195a:	430a      	orrs	r2, r1
 800195c:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800195e:	6822      	ldr	r2, [r4, #0]
 8001960:	68d2      	ldr	r2, [r2, #12]
 8001962:	4925      	ldr	r1, [pc, #148]	; (80019f8 <HAL_ADC_Init+0x188>)
 8001964:	400a      	ands	r2, r1
 8001966:	4293      	cmp	r3, r2
 8001968:	d030      	beq.n	80019cc <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 800196a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800196c:	2212      	movs	r2, #18
 800196e:	4393      	bics	r3, r2
 8001970:	3a02      	subs	r2, #2
 8001972:	4313      	orrs	r3, r2
 8001974:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001976:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001978:	3a0f      	subs	r2, #15
 800197a:	4313      	orrs	r3, r2
 800197c:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800197e:	2001      	movs	r0, #1
 8001980:	e033      	b.n	80019ea <HAL_ADC_Init+0x17a>
    ADC_CLEAR_ERRORCODE(hadc);
 8001982:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8001988:	f002 f918 	bl	8003bbc <HAL_ADC_MspInit>
 800198c:	e778      	b.n	8001880 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800198e:	6811      	ldr	r1, [r2, #0]
 8001990:	07c9      	lsls	r1, r1, #31
 8001992:	d404      	bmi.n	800199e <HAL_ADC_Init+0x12e>
 8001994:	68d1      	ldr	r1, [r2, #12]
 8001996:	0409      	lsls	r1, r1, #16
 8001998:	d403      	bmi.n	80019a2 <HAL_ADC_Init+0x132>
 800199a:	2100      	movs	r1, #0
 800199c:	e787      	b.n	80018ae <HAL_ADC_Init+0x3e>
 800199e:	2101      	movs	r1, #1
 80019a0:	e785      	b.n	80018ae <HAL_ADC_Init+0x3e>
 80019a2:	2101      	movs	r1, #1
 80019a4:	e783      	b.n	80018ae <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80019a6:	0019      	movs	r1, r3
 80019a8:	e7a2      	b.n	80018f0 <HAL_ADC_Init+0x80>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80019aa:	2304      	movs	r3, #4
 80019ac:	e7a6      	b.n	80018fc <HAL_ADC_Init+0x8c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d103      	bne.n	80019ba <HAL_ADC_Init+0x14a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	0252      	lsls	r2, r2, #9
 80019b6:	4313      	orrs	r3, r2
 80019b8:	e7a7      	b.n	800190a <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019bc:	2120      	movs	r1, #32
 80019be:	430a      	orrs	r2, r1
 80019c0:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80019c4:	391f      	subs	r1, #31
 80019c6:	430a      	orrs	r2, r1
 80019c8:	64a2      	str	r2, [r4, #72]	; 0x48
 80019ca:	e79e      	b.n	800190a <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	2300      	movs	r3, #0
 80019ce:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80019d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019d2:	2203      	movs	r2, #3
 80019d4:	4393      	bics	r3, r2
 80019d6:	3a02      	subs	r2, #2
 80019d8:	4313      	orrs	r3, r2
 80019da:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019dc:	2000      	movs	r0, #0
 80019de:	e004      	b.n	80019ea <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019e2:	2210      	movs	r2, #16
 80019e4:	4313      	orrs	r3, r2
 80019e6:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
}
 80019ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	e7fc      	b.n	80019ea <HAL_ADC_Init+0x17a>
 80019f0:	fffffefd 	.word	0xfffffefd
 80019f4:	fffe0219 	.word	0xfffe0219
 80019f8:	833fffe7 	.word	0x833fffe7

080019fc <HAL_ADC_Start_DMA>:
{
 80019fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fe:	0004      	movs	r4, r0
 8001a00:	000e      	movs	r6, r1
 8001a02:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a04:	6803      	ldr	r3, [r0, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	075b      	lsls	r3, r3, #29
 8001a0a:	d502      	bpl.n	8001a12 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 8001a0c:	2502      	movs	r5, #2
}
 8001a0e:	0028      	movs	r0, r5
 8001a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	5cc3      	ldrb	r3, [r0, r3]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d03a      	beq.n	8001a90 <HAL_ADC_Start_DMA+0x94>
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2340      	movs	r3, #64	; 0x40
 8001a1e:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a20:	69c3      	ldr	r3, [r0, #28]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d032      	beq.n	8001a8c <HAL_ADC_Start_DMA+0x90>
      tmp_hal_status = ADC_Enable(hadc);
 8001a26:	f7ff fec9 	bl	80017bc <ADC_Enable>
 8001a2a:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_ADC_Start_DMA+0x12>
      ADC_STATE_CLR_SET(hadc->State,
 8001a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_ADC_Start_DMA+0x98>)
 8001a34:	401a      	ands	r2, r3
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a48:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <HAL_ADC_Start_DMA+0x9c>)
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_ADC_Start_DMA+0xa0>)
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a54:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <HAL_ADC_Start_DMA+0xa4>)
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	221c      	movs	r2, #28
 8001a5c:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a5e:	6822      	ldr	r2, [r4, #0]
 8001a60:	6853      	ldr	r3, [r2, #4]
 8001a62:	2110      	movs	r1, #16
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001a68:	6822      	ldr	r2, [r4, #0]
 8001a6a:	68d3      	ldr	r3, [r2, #12]
 8001a6c:	390f      	subs	r1, #15
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a72:	6821      	ldr	r1, [r4, #0]
 8001a74:	3140      	adds	r1, #64	; 0x40
 8001a76:	003b      	movs	r3, r7
 8001a78:	0032      	movs	r2, r6
 8001a7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001a7c:	f000 f998 	bl	8001db0 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	6893      	ldr	r3, [r2, #8]
 8001a84:	2104      	movs	r1, #4
 8001a86:	430b      	orrs	r3, r1
 8001a88:	6093      	str	r3, [r2, #8]
 8001a8a:	e7c0      	b.n	8001a0e <HAL_ADC_Start_DMA+0x12>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	e7cd      	b.n	8001a2c <HAL_ADC_Start_DMA+0x30>
    __HAL_LOCK(hadc);
 8001a90:	2502      	movs	r5, #2
 8001a92:	e7bc      	b.n	8001a0e <HAL_ADC_Start_DMA+0x12>
 8001a94:	fffff0fe 	.word	0xfffff0fe
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001b1b 	.word	0x08001b1b
 8001aa0:	08001b27 	.word	0x08001b27

08001aa4 <HAL_ADC_ConvCpltCallback>:
}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aae:	2150      	movs	r1, #80	; 0x50
 8001ab0:	4211      	tst	r1, r2
 8001ab2:	d12b      	bne.n	8001b0c <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ab4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	430a      	orrs	r2, r1
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68d0      	ldr	r0, [r2, #12]
 8001ac2:	21c0      	movs	r1, #192	; 0xc0
 8001ac4:	0109      	lsls	r1, r1, #4
 8001ac6:	4208      	tst	r0, r1
 8001ac8:	d113      	bne.n	8001af2 <ADC_DMAConvCplt+0x4a>
 8001aca:	6a19      	ldr	r1, [r3, #32]
 8001acc:	2900      	cmp	r1, #0
 8001ace:	d110      	bne.n	8001af2 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	0709      	lsls	r1, r1, #28
 8001ad4:	d50d      	bpl.n	8001af2 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ad6:	6891      	ldr	r1, [r2, #8]
 8001ad8:	0749      	lsls	r1, r1, #29
 8001ada:	d40e      	bmi.n	8001afa <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001adc:	6851      	ldr	r1, [r2, #4]
 8001ade:	200c      	movs	r0, #12
 8001ae0:	4381      	bics	r1, r0
 8001ae2:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae6:	490b      	ldr	r1, [pc, #44]	; (8001b14 <ADC_DMAConvCplt+0x6c>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	3104      	adds	r1, #4
 8001aec:	31ff      	adds	r1, #255	; 0xff
 8001aee:	430a      	orrs	r2, r1
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001af2:	0018      	movs	r0, r3
 8001af4:	f7ff ffd6 	bl	8001aa4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001af8:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001afc:	2120      	movs	r1, #32
 8001afe:	430a      	orrs	r2, r1
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b04:	391f      	subs	r1, #31
 8001b06:	430a      	orrs	r2, r1
 8001b08:	649a      	str	r2, [r3, #72]	; 0x48
 8001b0a:	e7f2      	b.n	8001af2 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4798      	blx	r3
}
 8001b12:	e7f1      	b.n	8001af8 <ADC_DMAConvCplt+0x50>
 8001b14:	fffffefe 	.word	0xfffffefe

08001b18 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001b18:	4770      	bx	lr

08001b1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b1a:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b1c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001b1e:	f7ff fffb 	bl	8001b18 <HAL_ADC_ConvHalfCpltCallback>
}
 8001b22:	bd10      	pop	{r4, pc}

08001b24 <HAL_ADC_ErrorCallback>:
}
 8001b24:	4770      	bx	lr

08001b26 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b26:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b28:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b2c:	2240      	movs	r2, #64	; 0x40
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b32:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001b34:	3a3c      	subs	r2, #60	; 0x3c
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001b3a:	f7ff fff3 	bl	8001b24 <HAL_ADC_ErrorCallback>
}
 8001b3e:	bd10      	pop	{r4, pc}

08001b40 <HAL_ADC_ConfigChannel>:
{
 8001b40:	b530      	push	{r4, r5, lr}
 8001b42:	b083      	sub	sp, #12
 8001b44:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001b4a:	3340      	adds	r3, #64	; 0x40
 8001b4c:	5cc3      	ldrb	r3, [r0, r3]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d100      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x14>
 8001b52:	e08a      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x12a>
 8001b54:	2201      	movs	r2, #1
 8001b56:	2340      	movs	r3, #64	; 0x40
 8001b58:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b5a:	6803      	ldr	r3, [r0, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	0752      	lsls	r2, r2, #29
 8001b60:	d475      	bmi.n	8001c4e <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001b62:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <HAL_ADC_ConfigChannel+0x130>)
 8001b64:	6848      	ldr	r0, [r1, #4]
 8001b66:	4290      	cmp	r0, r2
 8001b68:	d056      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	680d      	ldr	r5, [r1, #0]
 8001b70:	40a8      	lsls	r0, r5
 8001b72:	4302      	orrs	r2, r0
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	0552      	lsls	r2, r2, #21
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d01e      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d01c      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d01a      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d018      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d016      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d014      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
 8001b94:	2b06      	cmp	r3, #6
 8001b96:	d012      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
 8001b98:	2b07      	cmp	r3, #7
 8001b9a:	d010      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001b9c:	6822      	ldr	r2, [r4, #0]
 8001b9e:	6950      	ldr	r0, [r2, #20]
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	4003      	ands	r3, r0
 8001ba4:	6888      	ldr	r0, [r1, #8]
 8001ba6:	4298      	cmp	r0, r3
 8001ba8:	d009      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001baa:	6950      	ldr	r0, [r2, #20]
 8001bac:	2307      	movs	r3, #7
 8001bae:	4398      	bics	r0, r3
 8001bb0:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001bb2:	6820      	ldr	r0, [r4, #0]
 8001bb4:	6942      	ldr	r2, [r0, #20]
 8001bb6:	688d      	ldr	r5, [r1, #8]
 8001bb8:	402b      	ands	r3, r5
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bbe:	680b      	ldr	r3, [r1, #0]
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	3a10      	subs	r2, #16
 8001bc4:	2a02      	cmp	r2, #2
 8001bc6:	d84c      	bhi.n	8001c62 <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <HAL_ADC_ConfigChannel+0x134>)
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d00e      	beq.n	8001bee <HAL_ADC_ConfigChannel+0xae>
 8001bd0:	2b11      	cmp	r3, #17
 8001bd2:	d009      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0xa8>
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	045b      	lsls	r3, r3, #17
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <HAL_ADC_ConfigChannel+0x134>)
 8001bdc:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bde:	680b      	ldr	r3, [r1, #0]
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d007      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be4:	2000      	movs	r0, #0
 8001be6:	e037      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	03db      	lsls	r3, r3, #15
 8001bec:	e7f4      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x98>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	e7f1      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_ADC_ConfigChannel+0x138>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	4920      	ldr	r1, [pc, #128]	; (8001c7c <HAL_ADC_ConfigChannel+0x13c>)
 8001bfa:	f7fe fa85 	bl	8000108 <__udivsi3>
 8001bfe:	0083      	lsls	r3, r0, #2
 8001c00:	1818      	adds	r0, r3, r0
 8001c02:	0043      	lsls	r3, r0, #1
 8001c04:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001c06:	e002      	b.n	8001c0e <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8001c08:	9b01      	ldr	r3, [sp, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001c0e:	9b01      	ldr	r3, [sp, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f9      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c14:	2000      	movs	r0, #0
 8001c16:	e01f      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	680d      	ldr	r5, [r1, #0]
 8001c1e:	40a8      	lsls	r0, r5
 8001c20:	4382      	bics	r2, r0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c24:	680b      	ldr	r3, [r1, #0]
 8001c26:	001a      	movs	r2, r3
 8001c28:	3a10      	subs	r2, #16
 8001c2a:	2a02      	cmp	r2, #2
 8001c2c:	d81b      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c2e:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_ADC_ConfigChannel+0x134>)
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d009      	beq.n	8001c4a <HAL_ADC_ConfigChannel+0x10a>
 8001c36:	2b11      	cmp	r3, #17
 8001c38:	d005      	beq.n	8001c46 <HAL_ADC_ConfigChannel+0x106>
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_ADC_ConfigChannel+0x140>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_ADC_ConfigChannel+0x134>)
 8001c40:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c42:	2000      	movs	r0, #0
 8001c44:	e008      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_ADC_ConfigChannel+0x144>)
 8001c48:	e7f8      	b.n	8001c3c <HAL_ADC_ConfigChannel+0xfc>
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_ADC_ConfigChannel+0x148>)
 8001c4c:	e7f6      	b.n	8001c3c <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c50:	2220      	movs	r2, #32
 8001c52:	4313      	orrs	r3, r2
 8001c54:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2340      	movs	r3, #64	; 0x40
 8001c5c:	54e2      	strb	r2, [r4, r3]
}
 8001c5e:	b003      	add	sp, #12
 8001c60:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c62:	2000      	movs	r0, #0
 8001c64:	e7f8      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x118>
 8001c66:	2000      	movs	r0, #0
 8001c68:	e7f6      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	e7f7      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x11e>
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	00001001 	.word	0x00001001
 8001c74:	40012708 	.word	0x40012708
 8001c78:	20000004 	.word	0x20000004
 8001c7c:	000f4240 	.word	0x000f4240
 8001c80:	feffffff 	.word	0xfeffffff
 8001c84:	ffbfffff 	.word	0xffbfffff
 8001c88:	ff7fffff 	.word	0xff7fffff

08001c8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8c:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001c8e:	2800      	cmp	r0, #0
 8001c90:	db11      	blt.n	8001cb6 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c92:	0883      	lsrs	r3, r0, #2
 8001c94:	4d14      	ldr	r5, [pc, #80]	; (8001ce8 <HAL_NVIC_SetPriority+0x5c>)
 8001c96:	33c0      	adds	r3, #192	; 0xc0
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	595c      	ldr	r4, [r3, r5]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4010      	ands	r0, r2
 8001ca0:	00c0      	lsls	r0, r0, #3
 8001ca2:	32fc      	adds	r2, #252	; 0xfc
 8001ca4:	0016      	movs	r6, r2
 8001ca6:	4086      	lsls	r6, r0
 8001ca8:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001caa:	0189      	lsls	r1, r1, #6
 8001cac:	400a      	ands	r2, r1
 8001cae:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb0:	4322      	orrs	r2, r4
 8001cb2:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001cb4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb6:	b2c0      	uxtb	r0, r0
 8001cb8:	230f      	movs	r3, #15
 8001cba:	4003      	ands	r3, r0
 8001cbc:	3b08      	subs	r3, #8
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3306      	adds	r3, #6
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4a09      	ldr	r2, [pc, #36]	; (8001cec <HAL_NVIC_SetPriority+0x60>)
 8001cc6:	4694      	mov	ip, r2
 8001cc8:	4463      	add	r3, ip
 8001cca:	685d      	ldr	r5, [r3, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4010      	ands	r0, r2
 8001cd0:	00c0      	lsls	r0, r0, #3
 8001cd2:	24ff      	movs	r4, #255	; 0xff
 8001cd4:	0022      	movs	r2, r4
 8001cd6:	4082      	lsls	r2, r0
 8001cd8:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cda:	0189      	lsls	r1, r1, #6
 8001cdc:	400c      	ands	r4, r1
 8001cde:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce0:	432c      	orrs	r4, r5
 8001ce2:	605c      	str	r4, [r3, #4]
 8001ce4:	e7e6      	b.n	8001cb4 <HAL_NVIC_SetPriority+0x28>
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001cf0:	231f      	movs	r3, #31
 8001cf2:	4018      	ands	r0, r3
 8001cf4:	3b1e      	subs	r3, #30
 8001cf6:	4083      	lsls	r3, r0
 8001cf8:	4a01      	ldr	r2, [pc, #4]	; (8001d00 <HAL_NVIC_EnableIRQ+0x10>)
 8001cfa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cfc:	4770      	bx	lr
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d04:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d06:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001d08:	2401      	movs	r4, #1
 8001d0a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001d0c:	40b4      	lsls	r4, r6
 8001d0e:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d10:	6804      	ldr	r4, [r0, #0]
 8001d12:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d14:	6843      	ldr	r3, [r0, #4]
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d004      	beq.n	8001d24 <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001d1a:	6803      	ldr	r3, [r0, #0]
 8001d1c:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001d1e:	6803      	ldr	r3, [r0, #0]
 8001d20:	60da      	str	r2, [r3, #12]
  }
}
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8001d24:	6803      	ldr	r3, [r0, #0]
 8001d26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001d28:	6803      	ldr	r3, [r0, #0]
 8001d2a:	60d9      	str	r1, [r3, #12]
 8001d2c:	e7f9      	b.n	8001d22 <DMA_SetConfig+0x1e>
	...

08001d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d30:	b510      	push	{r4, lr}
 8001d32:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d34:	6803      	ldr	r3, [r0, #0]
 8001d36:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <DMA_CalcBaseAndBitshift+0x20>)
 8001d38:	4694      	mov	ip, r2
 8001d3a:	4463      	add	r3, ip
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	2114      	movs	r1, #20
 8001d40:	f7fe f9e2 	bl	8000108 <__udivsi3>
 8001d44:	0080      	lsls	r0, r0, #2
 8001d46:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <DMA_CalcBaseAndBitshift+0x24>)
 8001d4a:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 8001d4c:	bd10      	pop	{r4, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	bffdfff8 	.word	0xbffdfff8
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_DMA_Init>:
{ 
 8001d58:	b570      	push	{r4, r5, r6, lr}
 8001d5a:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 8001d5c:	d024      	beq.n	8001da8 <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d5e:	2521      	movs	r5, #33	; 0x21
 8001d60:	2302      	movs	r3, #2
 8001d62:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 8001d64:	6801      	ldr	r1, [r0, #0]
 8001d66:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d68:	4a10      	ldr	r2, [pc, #64]	; (8001dac <HAL_DMA_Init+0x54>)
 8001d6a:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001d6c:	6843      	ldr	r3, [r0, #4]
 8001d6e:	6880      	ldr	r0, [r0, #8]
 8001d70:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d72:	68e0      	ldr	r0, [r4, #12]
 8001d74:	4303      	orrs	r3, r0
 8001d76:	6920      	ldr	r0, [r4, #16]
 8001d78:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7a:	6960      	ldr	r0, [r4, #20]
 8001d7c:	4303      	orrs	r3, r0
 8001d7e:	69a0      	ldr	r0, [r4, #24]
 8001d80:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d82:	69e0      	ldr	r0, [r4, #28]
 8001d84:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001d86:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001d88:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001d8a:	0020      	movs	r0, r4
 8001d8c:	f7ff ffd0 	bl	8001d30 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001d94:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001d96:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001d98:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9a:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8001da0:	321f      	adds	r2, #31
 8001da2:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001da4:	2000      	movs	r0, #0
}  
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001da8:	2001      	movs	r0, #1
 8001daa:	e7fc      	b.n	8001da6 <HAL_DMA_Init+0x4e>
 8001dac:	ffffc00f 	.word	0xffffc00f

08001db0 <HAL_DMA_Start_IT>:
{
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001db4:	2020      	movs	r0, #32
 8001db6:	5c20      	ldrb	r0, [r4, r0]
 8001db8:	2801      	cmp	r0, #1
 8001dba:	d032      	beq.n	8001e22 <HAL_DMA_Start_IT+0x72>
 8001dbc:	2501      	movs	r5, #1
 8001dbe:	2020      	movs	r0, #32
 8001dc0:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dc2:	3001      	adds	r0, #1
 8001dc4:	5c20      	ldrb	r0, [r4, r0]
 8001dc6:	2801      	cmp	r0, #1
 8001dc8:	d004      	beq.n	8001dd4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2320      	movs	r3, #32
 8001dce:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8001dd0:	2002      	movs	r0, #2
} 
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001dd4:	3501      	adds	r5, #1
 8001dd6:	3020      	adds	r0, #32
 8001dd8:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dda:	2000      	movs	r0, #0
 8001ddc:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001dde:	6825      	ldr	r5, [r4, #0]
 8001de0:	6828      	ldr	r0, [r5, #0]
 8001de2:	2601      	movs	r6, #1
 8001de4:	43b0      	bics	r0, r6
 8001de6:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de8:	0020      	movs	r0, r4
 8001dea:	f7ff ff8b 	bl	8001d04 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001dee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001df4:	6822      	ldr	r2, [r4, #0]
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	210e      	movs	r1, #14
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001dfe:	6822      	ldr	r2, [r4, #0]
 8001e00:	6813      	ldr	r3, [r2, #0]
 8001e02:	2101      	movs	r1, #1
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2000      	movs	r0, #0
 8001e0a:	e7e2      	b.n	8001dd2 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001e0c:	6822      	ldr	r2, [r4, #0]
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	210a      	movs	r1, #10
 8001e12:	430b      	orrs	r3, r1
 8001e14:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e16:	6822      	ldr	r2, [r4, #0]
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	3906      	subs	r1, #6
 8001e1c:	438b      	bics	r3, r1
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	e7ed      	b.n	8001dfe <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001e22:	2002      	movs	r0, #2
 8001e24:	e7d5      	b.n	8001dd2 <HAL_DMA_Start_IT+0x22>

08001e26 <HAL_DMA_IRQHandler>:
{
 8001e26:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e28:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001e2a:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e2c:	6804      	ldr	r4, [r0, #0]
 8001e2e:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e30:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e32:	2304      	movs	r3, #4
 8001e34:	408b      	lsls	r3, r1
 8001e36:	4213      	tst	r3, r2
 8001e38:	d012      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x3a>
 8001e3a:	076b      	lsls	r3, r5, #29
 8001e3c:	d510      	bpl.n	8001e60 <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	069b      	lsls	r3, r3, #26
 8001e42:	d403      	bmi.n	8001e4c <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	2204      	movs	r2, #4
 8001e48:	4393      	bics	r3, r2
 8001e4a:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001e4e:	2304      	movs	r3, #4
 8001e50:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e52:	408b      	lsls	r3, r1
 8001e54:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d000      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8001e5c:	4798      	blx	r3
}  
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e60:	2302      	movs	r3, #2
 8001e62:	408b      	lsls	r3, r1
 8001e64:	4213      	tst	r3, r2
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x74>
 8001e68:	07ab      	lsls	r3, r5, #30
 8001e6a:	d516      	bpl.n	8001e9a <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	069b      	lsls	r3, r3, #26
 8001e70:	d406      	bmi.n	8001e80 <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	220a      	movs	r2, #10
 8001e76:	4393      	bics	r3, r2
 8001e78:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	3a09      	subs	r2, #9
 8001e7c:	2321      	movs	r3, #33	; 0x21
 8001e7e:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001e82:	2302      	movs	r3, #2
 8001e84:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e86:	408b      	lsls	r3, r1
 8001e88:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8001e90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0e3      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 8001e96:	4798      	blx	r3
 8001e98:	e7e1      	b.n	8001e5e <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	408b      	lsls	r3, r1
 8001e9e:	4213      	tst	r3, r2
 8001ea0:	d0dd      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x38>
 8001ea2:	072b      	lsls	r3, r5, #28
 8001ea4:	d5db      	bpl.n	8001e5e <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	220e      	movs	r2, #14
 8001eaa:	4393      	bics	r3, r2
 8001eac:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001eae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001eb6:	40a1      	lsls	r1, r4
 8001eb8:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001eba:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001ebc:	2221      	movs	r2, #33	; 0x21
 8001ebe:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	331f      	adds	r3, #31
 8001ec4:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8001ec6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0c8      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8001ecc:	4798      	blx	r3
}  
 8001ece:	e7c6      	b.n	8001e5e <HAL_DMA_IRQHandler+0x38>

08001ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed2:	46c6      	mov	lr, r8
 8001ed4:	b500      	push	{lr}
 8001ed6:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8001ed8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001eda:	e07e      	b.n	8001fda <HAL_GPIO_Init+0x10a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001edc:	08df      	lsrs	r7, r3, #3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	00bf      	lsls	r7, r7, #2
 8001ee2:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001ee4:	2507      	movs	r5, #7
 8001ee6:	401d      	ands	r5, r3
 8001ee8:	00ad      	lsls	r5, r5, #2
 8001eea:	240f      	movs	r4, #15
 8001eec:	40ac      	lsls	r4, r5
 8001eee:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001ef0:	690c      	ldr	r4, [r1, #16]
 8001ef2:	40ac      	lsls	r4, r5
 8001ef4:	0025      	movs	r5, r4
 8001ef6:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001ef8:	503d      	str	r5, [r7, r0]
 8001efa:	e07e      	b.n	8001ffa <HAL_GPIO_Init+0x12a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efc:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001efe:	4664      	mov	r4, ip
 8001f00:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001f02:	68ce      	ldr	r6, [r1, #12]
 8001f04:	40be      	lsls	r6, r7
 8001f06:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001f08:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f0a:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	002c      	movs	r4, r5
 8001f0e:	4645      	mov	r5, r8
 8001f10:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f12:	684d      	ldr	r5, [r1, #4]
 8001f14:	092e      	lsrs	r6, r5, #4
 8001f16:	2501      	movs	r5, #1
 8001f18:	4035      	ands	r5, r6
 8001f1a:	409d      	lsls	r5, r3
 8001f1c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001f1e:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f20:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f22:	4665      	mov	r5, ip
 8001f24:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001f26:	688d      	ldr	r5, [r1, #8]
 8001f28:	40bd      	lsls	r5, r7
 8001f2a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001f2c:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001f2e:	684c      	ldr	r4, [r1, #4]
 8001f30:	00e4      	lsls	r4, r4, #3
 8001f32:	d551      	bpl.n	8001fd8 <HAL_GPIO_Init+0x108>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	4d43      	ldr	r5, [pc, #268]	; (8002044 <HAL_GPIO_Init+0x174>)
 8001f36:	69ae      	ldr	r6, [r5, #24]
 8001f38:	2401      	movs	r4, #1
 8001f3a:	4326      	orrs	r6, r4
 8001f3c:	61ae      	str	r6, [r5, #24]
 8001f3e:	69ad      	ldr	r5, [r5, #24]
 8001f40:	402c      	ands	r4, r5
 8001f42:	9401      	str	r4, [sp, #4]
 8001f44:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001f46:	089c      	lsrs	r4, r3, #2
 8001f48:	1ca5      	adds	r5, r4, #2
 8001f4a:	00ad      	lsls	r5, r5, #2
 8001f4c:	4e3e      	ldr	r6, [pc, #248]	; (8002048 <HAL_GPIO_Init+0x178>)
 8001f4e:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001f50:	2503      	movs	r5, #3
 8001f52:	401d      	ands	r5, r3
 8001f54:	00ad      	lsls	r5, r5, #2
 8001f56:	270f      	movs	r7, #15
 8001f58:	40af      	lsls	r7, r5
 8001f5a:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5c:	2790      	movs	r7, #144	; 0x90
 8001f5e:	05ff      	lsls	r7, r7, #23
 8001f60:	42b8      	cmp	r0, r7
 8001f62:	d065      	beq.n	8002030 <HAL_GPIO_Init+0x160>
 8001f64:	4f39      	ldr	r7, [pc, #228]	; (800204c <HAL_GPIO_Init+0x17c>)
 8001f66:	42b8      	cmp	r0, r7
 8001f68:	d064      	beq.n	8002034 <HAL_GPIO_Init+0x164>
 8001f6a:	4f39      	ldr	r7, [pc, #228]	; (8002050 <HAL_GPIO_Init+0x180>)
 8001f6c:	42b8      	cmp	r0, r7
 8001f6e:	d063      	beq.n	8002038 <HAL_GPIO_Init+0x168>
 8001f70:	4f38      	ldr	r7, [pc, #224]	; (8002054 <HAL_GPIO_Init+0x184>)
 8001f72:	42b8      	cmp	r0, r7
 8001f74:	d05a      	beq.n	800202c <HAL_GPIO_Init+0x15c>
 8001f76:	2705      	movs	r7, #5
 8001f78:	40af      	lsls	r7, r5
 8001f7a:	003d      	movs	r5, r7
 8001f7c:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f7e:	3402      	adds	r4, #2
 8001f80:	00a4      	lsls	r4, r4, #2
 8001f82:	4e31      	ldr	r6, [pc, #196]	; (8002048 <HAL_GPIO_Init+0x178>)
 8001f84:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f86:	4c34      	ldr	r4, [pc, #208]	; (8002058 <HAL_GPIO_Init+0x188>)
 8001f88:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f8a:	43d4      	mvns	r4, r2
 8001f8c:	0026      	movs	r6, r4
 8001f8e:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f90:	684f      	ldr	r7, [r1, #4]
 8001f92:	03ff      	lsls	r7, r7, #15
 8001f94:	d501      	bpl.n	8001f9a <HAL_GPIO_Init+0xca>
        {
          SET_BIT(temp, iocurrent); 
 8001f96:	4315      	orrs	r5, r2
 8001f98:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8001f9a:	4d2f      	ldr	r5, [pc, #188]	; (8002058 <HAL_GPIO_Init+0x188>)
 8001f9c:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001f9e:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001fa0:	002e      	movs	r6, r5
 8001fa2:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa4:	684f      	ldr	r7, [r1, #4]
 8001fa6:	03bf      	lsls	r7, r7, #14
 8001fa8:	d501      	bpl.n	8001fae <HAL_GPIO_Init+0xde>
        { 
          SET_BIT(temp, iocurrent); 
 8001faa:	4315      	orrs	r5, r2
 8001fac:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8001fae:	4d2a      	ldr	r5, [pc, #168]	; (8002058 <HAL_GPIO_Init+0x188>)
 8001fb0:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001fb4:	002e      	movs	r6, r5
 8001fb6:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb8:	684f      	ldr	r7, [r1, #4]
 8001fba:	02ff      	lsls	r7, r7, #11
 8001fbc:	d501      	bpl.n	8001fc2 <HAL_GPIO_Init+0xf2>
        {
          SET_BIT(temp, iocurrent); 
 8001fbe:	4315      	orrs	r5, r2
 8001fc0:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8001fc2:	4d25      	ldr	r5, [pc, #148]	; (8002058 <HAL_GPIO_Init+0x188>)
 8001fc4:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001fc6:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001fc8:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fca:	684e      	ldr	r6, [r1, #4]
 8001fcc:	02b6      	lsls	r6, r6, #10
 8001fce:	d501      	bpl.n	8001fd4 <HAL_GPIO_Init+0x104>
        {
          SET_BIT(temp, iocurrent); 
 8001fd0:	432a      	orrs	r2, r5
 8001fd2:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_GPIO_Init+0x188>)
 8001fd6:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001fd8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001fda:	680a      	ldr	r2, [r1, #0]
 8001fdc:	0014      	movs	r4, r2
 8001fde:	40dc      	lsrs	r4, r3
 8001fe0:	d02c      	beq.n	800203c <HAL_GPIO_Init+0x16c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001fe2:	2401      	movs	r4, #1
 8001fe4:	409c      	lsls	r4, r3
 8001fe6:	46a0      	mov	r8, r4
 8001fe8:	4022      	ands	r2, r4
    if(iocurrent)
 8001fea:	d0f5      	beq.n	8001fd8 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001fec:	684d      	ldr	r5, [r1, #4]
 8001fee:	2d02      	cmp	r5, #2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_GPIO_Init+0x124>
 8001ff2:	e773      	b.n	8001edc <HAL_GPIO_Init+0xc>
 8001ff4:	2d12      	cmp	r5, #18
 8001ff6:	d100      	bne.n	8001ffa <HAL_GPIO_Init+0x12a>
 8001ff8:	e770      	b.n	8001edc <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 8001ffa:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001ffc:	005f      	lsls	r7, r3, #1
 8001ffe:	2503      	movs	r5, #3
 8002000:	002c      	movs	r4, r5
 8002002:	40bc      	lsls	r4, r7
 8002004:	43e4      	mvns	r4, r4
 8002006:	46a4      	mov	ip, r4
 8002008:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200a:	684c      	ldr	r4, [r1, #4]
 800200c:	4025      	ands	r5, r4
 800200e:	40bd      	lsls	r5, r7
 8002010:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8002012:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002014:	684d      	ldr	r5, [r1, #4]
 8002016:	1e6e      	subs	r6, r5, #1
 8002018:	2e01      	cmp	r6, #1
 800201a:	d800      	bhi.n	800201e <HAL_GPIO_Init+0x14e>
 800201c:	e76e      	b.n	8001efc <HAL_GPIO_Init+0x2c>
 800201e:	2d11      	cmp	r5, #17
 8002020:	d100      	bne.n	8002024 <HAL_GPIO_Init+0x154>
 8002022:	e76b      	b.n	8001efc <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002024:	2d12      	cmp	r5, #18
 8002026:	d000      	beq.n	800202a <HAL_GPIO_Init+0x15a>
 8002028:	e77a      	b.n	8001f20 <HAL_GPIO_Init+0x50>
 800202a:	e767      	b.n	8001efc <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202c:	2703      	movs	r7, #3
 800202e:	e7a3      	b.n	8001f78 <HAL_GPIO_Init+0xa8>
 8002030:	2700      	movs	r7, #0
 8002032:	e7a1      	b.n	8001f78 <HAL_GPIO_Init+0xa8>
 8002034:	2701      	movs	r7, #1
 8002036:	e79f      	b.n	8001f78 <HAL_GPIO_Init+0xa8>
 8002038:	2702      	movs	r7, #2
 800203a:	e79d      	b.n	8001f78 <HAL_GPIO_Init+0xa8>
  } 
}
 800203c:	b002      	add	sp, #8
 800203e:	bc04      	pop	{r2}
 8002040:	4690      	mov	r8, r2
 8002042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000
 800204c:	48000400 	.word	0x48000400
 8002050:	48000800 	.word	0x48000800
 8002054:	48000c00 	.word	0x48000c00
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800205c:	6903      	ldr	r3, [r0, #16]
 800205e:	420b      	tst	r3, r1
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002062:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 8002064:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8002066:	2001      	movs	r0, #1
 8002068:	e7fc      	b.n	8002064 <HAL_GPIO_ReadPin+0x8>

0800206a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206a:	2a00      	cmp	r2, #0
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800206e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002070:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002072:	6181      	str	r1, [r0, #24]
 8002074:	e7fc      	b.n	8002070 <HAL_GPIO_WritePin+0x6>
	...

08002078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	6803      	ldr	r3, [r0, #0]
 8002080:	07db      	lsls	r3, r3, #31
 8002082:	d536      	bpl.n	80020f2 <HAL_RCC_OscConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002084:	4bc1      	ldr	r3, [pc, #772]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	230c      	movs	r3, #12
 800208a:	4013      	ands	r3, r2
 800208c:	2b04      	cmp	r3, #4
 800208e:	d028      	beq.n	80020e2 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002090:	4bbe      	ldr	r3, [pc, #760]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	230c      	movs	r3, #12
 8002096:	4013      	ands	r3, r2
 8002098:	2b08      	cmp	r3, #8
 800209a:	d01e      	beq.n	80020da <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209c:	6863      	ldr	r3, [r4, #4]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d04b      	beq.n	800213a <HAL_RCC_OscConfig+0xc2>
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d150      	bne.n	8002148 <HAL_RCC_OscConfig+0xd0>
 80020a6:	4bb9      	ldr	r3, [pc, #740]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	49b9      	ldr	r1, [pc, #740]	; (8002390 <HAL_RCC_OscConfig+0x318>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	49b8      	ldr	r1, [pc, #736]	; (8002394 <HAL_RCC_OscConfig+0x31c>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b8:	6863      	ldr	r3, [r4, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d05c      	beq.n	8002178 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020be:	f7ff fb77 	bl	80017b0 <HAL_GetTick>
 80020c2:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c4:	4bb1      	ldr	r3, [pc, #708]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	039b      	lsls	r3, r3, #14
 80020ca:	d412      	bmi.n	80020f2 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff fb70 	bl	80017b0 <HAL_GetTick>
 80020d0:	1b40      	subs	r0, r0, r5
 80020d2:	2864      	cmp	r0, #100	; 0x64
 80020d4:	d9f6      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 80020d6:	2003      	movs	r0, #3
 80020d8:	e1ea      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020da:	4bac      	ldr	r3, [pc, #688]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	03db      	lsls	r3, r3, #15
 80020e0:	d5dc      	bpl.n	800209c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e2:	4baa      	ldr	r3, [pc, #680]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	039b      	lsls	r3, r3, #14
 80020e8:	d503      	bpl.n	80020f2 <HAL_RCC_OscConfig+0x7a>
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d100      	bne.n	80020f2 <HAL_RCC_OscConfig+0x7a>
 80020f0:	e1db      	b.n	80024aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	079b      	lsls	r3, r3, #30
 80020f6:	d562      	bpl.n	80021be <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020f8:	4ba4      	ldr	r3, [pc, #656]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	220c      	movs	r2, #12
 80020fe:	421a      	tst	r2, r3
 8002100:	d04c      	beq.n	800219c <HAL_RCC_OscConfig+0x124>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002102:	4ba2      	ldr	r3, [pc, #648]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	230c      	movs	r3, #12
 8002108:	4013      	ands	r3, r2
 800210a:	2b08      	cmp	r3, #8
 800210c:	d042      	beq.n	8002194 <HAL_RCC_OscConfig+0x11c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800210e:	68e3      	ldr	r3, [r4, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d076      	beq.n	8002202 <HAL_RCC_OscConfig+0x18a>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4a9d      	ldr	r2, [pc, #628]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002116:	6813      	ldr	r3, [r2, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	430b      	orrs	r3, r1
 800211c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7ff fb47 	bl	80017b0 <HAL_GetTick>
 8002122:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	4b99      	ldr	r3, [pc, #612]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	079b      	lsls	r3, r3, #30
 800212a:	d461      	bmi.n	80021f0 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff fb40 	bl	80017b0 <HAL_GetTick>
 8002130:	1b40      	subs	r0, r0, r5
 8002132:	2802      	cmp	r0, #2
 8002134:	d9f6      	bls.n	8002124 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8002136:	2003      	movs	r0, #3
 8002138:	e1ba      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213a:	4a94      	ldr	r2, [pc, #592]	; (800238c <HAL_RCC_OscConfig+0x314>)
 800213c:	6811      	ldr	r1, [r2, #0]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	430b      	orrs	r3, r1
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e7b7      	b.n	80020b8 <HAL_RCC_OscConfig+0x40>
 8002148:	2b05      	cmp	r3, #5
 800214a:	d009      	beq.n	8002160 <HAL_RCC_OscConfig+0xe8>
 800214c:	4b8f      	ldr	r3, [pc, #572]	; (800238c <HAL_RCC_OscConfig+0x314>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	498f      	ldr	r1, [pc, #572]	; (8002390 <HAL_RCC_OscConfig+0x318>)
 8002152:	400a      	ands	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	498e      	ldr	r1, [pc, #568]	; (8002394 <HAL_RCC_OscConfig+0x31c>)
 800215a:	400a      	ands	r2, r1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e7ab      	b.n	80020b8 <HAL_RCC_OscConfig+0x40>
 8002160:	4b8a      	ldr	r3, [pc, #552]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	02d2      	lsls	r2, r2, #11
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	0252      	lsls	r2, r2, #9
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e79f      	b.n	80020b8 <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 8002178:	f7ff fb1a 	bl	80017b0 <HAL_GetTick>
 800217c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	4b83      	ldr	r3, [pc, #524]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	039b      	lsls	r3, r3, #14
 8002184:	d5b5      	bpl.n	80020f2 <HAL_RCC_OscConfig+0x7a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002186:	f7ff fb13 	bl	80017b0 <HAL_GetTick>
 800218a:	1b40      	subs	r0, r0, r5
 800218c:	2864      	cmp	r0, #100	; 0x64
 800218e:	d9f6      	bls.n	800217e <HAL_RCC_OscConfig+0x106>
            return HAL_TIMEOUT;
 8002190:	2003      	movs	r0, #3
 8002192:	e18d      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002194:	4b7d      	ldr	r3, [pc, #500]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	03db      	lsls	r3, r3, #15
 800219a:	d4b8      	bmi.n	800210e <HAL_RCC_OscConfig+0x96>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219c:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_RCC_OscConfig+0x314>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	079b      	lsls	r3, r3, #30
 80021a2:	d504      	bpl.n	80021ae <HAL_RCC_OscConfig+0x136>
 80021a4:	68e3      	ldr	r3, [r4, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d001      	beq.n	80021ae <HAL_RCC_OscConfig+0x136>
        return HAL_ERROR;
 80021aa:	2001      	movs	r0, #1
 80021ac:	e180      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4977      	ldr	r1, [pc, #476]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80021b0:	680b      	ldr	r3, [r1, #0]
 80021b2:	22f8      	movs	r2, #248	; 0xf8
 80021b4:	4393      	bics	r3, r2
 80021b6:	6922      	ldr	r2, [r4, #16]
 80021b8:	00d2      	lsls	r2, r2, #3
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	071b      	lsls	r3, r3, #28
 80021c2:	d544      	bpl.n	800224e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021c4:	69e3      	ldr	r3, [r4, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d02e      	beq.n	8002228 <HAL_RCC_OscConfig+0x1b0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ca:	4a70      	ldr	r2, [pc, #448]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80021cc:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80021ce:	2101      	movs	r1, #1
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7ff faec 	bl	80017b0 <HAL_GetTick>
 80021d8:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	4b6c      	ldr	r3, [pc, #432]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	079b      	lsls	r3, r3, #30
 80021e0:	d435      	bmi.n	800224e <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e2:	f7ff fae5 	bl	80017b0 <HAL_GetTick>
 80021e6:	1b40      	subs	r0, r0, r5
 80021e8:	2802      	cmp	r0, #2
 80021ea:	d9f6      	bls.n	80021da <HAL_RCC_OscConfig+0x162>
        {
          return HAL_TIMEOUT;
 80021ec:	2003      	movs	r0, #3
 80021ee:	e15f      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4966      	ldr	r1, [pc, #408]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80021f2:	680b      	ldr	r3, [r1, #0]
 80021f4:	22f8      	movs	r2, #248	; 0xf8
 80021f6:	4393      	bics	r3, r2
 80021f8:	6922      	ldr	r2, [r4, #16]
 80021fa:	00d2      	lsls	r2, r2, #3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e7dd      	b.n	80021be <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8002202:	4a62      	ldr	r2, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002204:	6813      	ldr	r3, [r2, #0]
 8002206:	2101      	movs	r1, #1
 8002208:	438b      	bics	r3, r1
 800220a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800220c:	f7ff fad0 	bl	80017b0 <HAL_GetTick>
 8002210:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	4b5e      	ldr	r3, [pc, #376]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	079b      	lsls	r3, r3, #30
 8002218:	d5d1      	bpl.n	80021be <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7ff fac9 	bl	80017b0 <HAL_GetTick>
 800221e:	1b40      	subs	r0, r0, r5
 8002220:	2802      	cmp	r0, #2
 8002222:	d9f6      	bls.n	8002212 <HAL_RCC_OscConfig+0x19a>
            return HAL_TIMEOUT;
 8002224:	2003      	movs	r0, #3
 8002226:	e143      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002228:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_OscConfig+0x314>)
 800222a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800222c:	2101      	movs	r1, #1
 800222e:	438b      	bics	r3, r1
 8002230:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7ff fabd 	bl	80017b0 <HAL_GetTick>
 8002236:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	4b54      	ldr	r3, [pc, #336]	; (800238c <HAL_RCC_OscConfig+0x314>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	079b      	lsls	r3, r3, #30
 800223e:	d506      	bpl.n	800224e <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff fab6 	bl	80017b0 <HAL_GetTick>
 8002244:	1b40      	subs	r0, r0, r5
 8002246:	2802      	cmp	r0, #2
 8002248:	d9f6      	bls.n	8002238 <HAL_RCC_OscConfig+0x1c0>
        {
          return HAL_TIMEOUT;
 800224a:	2003      	movs	r0, #3
 800224c:	e130      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	075b      	lsls	r3, r3, #29
 8002252:	d575      	bpl.n	8002340 <HAL_RCC_OscConfig+0x2c8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002254:	4b4d      	ldr	r3, [pc, #308]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	d42e      	bmi.n	80022ba <HAL_RCC_OscConfig+0x242>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	4a4b      	ldr	r2, [pc, #300]	; (800238c <HAL_RCC_OscConfig+0x314>)
 800225e:	69d1      	ldr	r1, [r2, #28]
 8002260:	2080      	movs	r0, #128	; 0x80
 8002262:	0540      	lsls	r0, r0, #21
 8002264:	4301      	orrs	r1, r0
 8002266:	61d1      	str	r1, [r2, #28]
 8002268:	69d3      	ldr	r3, [r2, #28]
 800226a:	4003      	ands	r3, r0
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002270:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCC_OscConfig+0x320>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	05db      	lsls	r3, r3, #23
 8002278:	d521      	bpl.n	80022be <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227a:	68a3      	ldr	r3, [r4, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d032      	beq.n	80022e6 <HAL_RCC_OscConfig+0x26e>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d136      	bne.n	80022f2 <HAL_RCC_OscConfig+0x27a>
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	2101      	movs	r1, #1
 800228a:	438a      	bics	r2, r1
 800228c:	621a      	str	r2, [r3, #32]
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	3103      	adds	r1, #3
 8002292:	438a      	bics	r2, r1
 8002294:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002296:	68a3      	ldr	r3, [r4, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d040      	beq.n	800231e <HAL_RCC_OscConfig+0x2a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7ff fa88 	bl	80017b0 <HAL_GetTick>
 80022a0:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a2:	4b3a      	ldr	r3, [pc, #232]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	079b      	lsls	r3, r3, #30
 80022a8:	d448      	bmi.n	800233c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7ff fa81 	bl	80017b0 <HAL_GetTick>
 80022ae:	1b80      	subs	r0, r0, r6
 80022b0:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCC_OscConfig+0x324>)
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d9f5      	bls.n	80022a2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80022b6:	2003      	movs	r0, #3
 80022b8:	e0fa      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	2500      	movs	r5, #0
 80022bc:	e7d9      	b.n	8002272 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4a36      	ldr	r2, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x320>)
 80022c0:	6811      	ldr	r1, [r2, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	430b      	orrs	r3, r1
 80022c8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022ca:	f7ff fa71 	bl	80017b0 <HAL_GetTick>
 80022ce:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b31      	ldr	r3, [pc, #196]	; (8002398 <HAL_RCC_OscConfig+0x320>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	05db      	lsls	r3, r3, #23
 80022d6:	d4d0      	bmi.n	800227a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7ff fa6a 	bl	80017b0 <HAL_GetTick>
 80022dc:	1b80      	subs	r0, r0, r6
 80022de:	2864      	cmp	r0, #100	; 0x64
 80022e0:	d9f6      	bls.n	80022d0 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80022e2:	2003      	movs	r0, #3
 80022e4:	e0e4      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e6:	4a29      	ldr	r2, [pc, #164]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80022e8:	6a13      	ldr	r3, [r2, #32]
 80022ea:	2101      	movs	r1, #1
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	e7d1      	b.n	8002296 <HAL_RCC_OscConfig+0x21e>
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d009      	beq.n	800230a <HAL_RCC_OscConfig+0x292>
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_RCC_OscConfig+0x314>)
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	2101      	movs	r1, #1
 80022fc:	438a      	bics	r2, r1
 80022fe:	621a      	str	r2, [r3, #32]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	3103      	adds	r1, #3
 8002304:	438a      	bics	r2, r1
 8002306:	621a      	str	r2, [r3, #32]
 8002308:	e7c5      	b.n	8002296 <HAL_RCC_OscConfig+0x21e>
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_RCC_OscConfig+0x314>)
 800230c:	6a1a      	ldr	r2, [r3, #32]
 800230e:	2104      	movs	r1, #4
 8002310:	430a      	orrs	r2, r1
 8002312:	621a      	str	r2, [r3, #32]
 8002314:	6a1a      	ldr	r2, [r3, #32]
 8002316:	3903      	subs	r1, #3
 8002318:	430a      	orrs	r2, r1
 800231a:	621a      	str	r2, [r3, #32]
 800231c:	e7bb      	b.n	8002296 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7ff fa47 	bl	80017b0 <HAL_GetTick>
 8002322:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	079b      	lsls	r3, r3, #30
 800232a:	d507      	bpl.n	800233c <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7ff fa40 	bl	80017b0 <HAL_GetTick>
 8002330:	1b80      	subs	r0, r0, r6
 8002332:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HAL_RCC_OscConfig+0x324>)
 8002334:	4298      	cmp	r0, r3
 8002336:	d9f5      	bls.n	8002324 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002338:	2003      	movs	r0, #3
 800233a:	e0b9      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800233c:	2d01      	cmp	r5, #1
 800233e:	d01e      	beq.n	800237e <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	06db      	lsls	r3, r3, #27
 8002344:	d55a      	bpl.n	80023fc <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002346:	6963      	ldr	r3, [r4, #20]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d02b      	beq.n	80023a4 <HAL_RCC_OscConfig+0x32c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800234c:	3305      	adds	r3, #5
 800234e:	d049      	beq.n	80023e4 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002354:	2104      	movs	r1, #4
 8002356:	430a      	orrs	r2, r1
 8002358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800235a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235c:	3903      	subs	r1, #3
 800235e:	438a      	bics	r2, r1
 8002360:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7ff fa25 	bl	80017b0 <HAL_GetTick>
 8002366:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_RCC_OscConfig+0x314>)
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	079b      	lsls	r3, r3, #30
 800236e:	d545      	bpl.n	80023fc <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002370:	f7ff fa1e 	bl	80017b0 <HAL_GetTick>
 8002374:	1b40      	subs	r0, r0, r5
 8002376:	2802      	cmp	r0, #2
 8002378:	d9f6      	bls.n	8002368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800237a:	2003      	movs	r0, #3
 800237c:	e098      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4a03      	ldr	r2, [pc, #12]	; (800238c <HAL_RCC_OscConfig+0x314>)
 8002380:	69d3      	ldr	r3, [r2, #28]
 8002382:	4907      	ldr	r1, [pc, #28]	; (80023a0 <HAL_RCC_OscConfig+0x328>)
 8002384:	400b      	ands	r3, r1
 8002386:	61d3      	str	r3, [r2, #28]
 8002388:	e7da      	b.n	8002340 <HAL_RCC_OscConfig+0x2c8>
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	40021000 	.word	0x40021000
 8002390:	fffeffff 	.word	0xfffeffff
 8002394:	fffbffff 	.word	0xfffbffff
 8002398:	40007000 	.word	0x40007000
 800239c:	00001388 	.word	0x00001388
 80023a0:	efffffff 	.word	0xefffffff
      __HAL_RCC_HSI14ADC_DISABLE();
 80023a4:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 80023a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a8:	2104      	movs	r1, #4
 80023aa:	430a      	orrs	r2, r1
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80023ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b0:	3903      	subs	r1, #3
 80023b2:	430a      	orrs	r2, r1
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80023b6:	f7ff f9fb 	bl	80017b0 <HAL_GetTick>
 80023ba:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023bc:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	079b      	lsls	r3, r3, #30
 80023c2:	d406      	bmi.n	80023d2 <HAL_RCC_OscConfig+0x35a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023c4:	f7ff f9f4 	bl	80017b0 <HAL_GetTick>
 80023c8:	1b40      	subs	r0, r0, r5
 80023ca:	2802      	cmp	r0, #2
 80023cc:	d9f6      	bls.n	80023bc <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
 80023ce:	2003      	movs	r0, #3
 80023d0:	e06e      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023d2:	4939      	ldr	r1, [pc, #228]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 80023d4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80023d6:	22f8      	movs	r2, #248	; 0xf8
 80023d8:	4393      	bics	r3, r2
 80023da:	69a2      	ldr	r2, [r4, #24]
 80023dc:	00d2      	lsls	r2, r2, #3
 80023de:	4313      	orrs	r3, r2
 80023e0:	634b      	str	r3, [r1, #52]	; 0x34
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSI14ADC_ENABLE();
 80023e4:	4a34      	ldr	r2, [pc, #208]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 80023e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80023e8:	2104      	movs	r1, #4
 80023ea:	438b      	bics	r3, r1
 80023ec:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023ee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80023f0:	31f4      	adds	r1, #244	; 0xf4
 80023f2:	438b      	bics	r3, r1
 80023f4:	69a1      	ldr	r1, [r4, #24]
 80023f6:	00c9      	lsls	r1, r1, #3
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fc:	6a23      	ldr	r3, [r4, #32]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d055      	beq.n	80024ae <HAL_RCC_OscConfig+0x436>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002402:	4a2d      	ldr	r2, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 8002404:	6851      	ldr	r1, [r2, #4]
 8002406:	220c      	movs	r2, #12
 8002408:	400a      	ands	r2, r1
 800240a:	2a08      	cmp	r2, #8
 800240c:	d052      	beq.n	80024b4 <HAL_RCC_OscConfig+0x43c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240e:	2b02      	cmp	r3, #2
 8002410:	d012      	beq.n	8002438 <HAL_RCC_OscConfig+0x3c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 8002414:	6813      	ldr	r3, [r2, #0]
 8002416:	4929      	ldr	r1, [pc, #164]	; (80024bc <HAL_RCC_OscConfig+0x444>)
 8002418:	400b      	ands	r3, r1
 800241a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff f9c8 	bl	80017b0 <HAL_GetTick>
 8002420:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	d53d      	bpl.n	80024a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242a:	f7ff f9c1 	bl	80017b0 <HAL_GetTick>
 800242e:	1b00      	subs	r0, r0, r4
 8002430:	2802      	cmp	r0, #2
 8002432:	d9f6      	bls.n	8002422 <HAL_RCC_OscConfig+0x3aa>
          {
            return HAL_TIMEOUT;
 8002434:	2003      	movs	r0, #3
 8002436:	e03b      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_DISABLE();
 8002438:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	491f      	ldr	r1, [pc, #124]	; (80024bc <HAL_RCC_OscConfig+0x444>)
 800243e:	400b      	ands	r3, r1
 8002440:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002442:	f7ff f9b5 	bl	80017b0 <HAL_GetTick>
 8002446:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	019b      	lsls	r3, r3, #6
 800244e:	d506      	bpl.n	800245e <HAL_RCC_OscConfig+0x3e6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7ff f9ae 	bl	80017b0 <HAL_GetTick>
 8002454:	1b40      	subs	r0, r0, r5
 8002456:	2802      	cmp	r0, #2
 8002458:	d9f6      	bls.n	8002448 <HAL_RCC_OscConfig+0x3d0>
            return HAL_TIMEOUT;
 800245a:	2003      	movs	r0, #3
 800245c:	e028      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 8002460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002462:	210f      	movs	r1, #15
 8002464:	438a      	bics	r2, r1
 8002466:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002468:	430a      	orrs	r2, r1
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	4914      	ldr	r1, [pc, #80]	; (80024c0 <HAL_RCC_OscConfig+0x448>)
 8002470:	400a      	ands	r2, r1
 8002472:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002474:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002476:	4301      	orrs	r1, r0
 8002478:	430a      	orrs	r2, r1
 800247a:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	0452      	lsls	r2, r2, #17
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002486:	f7ff f993 	bl	80017b0 <HAL_GetTick>
 800248a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_RCC_OscConfig+0x440>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	d406      	bmi.n	80024a2 <HAL_RCC_OscConfig+0x42a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002494:	f7ff f98c 	bl	80017b0 <HAL_GetTick>
 8002498:	1b00      	subs	r0, r0, r4
 800249a:	2802      	cmp	r0, #2
 800249c:	d9f6      	bls.n	800248c <HAL_RCC_OscConfig+0x414>
            return HAL_TIMEOUT;
 800249e:	2003      	movs	r0, #3
 80024a0:	e006      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80024a2:	2000      	movs	r0, #0
 80024a4:	e004      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
 80024a6:	2000      	movs	r0, #0
 80024a8:	e002      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
        return HAL_ERROR;
 80024aa:	2001      	movs	r0, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
  return HAL_OK;
 80024ae:	2000      	movs	r0, #0
}
 80024b0:	b002      	add	sp, #8
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80024b4:	2001      	movs	r0, #1
 80024b6:	e7fb      	b.n	80024b0 <HAL_RCC_OscConfig+0x438>
 80024b8:	40021000 	.word	0x40021000
 80024bc:	feffffff 	.word	0xfeffffff
 80024c0:	ffc2ffff 	.word	0xffc2ffff

080024c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	b530      	push	{r4, r5, lr}
 80024c6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80024c8:	aa04      	add	r2, sp, #16
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_RCC_GetSysClockFreq+0x5c>)
 80024cc:	0018      	movs	r0, r3
 80024ce:	c832      	ldmia	r0!, {r1, r4, r5}
 80024d0:	c232      	stmia	r2!, {r1, r4, r5}
 80024d2:	0011      	movs	r1, r2
 80024d4:	6802      	ldr	r2, [r0, #0]
 80024d6:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80024d8:	466a      	mov	r2, sp
 80024da:	3310      	adds	r3, #16
 80024dc:	cb13      	ldmia	r3!, {r0, r1, r4}
 80024de:	c213      	stmia	r2!, {r0, r1, r4}
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_RCC_GetSysClockFreq+0x60>)
 80024e6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e8:	230c      	movs	r3, #12
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d113      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024f0:	0c91      	lsrs	r1, r2, #18
 80024f2:	3307      	adds	r3, #7
 80024f4:	4019      	ands	r1, r3
 80024f6:	a804      	add	r0, sp, #16
 80024f8:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_GetSysClockFreq+0x60>)
 80024fc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80024fe:	400b      	ands	r3, r1
 8002500:	4669      	mov	r1, sp
 8002502:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002504:	03d3      	lsls	r3, r2, #15
 8002506:	d402      	bmi.n	800250e <HAL_RCC_GetSysClockFreq+0x4a>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8002508:	4807      	ldr	r0, [pc, #28]	; (8002528 <HAL_RCC_GetSysClockFreq+0x64>)
 800250a:	4360      	muls	r0, r4
 800250c:	e005      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800250e:	4807      	ldr	r0, [pc, #28]	; (800252c <HAL_RCC_GetSysClockFreq+0x68>)
 8002510:	f7fd fdfa 	bl	8000108 <__udivsi3>
 8002514:	4360      	muls	r0, r4
 8002516:	e000      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800251a:	b009      	add	sp, #36	; 0x24
 800251c:	bd30      	pop	{r4, r5, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	08004798 	.word	0x08004798
 8002524:	40021000 	.word	0x40021000
 8002528:	003d0900 	.word	0x003d0900
 800252c:	007a1200 	.word	0x007a1200

08002530 <HAL_RCC_ClockConfig>:
{
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	0005      	movs	r5, r0
 8002534:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002536:	4b4d      	ldr	r3, [pc, #308]	; (800266c <HAL_RCC_ClockConfig+0x13c>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2301      	movs	r3, #1
 800253c:	4013      	ands	r3, r2
 800253e:	428b      	cmp	r3, r1
 8002540:	d20b      	bcs.n	800255a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	494a      	ldr	r1, [pc, #296]	; (800266c <HAL_RCC_ClockConfig+0x13c>)
 8002544:	680b      	ldr	r3, [r1, #0]
 8002546:	2201      	movs	r2, #1
 8002548:	4393      	bics	r3, r2
 800254a:	4323      	orrs	r3, r4
 800254c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800254e:	680b      	ldr	r3, [r1, #0]
 8002550:	401a      	ands	r2, r3
 8002552:	4294      	cmp	r4, r2
 8002554:	d001      	beq.n	800255a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8002556:	2001      	movs	r0, #1
 8002558:	e085      	b.n	8002666 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	079b      	lsls	r3, r3, #30
 800255e:	d506      	bpl.n	800256e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4a43      	ldr	r2, [pc, #268]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 8002562:	6853      	ldr	r3, [r2, #4]
 8002564:	21f0      	movs	r1, #240	; 0xf0
 8002566:	438b      	bics	r3, r1
 8002568:	68a9      	ldr	r1, [r5, #8]
 800256a:	430b      	orrs	r3, r1
 800256c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	07db      	lsls	r3, r3, #31
 8002572:	d54c      	bpl.n	800260e <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002574:	686b      	ldr	r3, [r5, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d021      	beq.n	80025be <HAL_RCC_ClockConfig+0x8e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	2b02      	cmp	r3, #2
 800257c:	d025      	beq.n	80025ca <HAL_RCC_ClockConfig+0x9a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257e:	4a3c      	ldr	r2, [pc, #240]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	0792      	lsls	r2, r2, #30
 8002584:	d400      	bmi.n	8002588 <HAL_RCC_ClockConfig+0x58>
 8002586:	e06f      	b.n	8002668 <HAL_RCC_ClockConfig+0x138>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002588:	4939      	ldr	r1, [pc, #228]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 800258a:	684a      	ldr	r2, [r1, #4]
 800258c:	2003      	movs	r0, #3
 800258e:	4382      	bics	r2, r0
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002594:	f7ff f90c 	bl	80017b0 <HAL_GetTick>
 8002598:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259a:	686b      	ldr	r3, [r5, #4]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d01a      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d026      	beq.n	80025f2 <HAL_RCC_ClockConfig+0xc2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a4:	4b32      	ldr	r3, [pc, #200]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	220c      	movs	r2, #12
 80025aa:	421a      	tst	r2, r3
 80025ac:	d02f      	beq.n	800260e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ae:	f7ff f8ff 	bl	80017b0 <HAL_GetTick>
 80025b2:	1b80      	subs	r0, r0, r6
 80025b4:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_RCC_ClockConfig+0x144>)
 80025b6:	4298      	cmp	r0, r3
 80025b8:	d9f4      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x74>
          return HAL_TIMEOUT;
 80025ba:	2003      	movs	r0, #3
 80025bc:	e053      	b.n	8002666 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	0392      	lsls	r2, r2, #14
 80025c4:	d4e0      	bmi.n	8002588 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 80025c6:	2001      	movs	r0, #1
 80025c8:	e04d      	b.n	8002666 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4a29      	ldr	r2, [pc, #164]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	0192      	lsls	r2, r2, #6
 80025d0:	d4da      	bmi.n	8002588 <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 80025d2:	2001      	movs	r0, #1
 80025d4:	e047      	b.n	8002666 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	230c      	movs	r3, #12
 80025dc:	4013      	ands	r3, r2
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d015      	beq.n	800260e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e2:	f7ff f8e5 	bl	80017b0 <HAL_GetTick>
 80025e6:	1b80      	subs	r0, r0, r6
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x144>)
 80025ea:	4298      	cmp	r0, r3
 80025ec:	d9f3      	bls.n	80025d6 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 80025ee:	2003      	movs	r0, #3
 80025f0:	e039      	b.n	8002666 <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	230c      	movs	r3, #12
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d007      	beq.n	800260e <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fe:	f7ff f8d7 	bl	80017b0 <HAL_GetTick>
 8002602:	1b80      	subs	r0, r0, r6
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_ClockConfig+0x144>)
 8002606:	4298      	cmp	r0, r3
 8002608:	d9f3      	bls.n	80025f2 <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 800260a:	2003      	movs	r0, #3
 800260c:	e02b      	b.n	8002666 <HAL_RCC_ClockConfig+0x136>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_RCC_ClockConfig+0x13c>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2301      	movs	r3, #1
 8002614:	4013      	ands	r3, r2
 8002616:	429c      	cmp	r4, r3
 8002618:	d20b      	bcs.n	8002632 <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4914      	ldr	r1, [pc, #80]	; (800266c <HAL_RCC_ClockConfig+0x13c>)
 800261c:	680b      	ldr	r3, [r1, #0]
 800261e:	2201      	movs	r2, #1
 8002620:	4393      	bics	r3, r2
 8002622:	4323      	orrs	r3, r4
 8002624:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002626:	680b      	ldr	r3, [r1, #0]
 8002628:	401a      	ands	r2, r3
 800262a:	4294      	cmp	r4, r2
 800262c:	d001      	beq.n	8002632 <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
 800262e:	2001      	movs	r0, #1
 8002630:	e019      	b.n	8002666 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002632:	682b      	ldr	r3, [r5, #0]
 8002634:	075b      	lsls	r3, r3, #29
 8002636:	d506      	bpl.n	8002646 <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 800263a:	6853      	ldr	r3, [r2, #4]
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x148>)
 800263e:	400b      	ands	r3, r1
 8002640:	68e9      	ldr	r1, [r5, #12]
 8002642:	430b      	orrs	r3, r1
 8002644:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002646:	f7ff ff3d 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x140>)
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	0912      	lsrs	r2, r2, #4
 8002650:	230f      	movs	r3, #15
 8002652:	4013      	ands	r3, r2
 8002654:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x14c>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	40d8      	lsrs	r0, r3
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x150>)
 800265c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800265e:	2000      	movs	r0, #0
 8002660:	f001 fd2a 	bl	80040b8 <HAL_InitTick>
  return HAL_OK;
 8002664:	2000      	movs	r0, #0
}
 8002666:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
 800266a:	e7fc      	b.n	8002666 <HAL_RCC_ClockConfig+0x136>
 800266c:	40022000 	.word	0x40022000
 8002670:	40021000 	.word	0x40021000
 8002674:	00001388 	.word	0x00001388
 8002678:	fffff8ff 	.word	0xfffff8ff
 800267c:	080048c0 	.word	0x080048c0
 8002680:	20000004 	.word	0x20000004

08002684 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002684:	4b01      	ldr	r3, [pc, #4]	; (800268c <HAL_RCC_GetHCLKFreq+0x8>)
 8002686:	6818      	ldr	r0, [r3, #0]
}
 8002688:	4770      	bx	lr
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002692:	f7ff fff7 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	0a12      	lsrs	r2, r2, #8
 800269c:	2307      	movs	r3, #7
 800269e:	4013      	ands	r3, r2
 80026a0:	4a02      	ldr	r2, [pc, #8]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	40d8      	lsrs	r0, r3
}    
 80026a6:	bd10      	pop	{r4, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	080048d0 	.word	0x080048d0

080026b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026b0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80026b2:	2307      	movs	r3, #7
 80026b4:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_RCC_GetClockConfig+0x30>)
 80026b8:	685c      	ldr	r4, [r3, #4]
 80026ba:	2203      	movs	r2, #3
 80026bc:	4022      	ands	r2, r4
 80026be:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80026c0:	685c      	ldr	r4, [r3, #4]
 80026c2:	22f0      	movs	r2, #240	; 0xf0
 80026c4:	4022      	ands	r2, r4
 80026c6:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	22e0      	movs	r2, #224	; 0xe0
 80026cc:	00d2      	lsls	r2, r2, #3
 80026ce:	4013      	ands	r3, r2
 80026d0:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_RCC_GetClockConfig+0x34>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2301      	movs	r3, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
}
 80026dc:	bd10      	pop	{r4, pc}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40022000 	.word	0x40022000

080026e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026e8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ea:	6a03      	ldr	r3, [r0, #32]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4393      	bics	r3, r2
 80026f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026f8:	2573      	movs	r5, #115	; 0x73
 80026fa:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026fc:	680d      	ldr	r5, [r1, #0]
 80026fe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002700:	2502      	movs	r5, #2
 8002702:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002704:	688d      	ldr	r5, [r1, #8]
 8002706:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002708:	4d15      	ldr	r5, [pc, #84]	; (8002760 <TIM_OC1_SetConfig+0x78>)
 800270a:	42a8      	cmp	r0, r5
 800270c:	d020      	beq.n	8002750 <TIM_OC1_SetConfig+0x68>
 800270e:	4d15      	ldr	r5, [pc, #84]	; (8002764 <TIM_OC1_SetConfig+0x7c>)
 8002710:	42a8      	cmp	r0, r5
 8002712:	d01d      	beq.n	8002750 <TIM_OC1_SetConfig+0x68>
 8002714:	4d14      	ldr	r5, [pc, #80]	; (8002768 <TIM_OC1_SetConfig+0x80>)
 8002716:	42a8      	cmp	r0, r5
 8002718:	d01a      	beq.n	8002750 <TIM_OC1_SetConfig+0x68>
 800271a:	4d14      	ldr	r5, [pc, #80]	; (800276c <TIM_OC1_SetConfig+0x84>)
 800271c:	42a8      	cmp	r0, r5
 800271e:	d017      	beq.n	8002750 <TIM_OC1_SetConfig+0x68>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002720:	4d0f      	ldr	r5, [pc, #60]	; (8002760 <TIM_OC1_SetConfig+0x78>)
 8002722:	42a8      	cmp	r0, r5
 8002724:	d008      	beq.n	8002738 <TIM_OC1_SetConfig+0x50>
 8002726:	4d0f      	ldr	r5, [pc, #60]	; (8002764 <TIM_OC1_SetConfig+0x7c>)
 8002728:	42a8      	cmp	r0, r5
 800272a:	d005      	beq.n	8002738 <TIM_OC1_SetConfig+0x50>
 800272c:	4d0e      	ldr	r5, [pc, #56]	; (8002768 <TIM_OC1_SetConfig+0x80>)
 800272e:	42a8      	cmp	r0, r5
 8002730:	d002      	beq.n	8002738 <TIM_OC1_SetConfig+0x50>
 8002732:	4d0e      	ldr	r5, [pc, #56]	; (800276c <TIM_OC1_SetConfig+0x84>)
 8002734:	42a8      	cmp	r0, r5
 8002736:	d105      	bne.n	8002744 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002738:	4d0d      	ldr	r5, [pc, #52]	; (8002770 <TIM_OC1_SetConfig+0x88>)
 800273a:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800273c:	694d      	ldr	r5, [r1, #20]
 800273e:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002740:	698d      	ldr	r5, [r1, #24]
 8002742:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002744:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002746:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002748:	684a      	ldr	r2, [r1, #4]
 800274a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274c:	6203      	str	r3, [r0, #32]
}
 800274e:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8002750:	2508      	movs	r5, #8
 8002752:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8002754:	68cd      	ldr	r5, [r1, #12]
 8002756:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002758:	2504      	movs	r5, #4
 800275a:	43ab      	bics	r3, r5
 800275c:	e7e0      	b.n	8002720 <TIM_OC1_SetConfig+0x38>
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40014000 	.word	0x40014000
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800
 8002770:	fffffcff 	.word	0xfffffcff

08002774 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002774:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002776:	6a03      	ldr	r3, [r0, #32]
 8002778:	4a1a      	ldr	r2, [pc, #104]	; (80027e4 <TIM_OC3_SetConfig+0x70>)
 800277a:	4013      	ands	r3, r2
 800277c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002780:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002782:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002784:	3275      	adds	r2, #117	; 0x75
 8002786:	32ff      	adds	r2, #255	; 0xff
 8002788:	4394      	bics	r4, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800278a:	680a      	ldr	r2, [r1, #0]
 800278c:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800278e:	4a16      	ldr	r2, [pc, #88]	; (80027e8 <TIM_OC3_SetConfig+0x74>)
 8002790:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002792:	688a      	ldr	r2, [r1, #8]
 8002794:	0212      	lsls	r2, r2, #8
 8002796:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002798:	4a14      	ldr	r2, [pc, #80]	; (80027ec <TIM_OC3_SetConfig+0x78>)
 800279a:	4290      	cmp	r0, r2
 800279c:	d019      	beq.n	80027d2 <TIM_OC3_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <TIM_OC3_SetConfig+0x78>)
 80027a0:	4290      	cmp	r0, r2
 80027a2:	d008      	beq.n	80027b6 <TIM_OC3_SetConfig+0x42>
 80027a4:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <TIM_OC3_SetConfig+0x7c>)
 80027a6:	4290      	cmp	r0, r2
 80027a8:	d005      	beq.n	80027b6 <TIM_OC3_SetConfig+0x42>
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <TIM_OC3_SetConfig+0x80>)
 80027ac:	4290      	cmp	r0, r2
 80027ae:	d002      	beq.n	80027b6 <TIM_OC3_SetConfig+0x42>
 80027b0:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <TIM_OC3_SetConfig+0x84>)
 80027b2:	4290      	cmp	r0, r2
 80027b4:	d107      	bne.n	80027c6 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027b6:	4a11      	ldr	r2, [pc, #68]	; (80027fc <TIM_OC3_SetConfig+0x88>)
 80027b8:	4015      	ands	r5, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027ba:	694a      	ldr	r2, [r1, #20]
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027c0:	698a      	ldr	r2, [r1, #24]
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	4315      	orrs	r5, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027c8:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ca:	684a      	ldr	r2, [r1, #4]
 80027cc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ce:	6203      	str	r3, [r0, #32]
}
 80027d0:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 80027d2:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <TIM_OC3_SetConfig+0x8c>)
 80027d4:	4013      	ands	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027d6:	68ca      	ldr	r2, [r1, #12]
 80027d8:	0212      	lsls	r2, r2, #8
 80027da:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 80027dc:	4a09      	ldr	r2, [pc, #36]	; (8002804 <TIM_OC3_SetConfig+0x90>)
 80027de:	4013      	ands	r3, r2
 80027e0:	e7dd      	b.n	800279e <TIM_OC3_SetConfig+0x2a>
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	fffffeff 	.word	0xfffffeff
 80027e8:	fffffdff 	.word	0xfffffdff
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	ffffcfff 	.word	0xffffcfff
 8002800:	fffff7ff 	.word	0xfffff7ff
 8002804:	fffffbff 	.word	0xfffffbff

08002808 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002808:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800280a:	6a03      	ldr	r3, [r0, #32]
 800280c:	4a13      	ldr	r2, [pc, #76]	; (800285c <TIM_OC4_SetConfig+0x54>)
 800280e:	4013      	ands	r3, r2
 8002810:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002812:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002814:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002816:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002818:	4c11      	ldr	r4, [pc, #68]	; (8002860 <TIM_OC4_SetConfig+0x58>)
 800281a:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800281c:	680c      	ldr	r4, [r1, #0]
 800281e:	0224      	lsls	r4, r4, #8
 8002820:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002822:	4c10      	ldr	r4, [pc, #64]	; (8002864 <TIM_OC4_SetConfig+0x5c>)
 8002824:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002826:	688c      	ldr	r4, [r1, #8]
 8002828:	0324      	lsls	r4, r4, #12
 800282a:	4323      	orrs	r3, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800282c:	4c0e      	ldr	r4, [pc, #56]	; (8002868 <TIM_OC4_SetConfig+0x60>)
 800282e:	42a0      	cmp	r0, r4
 8002830:	d008      	beq.n	8002844 <TIM_OC4_SetConfig+0x3c>
 8002832:	4c0e      	ldr	r4, [pc, #56]	; (800286c <TIM_OC4_SetConfig+0x64>)
 8002834:	42a0      	cmp	r0, r4
 8002836:	d005      	beq.n	8002844 <TIM_OC4_SetConfig+0x3c>
 8002838:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <TIM_OC4_SetConfig+0x68>)
 800283a:	42a0      	cmp	r0, r4
 800283c:	d002      	beq.n	8002844 <TIM_OC4_SetConfig+0x3c>
 800283e:	4c0d      	ldr	r4, [pc, #52]	; (8002874 <TIM_OC4_SetConfig+0x6c>)
 8002840:	42a0      	cmp	r0, r4
 8002842:	d104      	bne.n	800284e <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002844:	4c0c      	ldr	r4, [pc, #48]	; (8002878 <TIM_OC4_SetConfig+0x70>)
 8002846:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002848:	694d      	ldr	r5, [r1, #20]
 800284a:	01ad      	lsls	r5, r5, #6
 800284c:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002850:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002852:	684a      	ldr	r2, [r1, #4]
 8002854:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002856:	6203      	str	r3, [r0, #32]
}
 8002858:	bd30      	pop	{r4, r5, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	ffffefff 	.word	0xffffefff
 8002860:	ffff8cff 	.word	0xffff8cff
 8002864:	ffffdfff 	.word	0xffffdfff
 8002868:	40012c00 	.word	0x40012c00
 800286c:	40014000 	.word	0x40014000
 8002870:	40014400 	.word	0x40014400
 8002874:	40014800 	.word	0x40014800
 8002878:	ffffbfff 	.word	0xffffbfff

0800287c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800287c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800287e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002880:	6a04      	ldr	r4, [r0, #32]
 8002882:	2501      	movs	r5, #1
 8002884:	43ac      	bics	r4, r5
 8002886:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002888:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800288a:	35ef      	adds	r5, #239	; 0xef
 800288c:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002892:	240a      	movs	r4, #10
 8002894:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8002896:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002898:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800289a:	6201      	str	r1, [r0, #32]
}
 800289c:	bd30      	pop	{r4, r5, pc}
	...

080028a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a2:	6a03      	ldr	r3, [r0, #32]
 80028a4:	2410      	movs	r4, #16
 80028a6:	43a3      	bics	r3, r4
 80028a8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028aa:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80028ac:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ae:	4d05      	ldr	r5, [pc, #20]	; (80028c4 <TIM_TI2_ConfigInputStage+0x24>)
 80028b0:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b2:	0312      	lsls	r2, r2, #12
 80028b4:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028b6:	24a0      	movs	r4, #160	; 0xa0
 80028b8:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80028ba:	0109      	lsls	r1, r1, #4
 80028bc:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80028c0:	6201      	str	r1, [r0, #32]
}
 80028c2:	bd30      	pop	{r4, r5, pc}
 80028c4:	ffff0fff 	.word	0xffff0fff

080028c8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80028c8:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80028ca:	2270      	movs	r2, #112	; 0x70
 80028cc:	4393      	bics	r3, r2
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80028ce:	2207      	movs	r2, #7
 80028d0:	4311      	orrs	r1, r2
 80028d2:	b289      	uxth	r1, r1
 80028d4:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80028d6:	6081      	str	r1, [r0, #8]
}
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028da:	6803      	ldr	r3, [r0, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	2101      	movs	r1, #1
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80028e4:	6802      	ldr	r2, [r0, #0]
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	2000      	movs	r0, #0
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_PWM_MspInit>:
}
 80028f0:	4770      	bx	lr

080028f2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIM_IC_CaptureCallback>:
}
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIM_TriggerCallback>:
}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_IRQHandler>:
{
 80028fa:	b510      	push	{r4, lr}
 80028fc:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028fe:	6803      	ldr	r3, [r0, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	0792      	lsls	r2, r2, #30
 8002904:	d50f      	bpl.n	8002926 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	0792      	lsls	r2, r2, #30
 800290a:	d50c      	bpl.n	8002926 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800290c:	2203      	movs	r2, #3
 800290e:	4252      	negs	r2, r2
 8002910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002912:	2301      	movs	r3, #1
 8002914:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002916:	6803      	ldr	r3, [r0, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	079b      	lsls	r3, r3, #30
 800291c:	d063      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 800291e:	f7ff ffe9 	bl	80028f4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	2300      	movs	r3, #0
 8002924:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	0752      	lsls	r2, r2, #29
 800292c:	d512      	bpl.n	8002954 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	0752      	lsls	r2, r2, #29
 8002932:	d50f      	bpl.n	8002954 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	2205      	movs	r2, #5
 8002936:	4252      	negs	r2, r2
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293a:	2302      	movs	r3, #2
 800293c:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	699a      	ldr	r2, [r3, #24]
 8002942:	23c0      	movs	r3, #192	; 0xc0
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	421a      	tst	r2, r3
 8002948:	d053      	beq.n	80029f2 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 800294a:	0020      	movs	r0, r4
 800294c:	f7ff ffd2 	bl	80028f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002950:	2300      	movs	r3, #0
 8002952:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	0712      	lsls	r2, r2, #28
 800295a:	d510      	bpl.n	800297e <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	0712      	lsls	r2, r2, #28
 8002960:	d50d      	bpl.n	800297e <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002962:	2209      	movs	r2, #9
 8002964:	4252      	negs	r2, r2
 8002966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002968:	2304      	movs	r3, #4
 800296a:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	079b      	lsls	r3, r3, #30
 8002972:	d045      	beq.n	8002a00 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8002974:	0020      	movs	r0, r4
 8002976:	f7ff ffbd 	bl	80028f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	2300      	movs	r3, #0
 800297c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	06d2      	lsls	r2, r2, #27
 8002984:	d512      	bpl.n	80029ac <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	06d2      	lsls	r2, r2, #27
 800298a:	d50f      	bpl.n	80029ac <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800298c:	2211      	movs	r2, #17
 800298e:	4252      	negs	r2, r2
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002992:	2308      	movs	r3, #8
 8002994:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	23c0      	movs	r3, #192	; 0xc0
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	421a      	tst	r2, r3
 80029a0:	d035      	beq.n	8002a0e <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	0020      	movs	r0, r4
 80029a4:	f7ff ffa6 	bl	80028f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a8:	2300      	movs	r3, #0
 80029aa:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	07d2      	lsls	r2, r2, #31
 80029b2:	d502      	bpl.n	80029ba <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	07d2      	lsls	r2, r2, #31
 80029b8:	d430      	bmi.n	8002a1c <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	0612      	lsls	r2, r2, #24
 80029c0:	d502      	bpl.n	80029c8 <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	0612      	lsls	r2, r2, #24
 80029c6:	d430      	bmi.n	8002a2a <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	0652      	lsls	r2, r2, #25
 80029ce:	d502      	bpl.n	80029d6 <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	0652      	lsls	r2, r2, #25
 80029d4:	d430      	bmi.n	8002a38 <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	0692      	lsls	r2, r2, #26
 80029dc:	d502      	bpl.n	80029e4 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	0692      	lsls	r2, r2, #26
 80029e2:	d430      	bmi.n	8002a46 <HAL_TIM_IRQHandler+0x14c>
}
 80029e4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	f7ff ff84 	bl	80028f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ea:	0020      	movs	r0, r4
 80029ec:	f7ff ff83 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
 80029f0:	e797      	b.n	8002922 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	0020      	movs	r0, r4
 80029f4:	f7ff ff7d 	bl	80028f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	0020      	movs	r0, r4
 80029fa:	f7ff ff7c 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
 80029fe:	e7a7      	b.n	8002950 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a00:	0020      	movs	r0, r4
 8002a02:	f7ff ff76 	bl	80028f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a06:	0020      	movs	r0, r4
 8002a08:	f7ff ff75 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a0c:	e7b5      	b.n	800297a <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0e:	0020      	movs	r0, r4
 8002a10:	f7ff ff6f 	bl	80028f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	0020      	movs	r0, r4
 8002a16:	f7ff ff6e 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a1a:	e7c5      	b.n	80029a8 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4252      	negs	r2, r2
 8002a20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a22:	0020      	movs	r0, r4
 8002a24:	f001 fb1c 	bl	8004060 <HAL_TIM_PeriodElapsedCallback>
 8002a28:	e7c7      	b.n	80029ba <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a2a:	2281      	movs	r2, #129	; 0x81
 8002a2c:	4252      	negs	r2, r2
 8002a2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a30:	0020      	movs	r0, r4
 8002a32:	f000 fa4c 	bl	8002ece <HAL_TIMEx_BreakCallback>
 8002a36:	e7c7      	b.n	80029c8 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a38:	2241      	movs	r2, #65	; 0x41
 8002a3a:	4252      	negs	r2, r2
 8002a3c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002a3e:	0020      	movs	r0, r4
 8002a40:	f7ff ff5a 	bl	80028f8 <HAL_TIM_TriggerCallback>
 8002a44:	e7c7      	b.n	80029d6 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a46:	2221      	movs	r2, #33	; 0x21
 8002a48:	4252      	negs	r2, r2
 8002a4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002a4c:	0020      	movs	r0, r4
 8002a4e:	f000 fa3d 	bl	8002ecc <HAL_TIMEx_CommutationCallback>
}
 8002a52:	e7c7      	b.n	80029e4 <HAL_TIM_IRQHandler+0xea>

08002a54 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002a54:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <TIM_Base_SetConfig+0x88>)
 8002a58:	4290      	cmp	r0, r2
 8002a5a:	d03a      	beq.n	8002ad2 <TIM_Base_SetConfig+0x7e>
 8002a5c:	2280      	movs	r2, #128	; 0x80
 8002a5e:	05d2      	lsls	r2, r2, #23
 8002a60:	4290      	cmp	r0, r2
 8002a62:	d036      	beq.n	8002ad2 <TIM_Base_SetConfig+0x7e>
 8002a64:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <TIM_Base_SetConfig+0x8c>)
 8002a66:	4290      	cmp	r0, r2
 8002a68:	d033      	beq.n	8002ad2 <TIM_Base_SetConfig+0x7e>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <TIM_Base_SetConfig+0x88>)
 8002a6c:	4290      	cmp	r0, r2
 8002a6e:	d012      	beq.n	8002a96 <TIM_Base_SetConfig+0x42>
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	05d2      	lsls	r2, r2, #23
 8002a74:	4290      	cmp	r0, r2
 8002a76:	d00e      	beq.n	8002a96 <TIM_Base_SetConfig+0x42>
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <TIM_Base_SetConfig+0x8c>)
 8002a7a:	4290      	cmp	r0, r2
 8002a7c:	d00b      	beq.n	8002a96 <TIM_Base_SetConfig+0x42>
 8002a7e:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <TIM_Base_SetConfig+0x90>)
 8002a80:	4290      	cmp	r0, r2
 8002a82:	d008      	beq.n	8002a96 <TIM_Base_SetConfig+0x42>
 8002a84:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <TIM_Base_SetConfig+0x94>)
 8002a86:	4290      	cmp	r0, r2
 8002a88:	d005      	beq.n	8002a96 <TIM_Base_SetConfig+0x42>
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <TIM_Base_SetConfig+0x98>)
 8002a8c:	4290      	cmp	r0, r2
 8002a8e:	d002      	beq.n	8002a96 <TIM_Base_SetConfig+0x42>
 8002a90:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <TIM_Base_SetConfig+0x9c>)
 8002a92:	4290      	cmp	r0, r2
 8002a94:	d103      	bne.n	8002a9e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a96:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <TIM_Base_SetConfig+0xa0>)
 8002a98:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9a:	68ca      	ldr	r2, [r1, #12]
 8002a9c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	4393      	bics	r3, r2
 8002aa2:	694a      	ldr	r2, [r1, #20]
 8002aa4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002aa6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aa8:	688b      	ldr	r3, [r1, #8]
 8002aaa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002aac:	680b      	ldr	r3, [r1, #0]
 8002aae:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <TIM_Base_SetConfig+0x88>)
 8002ab2:	4298      	cmp	r0, r3
 8002ab4:	d008      	beq.n	8002ac8 <TIM_Base_SetConfig+0x74>
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <TIM_Base_SetConfig+0x94>)
 8002ab8:	4298      	cmp	r0, r3
 8002aba:	d005      	beq.n	8002ac8 <TIM_Base_SetConfig+0x74>
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <TIM_Base_SetConfig+0x98>)
 8002abe:	4298      	cmp	r0, r3
 8002ac0:	d002      	beq.n	8002ac8 <TIM_Base_SetConfig+0x74>
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <TIM_Base_SetConfig+0x9c>)
 8002ac4:	4298      	cmp	r0, r3
 8002ac6:	d101      	bne.n	8002acc <TIM_Base_SetConfig+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac8:	690b      	ldr	r3, [r1, #16]
 8002aca:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002acc:	2301      	movs	r3, #1
 8002ace:	6143      	str	r3, [r0, #20]
}
 8002ad0:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ad2:	2270      	movs	r2, #112	; 0x70
 8002ad4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8002ad6:	684a      	ldr	r2, [r1, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	e7c6      	b.n	8002a6a <TIM_Base_SetConfig+0x16>
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40002000 	.word	0x40002000
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40014400 	.word	0x40014400
 8002af0:	40014800 	.word	0x40014800
 8002af4:	fffffcff 	.word	0xfffffcff

08002af8 <HAL_TIM_Base_Init>:
{
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8002afc:	d014      	beq.n	8002b28 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002afe:	233d      	movs	r3, #61	; 0x3d
 8002b00:	5cc3      	ldrb	r3, [r0, r3]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002b06:	253d      	movs	r5, #61	; 0x3d
 8002b08:	2302      	movs	r3, #2
 8002b0a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	1d21      	adds	r1, r4, #4
 8002b0e:	6820      	ldr	r0, [r4, #0]
 8002b10:	f7ff ffa0 	bl	8002a54 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002b14:	2301      	movs	r3, #1
 8002b16:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002b18:	2000      	movs	r0, #0
}
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	333c      	adds	r3, #60	; 0x3c
 8002b20:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002b22:	f001 fb85 	bl	8004230 <HAL_TIM_Base_MspInit>
 8002b26:	e7ee      	b.n	8002b06 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8002b28:	2001      	movs	r0, #1
 8002b2a:	e7f6      	b.n	8002b1a <HAL_TIM_Base_Init+0x22>

08002b2c <HAL_TIM_PWM_Init>:
{
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8002b30:	d014      	beq.n	8002b5c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002b32:	233d      	movs	r3, #61	; 0x3d
 8002b34:	5cc3      	ldrb	r3, [r0, r3]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002b3a:	253d      	movs	r5, #61	; 0x3d
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b40:	1d21      	adds	r1, r4, #4
 8002b42:	6820      	ldr	r0, [r4, #0]
 8002b44:	f7ff ff86 	bl	8002a54 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8002b4c:	2000      	movs	r0, #0
}
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002b50:	2200      	movs	r2, #0
 8002b52:	333c      	adds	r3, #60	; 0x3c
 8002b54:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8002b56:	f7ff fecb 	bl	80028f0 <HAL_TIM_PWM_MspInit>
 8002b5a:	e7ee      	b.n	8002b3a <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	e7f6      	b.n	8002b4e <HAL_TIM_PWM_Init+0x22>

08002b60 <TIM_OC2_SetConfig>:
{
 8002b60:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b62:	6a03      	ldr	r3, [r0, #32]
 8002b64:	2210      	movs	r2, #16
 8002b66:	4393      	bics	r3, r2
 8002b68:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b6a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002b6c:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b6e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b70:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <TIM_OC2_SetConfig+0x70>)
 8002b72:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b74:	680a      	ldr	r2, [r1, #0]
 8002b76:	0212      	lsls	r2, r2, #8
 8002b78:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b7e:	688a      	ldr	r2, [r1, #8]
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	4313      	orrs	r3, r2
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <TIM_OC2_SetConfig+0x74>)
 8002b86:	4290      	cmp	r0, r2
 8002b88:	d019      	beq.n	8002bbe <TIM_OC2_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <TIM_OC2_SetConfig+0x74>)
 8002b8c:	4290      	cmp	r0, r2
 8002b8e:	d008      	beq.n	8002ba2 <TIM_OC2_SetConfig+0x42>
 8002b90:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <TIM_OC2_SetConfig+0x78>)
 8002b92:	4290      	cmp	r0, r2
 8002b94:	d005      	beq.n	8002ba2 <TIM_OC2_SetConfig+0x42>
 8002b96:	4a11      	ldr	r2, [pc, #68]	; (8002bdc <TIM_OC2_SetConfig+0x7c>)
 8002b98:	4290      	cmp	r0, r2
 8002b9a:	d002      	beq.n	8002ba2 <TIM_OC2_SetConfig+0x42>
 8002b9c:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <TIM_OC2_SetConfig+0x80>)
 8002b9e:	4290      	cmp	r0, r2
 8002ba0:	d107      	bne.n	8002bb2 <TIM_OC2_SetConfig+0x52>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <TIM_OC2_SetConfig+0x84>)
 8002ba4:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ba6:	694a      	ldr	r2, [r1, #20]
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bac:	698a      	ldr	r2, [r1, #24]
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8002bb2:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002bb4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002bb6:	684a      	ldr	r2, [r1, #4]
 8002bb8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002bba:	6203      	str	r3, [r0, #32]
}
 8002bbc:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	4393      	bics	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bc2:	68ca      	ldr	r2, [r1, #12]
 8002bc4:	0112      	lsls	r2, r2, #4
 8002bc6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	4393      	bics	r3, r2
 8002bcc:	e7dd      	b.n	8002b8a <TIM_OC2_SetConfig+0x2a>
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	ffff8cff 	.word	0xffff8cff
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40014000 	.word	0x40014000
 8002bdc:	40014400 	.word	0x40014400
 8002be0:	40014800 	.word	0x40014800
 8002be4:	fffff3ff 	.word	0xfffff3ff

08002be8 <HAL_TIM_PWM_ConfigChannel>:
{
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	0004      	movs	r4, r0
 8002bec:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8002bee:	233c      	movs	r3, #60	; 0x3c
 8002bf0:	5cc3      	ldrb	r3, [r0, r3]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d069      	beq.n	8002cca <HAL_TIM_PWM_ConfigChannel+0xe2>
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	233c      	movs	r3, #60	; 0x3c
 8002bfa:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	3101      	adds	r1, #1
 8002bfe:	3301      	adds	r3, #1
 8002c00:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8002c02:	2a04      	cmp	r2, #4
 8002c04:	d037      	beq.n	8002c76 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8002c06:	d919      	bls.n	8002c3c <HAL_TIM_PWM_ConfigChannel+0x54>
 8002c08:	2a08      	cmp	r2, #8
 8002c0a:	d04a      	beq.n	8002ca2 <HAL_TIM_PWM_ConfigChannel+0xba>
 8002c0c:	2a0c      	cmp	r2, #12
 8002c0e:	d12a      	bne.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c10:	0029      	movs	r1, r5
 8002c12:	6800      	ldr	r0, [r0, #0]
 8002c14:	f7ff fdf8 	bl	8002808 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c18:	6822      	ldr	r2, [r4, #0]
 8002c1a:	69d1      	ldr	r1, [r2, #28]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	430b      	orrs	r3, r1
 8002c22:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	69d3      	ldr	r3, [r2, #28]
 8002c28:	4929      	ldr	r1, [pc, #164]	; (8002cd0 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c2e:	6821      	ldr	r1, [r4, #0]
 8002c30:	69cb      	ldr	r3, [r1, #28]
 8002c32:	692a      	ldr	r2, [r5, #16]
 8002c34:	0212      	lsls	r2, r2, #8
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61cb      	str	r3, [r1, #28]
    break;
 8002c3a:	e014      	b.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	d112      	bne.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c40:	0029      	movs	r1, r5
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	f7ff fd50 	bl	80026e8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c48:	6822      	ldr	r2, [r4, #0]
 8002c4a:	6993      	ldr	r3, [r2, #24]
 8002c4c:	2108      	movs	r1, #8
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c52:	6822      	ldr	r2, [r4, #0]
 8002c54:	6993      	ldr	r3, [r2, #24]
 8002c56:	3904      	subs	r1, #4
 8002c58:	438b      	bics	r3, r1
 8002c5a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c5c:	6822      	ldr	r2, [r4, #0]
 8002c5e:	6993      	ldr	r3, [r2, #24]
 8002c60:	6929      	ldr	r1, [r5, #16]
 8002c62:	430b      	orrs	r3, r1
 8002c64:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	2201      	movs	r2, #1
 8002c68:	233d      	movs	r3, #61	; 0x3d
 8002c6a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002c72:	2000      	movs	r0, #0
}
 8002c74:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c76:	0029      	movs	r1, r5
 8002c78:	6800      	ldr	r0, [r0, #0]
 8002c7a:	f7ff ff71 	bl	8002b60 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c7e:	6822      	ldr	r2, [r4, #0]
 8002c80:	6991      	ldr	r1, [r2, #24]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	430b      	orrs	r3, r1
 8002c88:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c8a:	6822      	ldr	r2, [r4, #0]
 8002c8c:	6993      	ldr	r3, [r2, #24]
 8002c8e:	4910      	ldr	r1, [pc, #64]	; (8002cd0 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 8002c90:	400b      	ands	r3, r1
 8002c92:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c94:	6821      	ldr	r1, [r4, #0]
 8002c96:	698b      	ldr	r3, [r1, #24]
 8002c98:	692a      	ldr	r2, [r5, #16]
 8002c9a:	0212      	lsls	r2, r2, #8
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	618b      	str	r3, [r1, #24]
    break;
 8002ca0:	e7e1      	b.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ca2:	0029      	movs	r1, r5
 8002ca4:	6800      	ldr	r0, [r0, #0]
 8002ca6:	f7ff fd65 	bl	8002774 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002caa:	6822      	ldr	r2, [r4, #0]
 8002cac:	69d3      	ldr	r3, [r2, #28]
 8002cae:	2108      	movs	r1, #8
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	69d3      	ldr	r3, [r2, #28]
 8002cb8:	3904      	subs	r1, #4
 8002cba:	438b      	bics	r3, r1
 8002cbc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	69d3      	ldr	r3, [r2, #28]
 8002cc2:	6929      	ldr	r1, [r5, #16]
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	61d3      	str	r3, [r2, #28]
    break;
 8002cc8:	e7cd      	b.n	8002c66 <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 8002cca:	2002      	movs	r0, #2
 8002ccc:	e7d2      	b.n	8002c74 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	fffffbff 	.word	0xfffffbff

08002cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cd4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002cd6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd8:	4d03      	ldr	r5, [pc, #12]	; (8002ce8 <TIM_ETR_SetConfig+0x14>)
 8002cda:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	4321      	orrs	r1, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce4:	6081      	str	r1, [r0, #8]
}
 8002ce6:	bd30      	pop	{r4, r5, pc}
 8002ce8:	ffff00ff 	.word	0xffff00ff

08002cec <HAL_TIM_ConfigClockSource>:
{
 8002cec:	b510      	push	{r4, lr}
 8002cee:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002cf0:	233c      	movs	r3, #60	; 0x3c
 8002cf2:	5cc3      	ldrb	r3, [r0, r3]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d100      	bne.n	8002cfa <HAL_TIM_ConfigClockSource+0xe>
 8002cf8:	e07f      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x10e>
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	233c      	movs	r3, #60	; 0x3c
 8002cfe:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	3201      	adds	r2, #1
 8002d02:	3301      	adds	r3, #1
 8002d04:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8002d06:	6802      	ldr	r2, [r0, #0]
 8002d08:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d0a:	483d      	ldr	r0, [pc, #244]	; (8002e00 <HAL_TIM_ConfigClockSource+0x114>)
 8002d0c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002d0e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002d10:	680b      	ldr	r3, [r1, #0]
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d05d      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0xe6>
 8002d16:	d910      	bls.n	8002d3a <HAL_TIM_ConfigClockSource+0x4e>
 8002d18:	2b70      	cmp	r3, #112	; 0x70
 8002d1a:	d043      	beq.n	8002da4 <HAL_TIM_ConfigClockSource+0xb8>
 8002d1c:	d820      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x74>
 8002d1e:	2b50      	cmp	r3, #80	; 0x50
 8002d20:	d04d      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0xd2>
 8002d22:	2b60      	cmp	r3, #96	; 0x60
 8002d24:	d136      	bne.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d26:	68ca      	ldr	r2, [r1, #12]
 8002d28:	6849      	ldr	r1, [r1, #4]
 8002d2a:	6820      	ldr	r0, [r4, #0]
 8002d2c:	f7ff fdb8 	bl	80028a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d30:	2160      	movs	r1, #96	; 0x60
 8002d32:	6820      	ldr	r0, [r4, #0]
 8002d34:	f7ff fdc8 	bl	80028c8 <TIM_ITRx_SetConfig>
    break;
 8002d38:	e02c      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d053      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d3e:	d908      	bls.n	8002d52 <HAL_TIM_ConfigClockSource+0x66>
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d055      	beq.n	8002df0 <HAL_TIM_ConfigClockSource+0x104>
 8002d44:	2b30      	cmp	r3, #48	; 0x30
 8002d46:	d125      	bne.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002d48:	2130      	movs	r1, #48	; 0x30
 8002d4a:	6820      	ldr	r0, [r4, #0]
 8002d4c:	f7ff fdbc 	bl	80028c8 <TIM_ITRx_SetConfig>
    break;
 8002d50:	e020      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d11e      	bne.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002d56:	2100      	movs	r1, #0
 8002d58:	6820      	ldr	r0, [r4, #0]
 8002d5a:	f7ff fdb5 	bl	80028c8 <TIM_ITRx_SetConfig>
    break;
 8002d5e:	e019      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	0152      	lsls	r2, r2, #5
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d010      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x9e>
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	0192      	lsls	r2, r2, #6
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d111      	bne.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002d70:	68cb      	ldr	r3, [r1, #12]
 8002d72:	684a      	ldr	r2, [r1, #4]
 8002d74:	6889      	ldr	r1, [r1, #8]
 8002d76:	6820      	ldr	r0, [r4, #0]
 8002d78:	f7ff ffac 	bl	8002cd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	6891      	ldr	r1, [r2, #8]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	01db      	lsls	r3, r3, #7
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6093      	str	r3, [r2, #8]
    break;
 8002d88:	e004      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002d8a:	6822      	ldr	r2, [r4, #0]
 8002d8c:	6893      	ldr	r3, [r2, #8]
 8002d8e:	2107      	movs	r1, #7
 8002d90:	438b      	bics	r3, r1
 8002d92:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	2201      	movs	r2, #1
 8002d96:	233d      	movs	r3, #61	; 0x3d
 8002d98:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002da0:	2000      	movs	r0, #0
}
 8002da2:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002da4:	68cb      	ldr	r3, [r1, #12]
 8002da6:	684a      	ldr	r2, [r1, #4]
 8002da8:	6889      	ldr	r1, [r1, #8]
 8002daa:	6820      	ldr	r0, [r4, #0]
 8002dac:	f7ff ff92 	bl	8002cd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002db4:	2177      	movs	r1, #119	; 0x77
 8002db6:	438b      	bics	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002db8:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002dba:	6093      	str	r3, [r2, #8]
    break;
 8002dbc:	e7ea      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dbe:	68ca      	ldr	r2, [r1, #12]
 8002dc0:	6849      	ldr	r1, [r1, #4]
 8002dc2:	6820      	ldr	r0, [r4, #0]
 8002dc4:	f7ff fd5a 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dc8:	2150      	movs	r1, #80	; 0x50
 8002dca:	6820      	ldr	r0, [r4, #0]
 8002dcc:	f7ff fd7c 	bl	80028c8 <TIM_ITRx_SetConfig>
    break;
 8002dd0:	e7e0      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	68ca      	ldr	r2, [r1, #12]
 8002dd4:	6849      	ldr	r1, [r1, #4]
 8002dd6:	6820      	ldr	r0, [r4, #0]
 8002dd8:	f7ff fd50 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	6820      	ldr	r0, [r4, #0]
 8002de0:	f7ff fd72 	bl	80028c8 <TIM_ITRx_SetConfig>
    break;
 8002de4:	e7d6      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002de6:	2110      	movs	r1, #16
 8002de8:	6820      	ldr	r0, [r4, #0]
 8002dea:	f7ff fd6d 	bl	80028c8 <TIM_ITRx_SetConfig>
    break;
 8002dee:	e7d1      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002df0:	2120      	movs	r1, #32
 8002df2:	6820      	ldr	r0, [r4, #0]
 8002df4:	f7ff fd68 	bl	80028c8 <TIM_ITRx_SetConfig>
    break;
 8002df8:	e7cc      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0xa8>
  __HAL_LOCK(htim);
 8002dfa:	2002      	movs	r0, #2
 8002dfc:	e7d1      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xb6>
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	ffff0088 	.word	0xffff0088

08002e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e04:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002e06:	2401      	movs	r4, #1
 8002e08:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e0a:	6a03      	ldr	r3, [r0, #32]
 8002e0c:	43a3      	bics	r3, r4
 8002e0e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002e10:	6a03      	ldr	r3, [r0, #32]
 8002e12:	408a      	lsls	r2, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	6202      	str	r2, [r0, #32]
}
 8002e18:	bd10      	pop	{r4, pc}
	...

08002e1c <HAL_TIM_PWM_Start>:
{
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e20:	2201      	movs	r2, #1
 8002e22:	6800      	ldr	r0, [r0, #0]
 8002e24:	f7ff ffee 	bl	8002e04 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <HAL_TIM_PWM_Start+0x54>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d019      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x48>
 8002e30:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <HAL_TIM_PWM_Start+0x58>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_TIM_PWM_Start+0x4c>
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <HAL_TIM_PWM_Start+0x5c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d017      	beq.n	8002e6c <HAL_TIM_PWM_Start+0x50>
 8002e3c:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <HAL_TIM_PWM_Start+0x60>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00e      	beq.n	8002e60 <HAL_TIM_PWM_Start+0x44>
 8002e42:	2200      	movs	r2, #0
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d004      	beq.n	8002e52 <HAL_TIM_PWM_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 8002e48:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	0212      	lsls	r2, r2, #8
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002e52:	6822      	ldr	r2, [r4, #0]
 8002e54:	6813      	ldr	r3, [r2, #0]
 8002e56:	2101      	movs	r1, #1
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e60:	2201      	movs	r2, #1
 8002e62:	e7ef      	b.n	8002e44 <HAL_TIM_PWM_Start+0x28>
 8002e64:	2201      	movs	r2, #1
 8002e66:	e7ed      	b.n	8002e44 <HAL_TIM_PWM_Start+0x28>
 8002e68:	2201      	movs	r2, #1
 8002e6a:	e7eb      	b.n	8002e44 <HAL_TIM_PWM_Start+0x28>
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	e7e9      	b.n	8002e44 <HAL_TIM_PWM_Start+0x28>
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40014000 	.word	0x40014000
 8002e78:	40014400 	.word	0x40014400
 8002e7c:	40014800 	.word	0x40014800

08002e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002e82:	233c      	movs	r3, #60	; 0x3c
 8002e84:	5cc3      	ldrb	r3, [r0, r3]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d01e      	beq.n	8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8002e8a:	223c      	movs	r2, #60	; 0x3c
 8002e8c:	2501      	movs	r5, #1
 8002e8e:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	243d      	movs	r4, #61	; 0x3d
 8002e92:	2302      	movs	r3, #2
 8002e94:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002e96:	6806      	ldr	r6, [r0, #0]
 8002e98:	6873      	ldr	r3, [r6, #4]
 8002e9a:	2770      	movs	r7, #112	; 0x70
 8002e9c:	43bb      	bics	r3, r7
 8002e9e:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea0:	6806      	ldr	r6, [r0, #0]
 8002ea2:	6873      	ldr	r3, [r6, #4]
 8002ea4:	680f      	ldr	r7, [r1, #0]
 8002ea6:	433b      	orrs	r3, r7
 8002ea8:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002eaa:	6806      	ldr	r6, [r0, #0]
 8002eac:	68b3      	ldr	r3, [r6, #8]
 8002eae:	2780      	movs	r7, #128	; 0x80
 8002eb0:	43bb      	bics	r3, r7
 8002eb2:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002eb4:	6806      	ldr	r6, [r0, #0]
 8002eb6:	68b3      	ldr	r3, [r6, #8]
 8002eb8:	6849      	ldr	r1, [r1, #4]
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002ebe:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8002ec4:	2000      	movs	r0, #0
}
 8002ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8002ec8:	2002      	movs	r0, #2
 8002eca:	e7fc      	b.n	8002ec6 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08002ecc <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ece:	4770      	bx	lr

08002ed0 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002ed0:	2884      	cmp	r0, #132	; 0x84
 8002ed2:	d001      	beq.n	8002ed8 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8002ed4:	3003      	adds	r0, #3
  }
  
  return fpriority;
}
 8002ed6:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002ed8:	2000      	movs	r0, #0
  return fpriority;
 8002eda:	e7fc      	b.n	8002ed6 <makeFreeRtosPriority+0x6>

08002edc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002edc:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8002ede:	f000 fbf5 	bl	80036cc <vTaskStartScheduler>
  
  return osOK;
}
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	bd10      	pop	{r4, pc}

08002ee6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ee6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	000d      	movs	r5, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002eec:	6846      	ldr	r6, [r0, #4]
 8002eee:	6807      	ldr	r7, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ef0:	6904      	ldr	r4, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	5ec0      	ldrsh	r0, [r0, r3]
 8002ef6:	f7ff ffeb 	bl	8002ed0 <makeFreeRtosPriority>
 8002efa:	b2a2      	uxth	r2, r4
 8002efc:	ab03      	add	r3, sp, #12
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	9000      	str	r0, [sp, #0]
 8002f02:	002b      	movs	r3, r5
 8002f04:	0039      	movs	r1, r7
 8002f06:	0030      	movs	r0, r6
 8002f08:	f000 fbb0 	bl	800366c <xTaskCreate>
 8002f0c:	2801      	cmp	r0, #1
 8002f0e:	d102      	bne.n	8002f16 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002f10:	9803      	ldr	r0, [sp, #12]
}
 8002f12:	b005      	add	sp, #20
 8002f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8002f16:	2000      	movs	r0, #0
 8002f18:	e7fb      	b.n	8002f12 <osThreadCreate+0x2c>

08002f1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002f1a:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d100      	bne.n	8002f22 <osDelay+0x8>
 8002f20:	3001      	adds	r0, #1
 8002f22:	f000 fd0d 	bl	8003940 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f26:	2000      	movs	r0, #0
 8002f28:	bd10      	pop	{r4, pc}

08002f2a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002f2a:	b510      	push	{r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002f2c:	6841      	ldr	r1, [r0, #4]
 8002f2e:	6800      	ldr	r0, [r0, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f000 fa50 	bl	80033d6 <xQueueGenericCreate>
#endif
}
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f38:	0003      	movs	r3, r0
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4252      	negs	r2, r2
 8002f42:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f44:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f46:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f4c:	4770      	bx	lr

08002f4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f52:	4770      	bx	lr

08002f54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f54:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f56:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f60:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f62:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002f64:	6803      	ldr	r3, [r0, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	6003      	str	r3, [r0, #0]
}
 8002f6a:	4770      	bx	lr

08002f6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f6c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f6e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f70:	1c63      	adds	r3, r4, #1
 8002f72:	d002      	beq.n	8002f7a <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f74:	0002      	movs	r2, r0
 8002f76:	3208      	adds	r2, #8
 8002f78:	e002      	b.n	8002f80 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f7a:	6902      	ldr	r2, [r0, #16]
 8002f7c:	e004      	b.n	8002f88 <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f7e:	001a      	movs	r2, r3
 8002f80:	6853      	ldr	r3, [r2, #4]
 8002f82:	681d      	ldr	r5, [r3, #0]
 8002f84:	42ac      	cmp	r4, r5
 8002f86:	d2fa      	bcs.n	8002f7e <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f88:	6853      	ldr	r3, [r2, #4]
 8002f8a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f8c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f8e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f90:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f92:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002f94:	6803      	ldr	r3, [r0, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	6003      	str	r3, [r0, #0]
}
 8002f9a:	bd30      	pop	{r4, r5, pc}

08002f9c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f9c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f9e:	6842      	ldr	r2, [r0, #4]
 8002fa0:	6881      	ldr	r1, [r0, #8]
 8002fa2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fa4:	6882      	ldr	r2, [r0, #8]
 8002fa6:	6841      	ldr	r1, [r0, #4]
 8002fa8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4290      	cmp	r0, r2
 8002fae:	d005      	beq.n	8002fbc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	1e50      	subs	r0, r2, #1
 8002fb8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002fba:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fbc:	6882      	ldr	r2, [r0, #8]
 8002fbe:	605a      	str	r2, [r3, #4]
 8002fc0:	e7f6      	b.n	8002fb0 <uxListRemove+0x14>
	...

08002fc4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <prvTaskExitError+0x10>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	d001      	beq.n	8002fd0 <prvTaskExitError+0xc>
 8002fcc:	b672      	cpsid	i
 8002fce:	e7fe      	b.n	8002fce <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8002fd0:	b672      	cpsid	i
 8002fd2:	e7fe      	b.n	8002fd2 <prvTaskExitError+0xe>
 8002fd4:	20000000 	.word	0x20000000
	...

08002fe0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8002fe0:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <pxCurrentTCBConst2>)
 8002fe2:	6813      	ldr	r3, [r2, #0]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	3020      	adds	r0, #32
 8002fe8:	f380 8809 	msr	PSP, r0
 8002fec:	2002      	movs	r0, #2
 8002fee:	f380 8814 	msr	CONTROL, r0
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8002ff8:	46ae      	mov	lr, r5
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	bc04      	pop	{r2}
 8002ffe:	b662      	cpsie	i
 8003000:	4718      	bx	r3
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46c0      	nop			; (mov r8, r8)

08003010 <pxCurrentTCBConst2>:
 8003010:	20000c3c 	.word	0x20000c3c

08003014 <pxPortInitialiseStack>:
{
 8003014:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003016:	1f03      	subs	r3, r0, #4
 8003018:	2480      	movs	r4, #128	; 0x80
 800301a:	0464      	lsls	r4, r4, #17
 800301c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800301e:	3b04      	subs	r3, #4
 8003020:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003022:	3b04      	subs	r3, #4
 8003024:	4902      	ldr	r1, [pc, #8]	; (8003030 <pxPortInitialiseStack+0x1c>)
 8003026:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003028:	3b14      	subs	r3, #20
 800302a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800302c:	3840      	subs	r0, #64	; 0x40
}
 800302e:	bd10      	pop	{r4, pc}
 8003030:	08002fc5 	.word	0x08002fc5

08003034 <SVC_Handler>:
}
 8003034:	4770      	bx	lr
	...

08003038 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0552      	lsls	r2, r2, #21
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <vPortYield+0x14>)
 800303e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8003040:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003044:	f3bf 8f6f 	isb	sy
}
 8003048:	4770      	bx	lr
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 8003050:	b672      	cpsid	i
    uxCriticalNesting++;
 8003052:	4a04      	ldr	r2, [pc, #16]	; (8003064 <vPortEnterCritical+0x14>)
 8003054:	6813      	ldr	r3, [r2, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800305a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800305e:	f3bf 8f6f 	isb	sy
}
 8003062:	4770      	bx	lr
 8003064:	20000000 	.word	0x20000000

08003068 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <vPortExitCritical+0x1c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <vPortExitCritical+0xc>
 8003070:	b672      	cpsid	i
 8003072:	e7fe      	b.n	8003072 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8003074:	3b01      	subs	r3, #1
 8003076:	4a03      	ldr	r2, [pc, #12]	; (8003084 <vPortExitCritical+0x1c>)
 8003078:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800307a:	2b00      	cmp	r3, #0
 800307c:	d100      	bne.n	8003080 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
 800307e:	b662      	cpsie	i
    }
}
 8003080:	4770      	bx	lr
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000000 	.word	0x20000000

08003088 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003088:	f3ef 8010 	mrs	r0, PRIMASK
 800308c:	b672      	cpsid	i
 800308e:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
 8003090:	2000      	movs	r0, #0

08003092 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 8003092:	f380 8810 	msr	PRIMASK, r0
 8003096:	4770      	bx	lr
	...

080030a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80030a0:	f3ef 8009 	mrs	r0, PSP
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <pxCurrentTCBConst>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	3820      	subs	r0, #32
 80030aa:	6010      	str	r0, [r2, #0]
 80030ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80030ae:	4644      	mov	r4, r8
 80030b0:	464d      	mov	r5, r9
 80030b2:	4656      	mov	r6, sl
 80030b4:	465f      	mov	r7, fp
 80030b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80030b8:	b508      	push	{r3, lr}
 80030ba:	b672      	cpsid	i
 80030bc:	f000 fc90 	bl	80039e0 <vTaskSwitchContext>
 80030c0:	b662      	cpsie	i
 80030c2:	bc0c      	pop	{r2, r3}
 80030c4:	6811      	ldr	r1, [r2, #0]
 80030c6:	6808      	ldr	r0, [r1, #0]
 80030c8:	3010      	adds	r0, #16
 80030ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80030cc:	46a0      	mov	r8, r4
 80030ce:	46a9      	mov	r9, r5
 80030d0:	46b2      	mov	sl, r6
 80030d2:	46bb      	mov	fp, r7
 80030d4:	f380 8809 	msr	PSP, r0
 80030d8:	3820      	subs	r0, #32
 80030da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80030dc:	4718      	bx	r3
 80030de:	46c0      	nop			; (mov r8, r8)

080030e0 <pxCurrentTCBConst>:
 80030e0:	20000c3c 	.word	0x20000c3c

080030e4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030e4:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80030e6:	f7ff ffcf 	bl	8003088 <ulSetInterruptMaskFromISR>
 80030ea:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030ec:	f000 fb24 	bl	8003738 <xTaskIncrementTick>
 80030f0:	2800      	cmp	r0, #0
 80030f2:	d003      	beq.n	80030fc <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0552      	lsls	r2, r2, #21
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <SysTick_Handler+0x20>)
 80030fa:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80030fc:	0020      	movs	r0, r4
 80030fe:	f7ff ffc8 	bl	8003092 <vClearInterruptMaskFromISR>
}
 8003102:	bd10      	pop	{r4, pc}
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003108:	b510      	push	{r4, lr}
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <vPortSetupTimerInterrupt+0x1c>)
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	4906      	ldr	r1, [pc, #24]	; (8003128 <vPortSetupTimerInterrupt+0x20>)
 8003110:	f7fc fffa 	bl	8000108 <__udivsi3>
 8003114:	3801      	subs	r0, #1
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <vPortSetupTimerInterrupt+0x24>)
 8003118:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800311a:	2207      	movs	r2, #7
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <vPortSetupTimerInterrupt+0x28>)
 800311e:	601a      	str	r2, [r3, #0]
}
 8003120:	bd10      	pop	{r4, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000004 	.word	0x20000004
 8003128:	000002dd 	.word	0x000002dd
 800312c:	e000e014 	.word	0xe000e014
 8003130:	e000e010 	.word	0xe000e010

08003134 <xPortStartScheduler>:
{
 8003134:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <xPortStartScheduler+0x2c>)
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	22ff      	movs	r2, #255	; 0xff
 800313c:	0412      	lsls	r2, r2, #16
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	22ff      	movs	r2, #255	; 0xff
 8003146:	0612      	lsls	r2, r2, #24
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800314c:	f7ff ffdc 	bl	8003108 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003150:	2200      	movs	r2, #0
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <xPortStartScheduler+0x30>)
 8003154:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8003156:	f7ff ff43 	bl	8002fe0 <vPortStartFirstTask>
	prvTaskExitError();
 800315a:	f7ff ff33 	bl	8002fc4 <prvTaskExitError>
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	e000ed20 	.word	0xe000ed20
 8003164:	20000000 	.word	0x20000000

08003168 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800316a:	0753      	lsls	r3, r2, #29
 800316c:	d01f      	beq.n	80031ae <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800316e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003170:	2307      	movs	r3, #7
 8003172:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003174:	23c0      	movs	r3, #192	; 0xc0
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a5b      	subs	r3, r3, r1
 800317a:	189b      	adds	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800317c:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800317e:	480e      	ldr	r0, [pc, #56]	; (80031b8 <prvHeapInit+0x50>)
 8003180:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003182:	2100      	movs	r1, #0
 8003184:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003186:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 8003188:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800318a:	2007      	movs	r0, #7
 800318c:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 800318e:	480b      	ldr	r0, [pc, #44]	; (80031bc <prvHeapInit+0x54>)
 8003190:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8003192:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003194:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003196:	1a99      	subs	r1, r3, r2
 8003198:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800319a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <prvHeapInit+0x58>)
 800319e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <prvHeapInit+0x5c>)
 80031a2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	0612      	lsls	r2, r2, #24
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <prvHeapInit+0x60>)
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80031ae:	23c0      	movs	r3, #192	; 0xc0
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	e7e4      	b.n	800317e <prvHeapInit+0x16>
 80031b4:	20000028 	.word	0x20000028
 80031b8:	20000c34 	.word	0x20000c34
 80031bc:	20000024 	.word	0x20000024
 80031c0:	20000c30 	.word	0x20000c30
 80031c4:	20000c2c 	.word	0x20000c2c
 80031c8:	20000c28 	.word	0x20000c28

080031cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031cc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <prvInsertBlockIntoFreeList+0x4c>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4282      	cmp	r2, r0
 80031d4:	d319      	bcc.n	800320a <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	185c      	adds	r4, r3, r1
 80031da:	42a0      	cmp	r0, r4
 80031dc:	d103      	bne.n	80031e6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031de:	6840      	ldr	r0, [r0, #4]
 80031e0:	1809      	adds	r1, r1, r0
 80031e2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80031e4:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031e6:	6841      	ldr	r1, [r0, #4]
 80031e8:	1844      	adds	r4, r0, r1
 80031ea:	42a2      	cmp	r2, r4
 80031ec:	d111      	bne.n	8003212 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80031ee:	4c0b      	ldr	r4, [pc, #44]	; (800321c <prvInsertBlockIntoFreeList+0x50>)
 80031f0:	6824      	ldr	r4, [r4, #0]
 80031f2:	42a2      	cmp	r2, r4
 80031f4:	d00b      	beq.n	800320e <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031f6:	6852      	ldr	r2, [r2, #4]
 80031f8:	1889      	adds	r1, r1, r2
 80031fa:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003202:	4298      	cmp	r0, r3
 8003204:	d000      	beq.n	8003208 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003206:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003208:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800320a:	0013      	movs	r3, r2
 800320c:	e7e0      	b.n	80031d0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800320e:	6004      	str	r4, [r0, #0]
 8003210:	e7f7      	b.n	8003202 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003212:	6002      	str	r2, [r0, #0]
 8003214:	e7f5      	b.n	8003202 <prvInsertBlockIntoFreeList+0x36>
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	20000c34 	.word	0x20000c34
 800321c:	20000024 	.word	0x20000024

08003220 <pvPortMalloc>:
{
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8003224:	f000 fa80 	bl	8003728 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003228:	4b2e      	ldr	r3, [pc, #184]	; (80032e4 <pvPortMalloc+0xc4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00f      	beq.n	8003250 <pvPortMalloc+0x30>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <pvPortMalloc+0xc8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4223      	tst	r3, r4
 8003236:	d14b      	bne.n	80032d0 <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 8003238:	2c00      	cmp	r4, #0
 800323a:	d00c      	beq.n	8003256 <pvPortMalloc+0x36>
				xWantedSize += xHeapStructSize;
 800323c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800323e:	0763      	lsls	r3, r4, #29
 8003240:	d009      	beq.n	8003256 <pvPortMalloc+0x36>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003242:	2307      	movs	r3, #7
 8003244:	439c      	bics	r4, r3
 8003246:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003248:	4223      	tst	r3, r4
 800324a:	d004      	beq.n	8003256 <pvPortMalloc+0x36>
 800324c:	b672      	cpsid	i
 800324e:	e7fe      	b.n	800324e <pvPortMalloc+0x2e>
			prvHeapInit();
 8003250:	f7ff ff8a 	bl	8003168 <prvHeapInit>
 8003254:	e7ec      	b.n	8003230 <pvPortMalloc+0x10>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003256:	2c00      	cmp	r4, #0
 8003258:	d03c      	beq.n	80032d4 <pvPortMalloc+0xb4>
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <pvPortMalloc+0xcc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	429c      	cmp	r4, r3
 8003260:	d83a      	bhi.n	80032d8 <pvPortMalloc+0xb8>
				pxBlock = xStart.pxNextFreeBlock;
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <pvPortMalloc+0xd0>)
 8003264:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003266:	e001      	b.n	800326c <pvPortMalloc+0x4c>
					pxPreviousBlock = pxBlock;
 8003268:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800326a:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800326c:	686a      	ldr	r2, [r5, #4]
 800326e:	4294      	cmp	r4, r2
 8003270:	d902      	bls.n	8003278 <pvPortMalloc+0x58>
 8003272:	682a      	ldr	r2, [r5, #0]
 8003274:	2a00      	cmp	r2, #0
 8003276:	d1f7      	bne.n	8003268 <pvPortMalloc+0x48>
				if( pxBlock != pxEnd )
 8003278:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <pvPortMalloc+0xc4>)
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	4295      	cmp	r5, r2
 800327e:	d02d      	beq.n	80032dc <pvPortMalloc+0xbc>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003280:	681e      	ldr	r6, [r3, #0]
 8003282:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003284:	682a      	ldr	r2, [r5, #0]
 8003286:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003288:	686b      	ldr	r3, [r5, #4]
 800328a:	1b1b      	subs	r3, r3, r4
 800328c:	2b10      	cmp	r3, #16
 800328e:	d908      	bls.n	80032a2 <pvPortMalloc+0x82>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003290:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003292:	0742      	lsls	r2, r0, #29
 8003294:	d001      	beq.n	800329a <pvPortMalloc+0x7a>
 8003296:	b672      	cpsid	i
 8003298:	e7fe      	b.n	8003298 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800329a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800329c:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800329e:	f7ff ff95 	bl	80031cc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032a2:	686a      	ldr	r2, [r5, #4]
 80032a4:	4911      	ldr	r1, [pc, #68]	; (80032ec <pvPortMalloc+0xcc>)
 80032a6:	680b      	ldr	r3, [r1, #0]
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032ac:	4911      	ldr	r1, [pc, #68]	; (80032f4 <pvPortMalloc+0xd4>)
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	428b      	cmp	r3, r1
 80032b2:	d201      	bcs.n	80032b8 <pvPortMalloc+0x98>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032b4:	490f      	ldr	r1, [pc, #60]	; (80032f4 <pvPortMalloc+0xd4>)
 80032b6:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <pvPortMalloc+0xc8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4313      	orrs	r3, r2
 80032be:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80032c4:	f000 fac6 	bl	8003854 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032c8:	0773      	lsls	r3, r6, #29
 80032ca:	d009      	beq.n	80032e0 <pvPortMalloc+0xc0>
 80032cc:	b672      	cpsid	i
 80032ce:	e7fe      	b.n	80032ce <pvPortMalloc+0xae>
void *pvReturn = NULL;
 80032d0:	2600      	movs	r6, #0
 80032d2:	e7f7      	b.n	80032c4 <pvPortMalloc+0xa4>
 80032d4:	2600      	movs	r6, #0
 80032d6:	e7f5      	b.n	80032c4 <pvPortMalloc+0xa4>
 80032d8:	2600      	movs	r6, #0
 80032da:	e7f3      	b.n	80032c4 <pvPortMalloc+0xa4>
 80032dc:	2600      	movs	r6, #0
 80032de:	e7f1      	b.n	80032c4 <pvPortMalloc+0xa4>
}
 80032e0:	0030      	movs	r0, r6
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	20000024 	.word	0x20000024
 80032e8:	20000c28 	.word	0x20000c28
 80032ec:	20000c2c 	.word	0x20000c2c
 80032f0:	20000c34 	.word	0x20000c34
 80032f4:	20000c30 	.word	0x20000c30

080032f8 <vPortFree>:
{
 80032f8:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d020      	beq.n	8003340 <vPortFree+0x48>
		puc -= xHeapStructSize;
 80032fe:	0005      	movs	r5, r0
 8003300:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003302:	686b      	ldr	r3, [r5, #4]
 8003304:	4a0f      	ldr	r2, [pc, #60]	; (8003344 <vPortFree+0x4c>)
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	421a      	tst	r2, r3
 800330a:	d101      	bne.n	8003310 <vPortFree+0x18>
 800330c:	b672      	cpsid	i
 800330e:	e7fe      	b.n	800330e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003310:	0001      	movs	r1, r0
 8003312:	3908      	subs	r1, #8
 8003314:	6809      	ldr	r1, [r1, #0]
 8003316:	2900      	cmp	r1, #0
 8003318:	d001      	beq.n	800331e <vPortFree+0x26>
 800331a:	b672      	cpsid	i
 800331c:	e7fe      	b.n	800331c <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800331e:	3808      	subs	r0, #8
 8003320:	0004      	movs	r4, r0
 8003322:	4393      	bics	r3, r2
 8003324:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8003326:	f000 f9ff 	bl	8003728 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800332a:	6863      	ldr	r3, [r4, #4]
 800332c:	4a06      	ldr	r2, [pc, #24]	; (8003348 <vPortFree+0x50>)
 800332e:	6811      	ldr	r1, [r2, #0]
 8003330:	468c      	mov	ip, r1
 8003332:	4463      	add	r3, ip
 8003334:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003336:	0028      	movs	r0, r5
 8003338:	f7ff ff48 	bl	80031cc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800333c:	f000 fa8a 	bl	8003854 <xTaskResumeAll>
}
 8003340:	bd70      	pop	{r4, r5, r6, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	20000c28 	.word	0x20000c28
 8003348:	20000c2c 	.word	0x20000c2c

0800334c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	0004      	movs	r4, r0
 8003350:	000d      	movs	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8003352:	2800      	cmp	r0, #0
 8003354:	d023      	beq.n	800339e <xQueueGenericReset+0x52>

	taskENTER_CRITICAL();
 8003356:	f7ff fe7b 	bl	8003050 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800335e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003360:	0001      	movs	r1, r0
 8003362:	4359      	muls	r1, r3
 8003364:	1851      	adds	r1, r2, r1
 8003366:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003368:	2100      	movs	r1, #0
 800336a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800336c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800336e:	3b01      	subs	r3, #1
 8003370:	4343      	muls	r3, r0
 8003372:	18d3      	adds	r3, r2, r3
 8003374:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003376:	23ff      	movs	r3, #255	; 0xff
 8003378:	2244      	movs	r2, #68	; 0x44
 800337a:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800337c:	3201      	adds	r2, #1
 800337e:	54a3      	strb	r3, [r4, r2]

		if( xNewQueue == pdFALSE )
 8003380:	2d00      	cmp	r5, #0
 8003382:	d111      	bne.n	80033a8 <xQueueGenericReset+0x5c>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003384:	6923      	ldr	r3, [r4, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <xQueueGenericReset+0x4a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800338a:	0020      	movs	r0, r4
 800338c:	3010      	adds	r0, #16
 800338e:	f000 fb6d 	bl	8003a6c <xTaskRemoveFromEventList>
 8003392:	2800      	cmp	r0, #0
 8003394:	d105      	bne.n	80033a2 <xQueueGenericReset+0x56>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 8003396:	f7ff fe67 	bl	8003068 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800339a:	2001      	movs	r0, #1
 800339c:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800339e:	b672      	cpsid	i
 80033a0:	e7fe      	b.n	80033a0 <xQueueGenericReset+0x54>
					queueYIELD_IF_USING_PREEMPTION();
 80033a2:	f7ff fe49 	bl	8003038 <vPortYield>
 80033a6:	e7f6      	b.n	8003396 <xQueueGenericReset+0x4a>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033a8:	0020      	movs	r0, r4
 80033aa:	3010      	adds	r0, #16
 80033ac:	f7ff fdc4 	bl	8002f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033b0:	0020      	movs	r0, r4
 80033b2:	3024      	adds	r0, #36	; 0x24
 80033b4:	f7ff fdc0 	bl	8002f38 <vListInitialise>
 80033b8:	e7ed      	b.n	8003396 <xQueueGenericReset+0x4a>

080033ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033ba:	b510      	push	{r4, lr}
 80033bc:	9b02      	ldr	r3, [sp, #8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033be:	2900      	cmp	r1, #0
 80033c0:	d007      	beq.n	80033d2 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033c4:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033c6:	6419      	str	r1, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033c8:	2101      	movs	r1, #1
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7ff ffbe 	bl	800334c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033d0:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033d2:	601b      	str	r3, [r3, #0]
 80033d4:	e7f6      	b.n	80033c4 <prvInitialiseNewQueue+0xa>

080033d6 <xQueueGenericCreate>:
	{
 80033d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d8:	b083      	sub	sp, #12
 80033da:	0006      	movs	r6, r0
 80033dc:	000f      	movs	r7, r1
 80033de:	0015      	movs	r5, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d101      	bne.n	80033e8 <xQueueGenericCreate+0x12>
 80033e4:	b672      	cpsid	i
 80033e6:	e7fe      	b.n	80033e6 <xQueueGenericCreate+0x10>
		if( uxItemSize == ( UBaseType_t ) 0 )
 80033e8:	2900      	cmp	r1, #0
 80033ea:	d002      	beq.n	80033f2 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ec:	0008      	movs	r0, r1
 80033ee:	4370      	muls	r0, r6
 80033f0:	e000      	b.n	80033f4 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) 0;
 80033f2:	2000      	movs	r0, #0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80033f4:	3048      	adds	r0, #72	; 0x48
 80033f6:	f7ff ff13 	bl	8003220 <pvPortMalloc>
 80033fa:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 80033fc:	d007      	beq.n	800340e <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80033fe:	0002      	movs	r2, r0
 8003400:	3248      	adds	r2, #72	; 0x48
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003402:	9000      	str	r0, [sp, #0]
 8003404:	002b      	movs	r3, r5
 8003406:	0039      	movs	r1, r7
 8003408:	0030      	movs	r0, r6
 800340a:	f7ff ffd6 	bl	80033ba <prvInitialiseNewQueue>
	}
 800340e:	0020      	movs	r0, r4
 8003410:	b003      	add	sp, #12
 8003412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003414 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <prvResetNextTaskUnblockTime+0x30>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <prvResetNextTaskUnblockTime+0x20>
 800341e:	3301      	adds	r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <prvResetNextTaskUnblockTime+0x30>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <prvResetNextTaskUnblockTime+0x34>)
 8003430:	601a      	str	r2, [r3, #0]
	}
}
 8003432:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003434:	2300      	movs	r3, #0
 8003436:	e7f3      	b.n	8003420 <prvResetNextTaskUnblockTime+0xc>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003438:	2201      	movs	r2, #1
 800343a:	4252      	negs	r2, r2
 800343c:	4b02      	ldr	r3, [pc, #8]	; (8003448 <prvResetNextTaskUnblockTime+0x34>)
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e7f7      	b.n	8003432 <prvResetNextTaskUnblockTime+0x1e>
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	20000c40 	.word	0x20000c40
 8003448:	20000d18 	.word	0x20000d18

0800344c <prvDeleteTCB>:
	{
 800344c:	b510      	push	{r4, lr}
 800344e:	0004      	movs	r4, r0
			vPortFree( pxTCB->pxStack );
 8003450:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003452:	f7ff ff51 	bl	80032f8 <vPortFree>
			vPortFree( pxTCB );
 8003456:	0020      	movs	r0, r4
 8003458:	f7ff ff4e 	bl	80032f8 <vPortFree>
	}
 800345c:	bd10      	pop	{r4, pc}
	...

08003460 <prvInitialiseNewTask>:
{
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b083      	sub	sp, #12
 8003464:	9000      	str	r0, [sp, #0]
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	9c08      	ldr	r4, [sp, #32]
 800346a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <prvInitialiseNewTask+0x84>)
 800346e:	469c      	mov	ip, r3
 8003470:	4462      	add	r2, ip
 8003472:	0092      	lsls	r2, r2, #2
 8003474:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003476:	469c      	mov	ip, r3
 8003478:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800347a:	2307      	movs	r3, #7
 800347c:	439a      	bics	r2, r3
 800347e:	0017      	movs	r7, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003480:	2300      	movs	r3, #0
 8003482:	2b0f      	cmp	r3, #15
 8003484:	d809      	bhi.n	800349a <prvInitialiseNewTask+0x3a>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003486:	18c8      	adds	r0, r1, r3
 8003488:	7805      	ldrb	r5, [r0, #0]
 800348a:	18f2      	adds	r2, r6, r3
 800348c:	3234      	adds	r2, #52	; 0x34
 800348e:	7015      	strb	r5, [r2, #0]
		if( pcName[ x ] == 0x00 )
 8003490:	7802      	ldrb	r2, [r0, #0]
 8003492:	2a00      	cmp	r2, #0
 8003494:	d001      	beq.n	800349a <prvInitialiseNewTask+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003496:	3301      	adds	r3, #1
 8003498:	e7f3      	b.n	8003482 <prvInitialiseNewTask+0x22>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800349a:	2200      	movs	r2, #0
 800349c:	2343      	movs	r3, #67	; 0x43
 800349e:	54f2      	strb	r2, [r6, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034a0:	2c06      	cmp	r4, #6
 80034a2:	d900      	bls.n	80034a6 <prvInitialiseNewTask+0x46>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034a4:	2406      	movs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 80034a6:	62f4      	str	r4, [r6, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80034a8:	6474      	str	r4, [r6, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034aa:	2500      	movs	r5, #0
 80034ac:	64b5      	str	r5, [r6, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034ae:	1d30      	adds	r0, r6, #4
 80034b0:	f7ff fd4d 	bl	8002f4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034b4:	0030      	movs	r0, r6
 80034b6:	3018      	adds	r0, #24
 80034b8:	f7ff fd49 	bl	8002f4e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034bc:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034be:	2307      	movs	r3, #7
 80034c0:	1b1c      	subs	r4, r3, r4
 80034c2:	61b4      	str	r4, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034c4:	6276      	str	r6, [r6, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80034c6:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034c8:	3349      	adds	r3, #73	; 0x49
 80034ca:	54f5      	strb	r5, [r6, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034cc:	9a01      	ldr	r2, [sp, #4]
 80034ce:	9900      	ldr	r1, [sp, #0]
 80034d0:	0038      	movs	r0, r7
 80034d2:	f7ff fd9f 	bl	8003014 <pxPortInitialiseStack>
 80034d6:	6030      	str	r0, [r6, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80034d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d000      	beq.n	80034e0 <prvInitialiseNewTask+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034de:	601e      	str	r6, [r3, #0]
}
 80034e0:	b003      	add	sp, #12
 80034e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e4:	3fffffff 	.word	0x3fffffff

080034e8 <prvInitialiseTaskLists>:
{
 80034e8:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034ea:	2400      	movs	r4, #0
 80034ec:	e007      	b.n	80034fe <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034ee:	00a3      	lsls	r3, r4, #2
 80034f0:	191b      	adds	r3, r3, r4
 80034f2:	009a      	lsls	r2, r3, #2
 80034f4:	480e      	ldr	r0, [pc, #56]	; (8003530 <prvInitialiseTaskLists+0x48>)
 80034f6:	1880      	adds	r0, r0, r2
 80034f8:	f7ff fd1e 	bl	8002f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034fc:	3401      	adds	r4, #1
 80034fe:	2c06      	cmp	r4, #6
 8003500:	d9f5      	bls.n	80034ee <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003502:	4d0c      	ldr	r5, [pc, #48]	; (8003534 <prvInitialiseTaskLists+0x4c>)
 8003504:	0028      	movs	r0, r5
 8003506:	f7ff fd17 	bl	8002f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800350a:	4c0b      	ldr	r4, [pc, #44]	; (8003538 <prvInitialiseTaskLists+0x50>)
 800350c:	0020      	movs	r0, r4
 800350e:	f7ff fd13 	bl	8002f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003512:	480a      	ldr	r0, [pc, #40]	; (800353c <prvInitialiseTaskLists+0x54>)
 8003514:	f7ff fd10 	bl	8002f38 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003518:	4809      	ldr	r0, [pc, #36]	; (8003540 <prvInitialiseTaskLists+0x58>)
 800351a:	f7ff fd0d 	bl	8002f38 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800351e:	4809      	ldr	r0, [pc, #36]	; (8003544 <prvInitialiseTaskLists+0x5c>)
 8003520:	f7ff fd0a 	bl	8002f38 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <prvInitialiseTaskLists+0x60>)
 8003526:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <prvInitialiseTaskLists+0x64>)
 800352a:	601c      	str	r4, [r3, #0]
}
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	20000c48 	.word	0x20000c48
 8003534:	20000cec 	.word	0x20000cec
 8003538:	20000d00 	.word	0x20000d00
 800353c:	20000d20 	.word	0x20000d20
 8003540:	20000d4c 	.word	0x20000d4c
 8003544:	20000d38 	.word	0x20000d38
 8003548:	20000c40 	.word	0x20000c40
 800354c:	20000c44 	.word	0x20000c44

08003550 <prvAddNewTaskToReadyList>:
{
 8003550:	b510      	push	{r4, lr}
 8003552:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8003554:	f7ff fd7c 	bl	8003050 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <prvAddNewTaskToReadyList+0x88>)
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	3301      	adds	r3, #1
 800355e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003560:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <prvAddNewTaskToReadyList+0x8c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02b      	beq.n	80035c0 <prvAddNewTaskToReadyList+0x70>
			if( xSchedulerRunning == pdFALSE )
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <prvAddNewTaskToReadyList+0x90>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <prvAddNewTaskToReadyList+0x30>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <prvAddNewTaskToReadyList+0x8c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003578:	4293      	cmp	r3, r2
 800357a:	d801      	bhi.n	8003580 <prvAddNewTaskToReadyList+0x30>
					pxCurrentTCB = pxNewTCB;
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <prvAddNewTaskToReadyList+0x8c>)
 800357e:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <prvAddNewTaskToReadyList+0x94>)
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003588:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <prvAddNewTaskToReadyList+0x98>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d901      	bls.n	8003596 <prvAddNewTaskToReadyList+0x46>
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <prvAddNewTaskToReadyList+0x98>)
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	1d21      	adds	r1, r4, #4
 8003598:	0093      	lsls	r3, r2, #2
 800359a:	189b      	adds	r3, r3, r2
 800359c:	009a      	lsls	r2, r3, #2
 800359e:	4813      	ldr	r0, [pc, #76]	; (80035ec <prvAddNewTaskToReadyList+0x9c>)
 80035a0:	1880      	adds	r0, r0, r2
 80035a2:	f7ff fcd7 	bl	8002f54 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80035a6:	f7ff fd5f 	bl	8003068 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <prvAddNewTaskToReadyList+0x90>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <prvAddNewTaskToReadyList+0x6e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <prvAddNewTaskToReadyList+0x8c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d308      	bcc.n	80035d0 <prvAddNewTaskToReadyList+0x80>
}
 80035be:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <prvAddNewTaskToReadyList+0x8c>)
 80035c2:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035c4:	6813      	ldr	r3, [r2, #0]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d1da      	bne.n	8003580 <prvAddNewTaskToReadyList+0x30>
				prvInitialiseTaskLists();
 80035ca:	f7ff ff8d 	bl	80034e8 <prvInitialiseTaskLists>
 80035ce:	e7d7      	b.n	8003580 <prvAddNewTaskToReadyList+0x30>
			taskYIELD_IF_USING_PREEMPTION();
 80035d0:	f7ff fd32 	bl	8003038 <vPortYield>
}
 80035d4:	e7f3      	b.n	80035be <prvAddNewTaskToReadyList+0x6e>
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	20000cd4 	.word	0x20000cd4
 80035dc:	20000c3c 	.word	0x20000c3c
 80035e0:	20000d34 	.word	0x20000d34
 80035e4:	20000ce4 	.word	0x20000ce4
 80035e8:	20000ce8 	.word	0x20000ce8
 80035ec:	20000c48 	.word	0x20000c48

080035f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	0004      	movs	r4, r0
 80035f4:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <prvAddCurrentTaskToDelayedList+0x64>)
 80035f8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035fa:	4b17      	ldr	r3, [pc, #92]	; (8003658 <prvAddCurrentTaskToDelayedList+0x68>)
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	3004      	adds	r0, #4
 8003600:	f7ff fccc 	bl	8002f9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003604:	1c63      	adds	r3, r4, #1
 8003606:	d013      	beq.n	8003630 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003608:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <prvAddCurrentTaskToDelayedList+0x68>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003610:	42a6      	cmp	r6, r4
 8003612:	d816      	bhi.n	8003642 <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003614:	4b11      	ldr	r3, [pc, #68]	; (800365c <prvAddCurrentTaskToDelayedList+0x6c>)
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <prvAddCurrentTaskToDelayedList+0x68>)
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	3104      	adds	r1, #4
 800361e:	f7ff fca5 	bl	8002f6c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <prvAddCurrentTaskToDelayedList+0x70>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	429c      	cmp	r4, r3
 8003628:	d212      	bcs.n	8003650 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <prvAddCurrentTaskToDelayedList+0x70>)
 800362c:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800362e:	e00f      	b.n	8003650 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003630:	2d00      	cmp	r5, #0
 8003632:	d0e9      	beq.n	8003608 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003634:	4b08      	ldr	r3, [pc, #32]	; (8003658 <prvAddCurrentTaskToDelayedList+0x68>)
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	3104      	adds	r1, #4
 800363a:	480a      	ldr	r0, [pc, #40]	; (8003664 <prvAddCurrentTaskToDelayedList+0x74>)
 800363c:	f7ff fc8a 	bl	8002f54 <vListInsertEnd>
 8003640:	e006      	b.n	8003650 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <prvAddCurrentTaskToDelayedList+0x78>)
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <prvAddCurrentTaskToDelayedList+0x68>)
 8003648:	6819      	ldr	r1, [r3, #0]
 800364a:	3104      	adds	r1, #4
 800364c:	f7ff fc8e 	bl	8002f6c <vListInsert>
}
 8003650:	bd70      	pop	{r4, r5, r6, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	20000d60 	.word	0x20000d60
 8003658:	20000c3c 	.word	0x20000c3c
 800365c:	20000c40 	.word	0x20000c40
 8003660:	20000d18 	.word	0x20000d18
 8003664:	20000d38 	.word	0x20000d38
 8003668:	20000c44 	.word	0x20000c44

0800366c <xTaskCreate>:
	{
 800366c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366e:	b087      	sub	sp, #28
 8003670:	9004      	str	r0, [sp, #16]
 8003672:	9105      	str	r1, [sp, #20]
 8003674:	0014      	movs	r4, r2
 8003676:	001f      	movs	r7, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003678:	0090      	lsls	r0, r2, #2
 800367a:	f7ff fdd1 	bl	8003220 <pvPortMalloc>
 800367e:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 8003680:	d01e      	beq.n	80036c0 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003682:	2054      	movs	r0, #84	; 0x54
 8003684:	f7ff fdcc 	bl	8003220 <pvPortMalloc>
 8003688:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 800368a:	d015      	beq.n	80036b8 <xTaskCreate+0x4c>
					pxNewTCB->pxStack = pxStack;
 800368c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800368e:	2d00      	cmp	r5, #0
 8003690:	d018      	beq.n	80036c4 <xTaskCreate+0x58>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003692:	2300      	movs	r3, #0
 8003694:	9303      	str	r3, [sp, #12]
 8003696:	9502      	str	r5, [sp, #8]
 8003698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	003b      	movs	r3, r7
 80036a2:	0022      	movs	r2, r4
 80036a4:	9905      	ldr	r1, [sp, #20]
 80036a6:	9804      	ldr	r0, [sp, #16]
 80036a8:	f7ff feda 	bl	8003460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036ac:	0028      	movs	r0, r5
 80036ae:	f7ff ff4f 	bl	8003550 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036b2:	2001      	movs	r0, #1
	}
 80036b4:	b007      	add	sp, #28
 80036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 80036b8:	0030      	movs	r0, r6
 80036ba:	f7ff fe1d 	bl	80032f8 <vPortFree>
 80036be:	e7e6      	b.n	800368e <xTaskCreate+0x22>
				pxNewTCB = NULL;
 80036c0:	2500      	movs	r5, #0
 80036c2:	e7e4      	b.n	800368e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036c4:	2001      	movs	r0, #1
 80036c6:	4240      	negs	r0, r0
		return xReturn;
 80036c8:	e7f4      	b.n	80036b4 <xTaskCreate+0x48>
	...

080036cc <vTaskStartScheduler>:
{
 80036cc:	b500      	push	{lr}
 80036ce:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <vTaskStartScheduler+0x44>)
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	490e      	ldr	r1, [pc, #56]	; (8003714 <vTaskStartScheduler+0x48>)
 80036dc:	480e      	ldr	r0, [pc, #56]	; (8003718 <vTaskStartScheduler+0x4c>)
 80036de:	f7ff ffc5 	bl	800366c <xTaskCreate>
	if( xReturn == pdPASS )
 80036e2:	2801      	cmp	r0, #1
 80036e4:	d003      	beq.n	80036ee <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	d00f      	beq.n	800370a <vTaskStartScheduler+0x3e>
}
 80036ea:	b003      	add	sp, #12
 80036ec:	bd00      	pop	{pc}
		portDISABLE_INTERRUPTS();
 80036ee:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80036f0:	2201      	movs	r2, #1
 80036f2:	4252      	negs	r2, r2
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <vTaskStartScheduler+0x50>)
 80036f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036f8:	3202      	adds	r2, #2
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <vTaskStartScheduler+0x54>)
 80036fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80036fe:	2200      	movs	r2, #0
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <vTaskStartScheduler+0x58>)
 8003702:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003704:	f7ff fd16 	bl	8003134 <xPortStartScheduler>
 8003708:	e7ef      	b.n	80036ea <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800370a:	b672      	cpsid	i
 800370c:	e7fe      	b.n	800370c <vTaskStartScheduler+0x40>
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	20000d14 	.word	0x20000d14
 8003714:	0800487c 	.word	0x0800487c
 8003718:	080039c9 	.word	0x080039c9
 800371c:	20000d18 	.word	0x20000d18
 8003720:	20000d34 	.word	0x20000d34
 8003724:	20000d60 	.word	0x20000d60

08003728 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003728:	4a02      	ldr	r2, [pc, #8]	; (8003734 <vTaskSuspendAll+0xc>)
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	4770      	bx	lr
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	20000ce0 	.word	0x20000ce0

08003738 <xTaskIncrementTick>:
{
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800373a:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <xTaskIncrementTick+0xf0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d166      	bne.n	8003810 <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003742:	4b3a      	ldr	r3, [pc, #232]	; (800382c <xTaskIncrementTick+0xf4>)
 8003744:	681d      	ldr	r5, [r3, #0]
 8003746:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003748:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800374a:	2d00      	cmp	r5, #0
 800374c:	d112      	bne.n	8003774 <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 800374e:	4b38      	ldr	r3, [pc, #224]	; (8003830 <xTaskIncrementTick+0xf8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <xTaskIncrementTick+0x24>
 8003758:	b672      	cpsid	i
 800375a:	e7fe      	b.n	800375a <xTaskIncrementTick+0x22>
 800375c:	4a34      	ldr	r2, [pc, #208]	; (8003830 <xTaskIncrementTick+0xf8>)
 800375e:	6811      	ldr	r1, [r2, #0]
 8003760:	4b34      	ldr	r3, [pc, #208]	; (8003834 <xTaskIncrementTick+0xfc>)
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	6010      	str	r0, [r2, #0]
 8003766:	6019      	str	r1, [r3, #0]
 8003768:	4a33      	ldr	r2, [pc, #204]	; (8003838 <xTaskIncrementTick+0x100>)
 800376a:	6813      	ldr	r3, [r2, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	f7ff fe50 	bl	8003414 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003774:	4b31      	ldr	r3, [pc, #196]	; (800383c <xTaskIncrementTick+0x104>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	429d      	cmp	r5, r3
 800377a:	d23d      	bcs.n	80037f8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800377c:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800377e:	4b30      	ldr	r3, [pc, #192]	; (8003840 <xTaskIncrementTick+0x108>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	0093      	lsls	r3, r2, #2
 8003786:	189b      	adds	r3, r3, r2
 8003788:	009a      	lsls	r2, r3, #2
 800378a:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <xTaskIncrementTick+0x10c>)
 800378c:	58d3      	ldr	r3, [r2, r3]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d943      	bls.n	800381a <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 8003792:	2401      	movs	r4, #1
 8003794:	e041      	b.n	800381a <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 8003796:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <xTaskIncrementTick+0xf8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02c      	beq.n	80037fc <xTaskIncrementTick+0xc4>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d12b      	bne.n	8003800 <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037a8:	4b21      	ldr	r3, [pc, #132]	; (8003830 <xTaskIncrementTick+0xf8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037b0:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80037b2:	429d      	cmp	r5, r3
 80037b4:	d329      	bcc.n	800380a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037b6:	1d37      	adds	r7, r6, #4
 80037b8:	0038      	movs	r0, r7
 80037ba:	f7ff fbef 	bl	8002f9c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037be:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037c4:	0030      	movs	r0, r6
 80037c6:	3018      	adds	r0, #24
 80037c8:	f7ff fbe8 	bl	8002f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037cc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <xTaskIncrementTick+0x110>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d901      	bls.n	80037da <xTaskIncrementTick+0xa2>
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <xTaskIncrementTick+0x110>)
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	0093      	lsls	r3, r2, #2
 80037dc:	189b      	adds	r3, r3, r2
 80037de:	009a      	lsls	r2, r3, #2
 80037e0:	4818      	ldr	r0, [pc, #96]	; (8003844 <xTaskIncrementTick+0x10c>)
 80037e2:	1880      	adds	r0, r0, r2
 80037e4:	0039      	movs	r1, r7
 80037e6:	f7ff fbb5 	bl	8002f54 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ea:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <xTaskIncrementTick+0x108>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d2cf      	bcs.n	8003796 <xTaskIncrementTick+0x5e>
 80037f6:	e7cf      	b.n	8003798 <xTaskIncrementTick+0x60>
 80037f8:	2400      	movs	r4, #0
 80037fa:	e7cd      	b.n	8003798 <xTaskIncrementTick+0x60>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037fc:	3301      	adds	r3, #1
 80037fe:	e7d1      	b.n	80037a4 <xTaskIncrementTick+0x6c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003800:	2201      	movs	r2, #1
 8003802:	4252      	negs	r2, r2
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <xTaskIncrementTick+0x104>)
 8003806:	601a      	str	r2, [r3, #0]
					break;
 8003808:	e7b9      	b.n	800377e <xTaskIncrementTick+0x46>
						xNextTaskUnblockTime = xItemValue;
 800380a:	4a0c      	ldr	r2, [pc, #48]	; (800383c <xTaskIncrementTick+0x104>)
 800380c:	6013      	str	r3, [r2, #0]
						break;
 800380e:	e7b6      	b.n	800377e <xTaskIncrementTick+0x46>
		++uxPendedTicks;
 8003810:	4a0e      	ldr	r2, [pc, #56]	; (800384c <xTaskIncrementTick+0x114>)
 8003812:	6813      	ldr	r3, [r2, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003818:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <xTaskIncrementTick+0x118>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d000      	beq.n	8003824 <xTaskIncrementTick+0xec>
			xSwitchRequired = pdTRUE;
 8003822:	2401      	movs	r4, #1
}
 8003824:	0020      	movs	r0, r4
 8003826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003828:	20000ce0 	.word	0x20000ce0
 800382c:	20000d60 	.word	0x20000d60
 8003830:	20000c40 	.word	0x20000c40
 8003834:	20000c44 	.word	0x20000c44
 8003838:	20000d1c 	.word	0x20000d1c
 800383c:	20000d18 	.word	0x20000d18
 8003840:	20000c3c 	.word	0x20000c3c
 8003844:	20000c48 	.word	0x20000c48
 8003848:	20000ce8 	.word	0x20000ce8
 800384c:	20000cdc 	.word	0x20000cdc
 8003850:	20000d64 	.word	0x20000d64

08003854 <xTaskResumeAll>:
{
 8003854:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <xTaskResumeAll+0xcc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <xTaskResumeAll+0xe>
 800385e:	b672      	cpsid	i
 8003860:	e7fe      	b.n	8003860 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8003862:	f7ff fbf5 	bl	8003050 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003866:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <xTaskResumeAll+0xcc>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	3a01      	subs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d150      	bne.n	8003916 <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <xTaskResumeAll+0xd0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <xTaskResumeAll+0x32>
BaseType_t xAlreadyYielded = pdFALSE;
 800387c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800387e:	f7ff fbf3 	bl	8003068 <vPortExitCritical>
}
 8003882:	0020      	movs	r0, r4
 8003884:	bd70      	pop	{r4, r5, r6, pc}
 8003886:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003888:	4b27      	ldr	r3, [pc, #156]	; (8003928 <xTaskResumeAll+0xd4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d023      	beq.n	80038d8 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003890:	4b25      	ldr	r3, [pc, #148]	; (8003928 <xTaskResumeAll+0xd4>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003896:	0020      	movs	r0, r4
 8003898:	3018      	adds	r0, #24
 800389a:	f7ff fb7f 	bl	8002f9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800389e:	1d25      	adds	r5, r4, #4
 80038a0:	0028      	movs	r0, r5
 80038a2:	f7ff fb7b 	bl	8002f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80038a8:	4b20      	ldr	r3, [pc, #128]	; (800392c <xTaskResumeAll+0xd8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d901      	bls.n	80038b4 <xTaskResumeAll+0x60>
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <xTaskResumeAll+0xd8>)
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	0093      	lsls	r3, r2, #2
 80038b6:	189b      	adds	r3, r3, r2
 80038b8:	009a      	lsls	r2, r3, #2
 80038ba:	481d      	ldr	r0, [pc, #116]	; (8003930 <xTaskResumeAll+0xdc>)
 80038bc:	1880      	adds	r0, r0, r2
 80038be:	0029      	movs	r1, r5
 80038c0:	f7ff fb48 	bl	8002f54 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <xTaskResumeAll+0xe0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3db      	bcc.n	8003888 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 80038d0:	2201      	movs	r2, #1
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <xTaskResumeAll+0xe4>)
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e7d7      	b.n	8003888 <xTaskResumeAll+0x34>
				if( pxTCB != NULL )
 80038d8:	2c00      	cmp	r4, #0
 80038da:	d001      	beq.n	80038e0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 80038dc:	f7ff fd9a 	bl	8003414 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <xTaskResumeAll+0xe8>)
 80038e2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038e4:	2c00      	cmp	r4, #0
 80038e6:	d10a      	bne.n	80038fe <xTaskResumeAll+0xaa>
				if( xYieldPending != pdFALSE )
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <xTaskResumeAll+0xe4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d014      	beq.n	800391a <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 80038f0:	f7ff fba2 	bl	8003038 <vPortYield>
						xAlreadyYielded = pdTRUE;
 80038f4:	2401      	movs	r4, #1
 80038f6:	e7c2      	b.n	800387e <xTaskResumeAll+0x2a>
							--uxPendedCounts;
 80038f8:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80038fa:	2c00      	cmp	r4, #0
 80038fc:	d007      	beq.n	800390e <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
 80038fe:	f7ff ff1b 	bl	8003738 <xTaskIncrementTick>
 8003902:	2800      	cmp	r0, #0
 8003904:	d0f8      	beq.n	80038f8 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8003906:	2201      	movs	r2, #1
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <xTaskResumeAll+0xe4>)
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e7f4      	b.n	80038f8 <xTaskResumeAll+0xa4>
						uxPendedTicks = 0;
 800390e:	2200      	movs	r2, #0
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <xTaskResumeAll+0xe8>)
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e7e8      	b.n	80038e8 <xTaskResumeAll+0x94>
BaseType_t xAlreadyYielded = pdFALSE;
 8003916:	2400      	movs	r4, #0
 8003918:	e7b1      	b.n	800387e <xTaskResumeAll+0x2a>
 800391a:	2400      	movs	r4, #0
 800391c:	e7af      	b.n	800387e <xTaskResumeAll+0x2a>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	20000ce0 	.word	0x20000ce0
 8003924:	20000cd4 	.word	0x20000cd4
 8003928:	20000d20 	.word	0x20000d20
 800392c:	20000ce8 	.word	0x20000ce8
 8003930:	20000c48 	.word	0x20000c48
 8003934:	20000c3c 	.word	0x20000c3c
 8003938:	20000d64 	.word	0x20000d64
 800393c:	20000cdc 	.word	0x20000cdc

08003940 <vTaskDelay>:
	{
 8003940:	b510      	push	{r4, lr}
 8003942:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003944:	d00e      	beq.n	8003964 <vTaskDelay+0x24>
			configASSERT( uxSchedulerSuspended == 0 );
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <vTaskDelay+0x30>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <vTaskDelay+0x12>
 800394e:	b672      	cpsid	i
 8003950:	e7fe      	b.n	8003950 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8003952:	f7ff fee9 	bl	8003728 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003956:	2100      	movs	r1, #0
 8003958:	0020      	movs	r0, r4
 800395a:	f7ff fe49 	bl	80035f0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800395e:	f7ff ff79 	bl	8003854 <xTaskResumeAll>
 8003962:	e000      	b.n	8003966 <vTaskDelay+0x26>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003964:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003966:	2800      	cmp	r0, #0
 8003968:	d101      	bne.n	800396e <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 800396a:	f7ff fb65 	bl	8003038 <vPortYield>
	}
 800396e:	bd10      	pop	{r4, pc}
 8003970:	20000ce0 	.word	0x20000ce0

08003974 <prvCheckTasksWaitingTermination>:
{
 8003974:	b510      	push	{r4, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <prvCheckTasksWaitingTermination+0x48>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01d      	beq.n	80039ba <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 800397e:	f7ff fed3 	bl	8003728 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <prvCheckTasksWaitingTermination+0x4c>)
 8003984:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8003986:	f7ff ff65 	bl	8003854 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800398a:	2c00      	cmp	r4, #0
 800398c:	d0f3      	beq.n	8003976 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 800398e:	f7ff fb5f 	bl	8003050 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <prvCheckTasksWaitingTermination+0x4c>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003998:	1d20      	adds	r0, r4, #4
 800399a:	f7ff faff 	bl	8002f9c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <prvCheckTasksWaitingTermination+0x50>)
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80039a6:	4a05      	ldr	r2, [pc, #20]	; (80039bc <prvCheckTasksWaitingTermination+0x48>)
 80039a8:	6813      	ldr	r3, [r2, #0]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 80039ae:	f7ff fb5b 	bl	8003068 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 80039b2:	0020      	movs	r0, r4
 80039b4:	f7ff fd4a 	bl	800344c <prvDeleteTCB>
 80039b8:	e7dd      	b.n	8003976 <prvCheckTasksWaitingTermination+0x2>
}
 80039ba:	bd10      	pop	{r4, pc}
 80039bc:	20000cd8 	.word	0x20000cd8
 80039c0:	20000d4c 	.word	0x20000d4c
 80039c4:	20000cd4 	.word	0x20000cd4

080039c8 <prvIdleTask>:
{
 80039c8:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 80039ca:	f7ff ffd3 	bl	8003974 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039ce:	4b03      	ldr	r3, [pc, #12]	; (80039dc <prvIdleTask+0x14>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d9f9      	bls.n	80039ca <prvIdleTask+0x2>
				taskYIELD();
 80039d6:	f7ff fb2f 	bl	8003038 <vPortYield>
 80039da:	e7f6      	b.n	80039ca <prvIdleTask+0x2>
 80039dc:	20000c48 	.word	0x20000c48

080039e0 <vTaskSwitchContext>:
{
 80039e0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <vTaskSwitchContext+0x78>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <vTaskSwitchContext+0x2a>
		xYieldPending = pdFALSE;
 80039ea:	2200      	movs	r2, #0
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <vTaskSwitchContext+0x7c>)
 80039ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <vTaskSwitchContext+0x80>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	009a      	lsls	r2, r3, #2
 80039f6:	18d2      	adds	r2, r2, r3
 80039f8:	0091      	lsls	r1, r2, #2
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <vTaskSwitchContext+0x84>)
 80039fc:	588a      	ldr	r2, [r1, r2]
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	d109      	bne.n	8003a16 <vTaskSwitchContext+0x36>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <vTaskSwitchContext+0x32>
 8003a06:	3b01      	subs	r3, #1
 8003a08:	e7f4      	b.n	80039f4 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <vTaskSwitchContext+0x7c>)
 8003a0e:	601a      	str	r2, [r3, #0]
}
 8003a10:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a12:	b672      	cpsid	i
 8003a14:	e7fe      	b.n	8003a14 <vTaskSwitchContext+0x34>
 8003a16:	4813      	ldr	r0, [pc, #76]	; (8003a64 <vTaskSwitchContext+0x84>)
 8003a18:	009a      	lsls	r2, r3, #2
 8003a1a:	1841      	adds	r1, r0, r1
 8003a1c:	684c      	ldr	r4, [r1, #4]
 8003a1e:	6864      	ldr	r4, [r4, #4]
 8003a20:	604c      	str	r4, [r1, #4]
 8003a22:	18d2      	adds	r2, r2, r3
 8003a24:	0091      	lsls	r1, r2, #2
 8003a26:	3108      	adds	r1, #8
 8003a28:	1840      	adds	r0, r0, r1
 8003a2a:	4284      	cmp	r4, r0
 8003a2c:	d00b      	beq.n	8003a46 <vTaskSwitchContext+0x66>
 8003a2e:	009a      	lsls	r2, r3, #2
 8003a30:	18d2      	adds	r2, r2, r3
 8003a32:	0091      	lsls	r1, r2, #2
 8003a34:	4a0b      	ldr	r2, [pc, #44]	; (8003a64 <vTaskSwitchContext+0x84>)
 8003a36:	1852      	adds	r2, r2, r1
 8003a38:	6852      	ldr	r2, [r2, #4]
 8003a3a:	68d1      	ldr	r1, [r2, #12]
 8003a3c:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <vTaskSwitchContext+0x88>)
 8003a3e:	6011      	str	r1, [r2, #0]
 8003a40:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <vTaskSwitchContext+0x80>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	e7e4      	b.n	8003a10 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a46:	6860      	ldr	r0, [r4, #4]
 8003a48:	009a      	lsls	r2, r3, #2
 8003a4a:	18d2      	adds	r2, r2, r3
 8003a4c:	0091      	lsls	r1, r2, #2
 8003a4e:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <vTaskSwitchContext+0x84>)
 8003a50:	1852      	adds	r2, r2, r1
 8003a52:	6050      	str	r0, [r2, #4]
 8003a54:	e7eb      	b.n	8003a2e <vTaskSwitchContext+0x4e>
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	20000ce0 	.word	0x20000ce0
 8003a5c:	20000d64 	.word	0x20000d64
 8003a60:	20000ce8 	.word	0x20000ce8
 8003a64:	20000c48 	.word	0x20000c48
 8003a68:	20000c3c 	.word	0x20000c3c

08003a6c <xTaskRemoveFromEventList>:
{
 8003a6c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a6e:	68c3      	ldr	r3, [r0, #12]
 8003a70:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003a72:	2c00      	cmp	r4, #0
 8003a74:	d026      	beq.n	8003ac4 <xTaskRemoveFromEventList+0x58>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a76:	0025      	movs	r5, r4
 8003a78:	3518      	adds	r5, #24
 8003a7a:	0028      	movs	r0, r5
 8003a7c:	f7ff fa8e 	bl	8002f9c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <xTaskRemoveFromEventList+0x6c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11f      	bne.n	8003ac8 <xTaskRemoveFromEventList+0x5c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a88:	1d25      	adds	r5, r4, #4
 8003a8a:	0028      	movs	r0, r5
 8003a8c:	f7ff fa86 	bl	8002f9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <xTaskRemoveFromEventList+0x70>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d901      	bls.n	8003a9e <xTaskRemoveFromEventList+0x32>
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <xTaskRemoveFromEventList+0x70>)
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	0093      	lsls	r3, r2, #2
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	009a      	lsls	r2, r3, #2
 8003aa4:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <xTaskRemoveFromEventList+0x74>)
 8003aa6:	1880      	adds	r0, r0, r2
 8003aa8:	0029      	movs	r1, r5
 8003aaa:	f7ff fa53 	bl	8002f54 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003aae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <xTaskRemoveFromEventList+0x78>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d90b      	bls.n	8003ad2 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 8003aba:	2201      	movs	r2, #1
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <xTaskRemoveFromEventList+0x7c>)
 8003abe:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 8003ac0:	2001      	movs	r0, #1
}
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 8003ac4:	b672      	cpsid	i
 8003ac6:	e7fe      	b.n	8003ac6 <xTaskRemoveFromEventList+0x5a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ac8:	0029      	movs	r1, r5
 8003aca:	4808      	ldr	r0, [pc, #32]	; (8003aec <xTaskRemoveFromEventList+0x80>)
 8003acc:	f7ff fa42 	bl	8002f54 <vListInsertEnd>
 8003ad0:	e7ed      	b.n	8003aae <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 8003ad2:	2000      	movs	r0, #0
	return xReturn;
 8003ad4:	e7f5      	b.n	8003ac2 <xTaskRemoveFromEventList+0x56>
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	20000ce0 	.word	0x20000ce0
 8003adc:	20000ce8 	.word	0x20000ce8
 8003ae0:	20000c48 	.word	0x20000c48
 8003ae4:	20000c3c 	.word	0x20000c3c
 8003ae8:	20000d64 	.word	0x20000d64
 8003aec:	20000d20 	.word	0x20000d20

08003af0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003af0:	b500      	push	{lr}
 8003af2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003af4:	220c      	movs	r2, #12
 8003af6:	2100      	movs	r1, #0
 8003af8:	a801      	add	r0, sp, #4
 8003afa:	f000 fcbf 	bl	800447c <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003afe:	482d      	ldr	r0, [pc, #180]	; (8003bb4 <MX_ADC_Init+0xc4>)
 8003b00:	4b2d      	ldr	r3, [pc, #180]	; (8003bb8 <MX_ADC_Init+0xc8>)
 8003b02:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b04:	2300      	movs	r3, #0
 8003b06:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003b08:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b0a:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003b10:	2108      	movs	r1, #8
 8003b12:	6141      	str	r1, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003b14:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003b16:	61c3      	str	r3, [r0, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003b18:	6202      	str	r2, [r0, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003b1a:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b1c:	21c2      	movs	r1, #194	; 0xc2
 8003b1e:	31ff      	adds	r1, #255	; 0xff
 8003b20:	6281      	str	r1, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b22:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003b24:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003b26:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003b28:	f7fd fea2 	bl	8001870 <HAL_ADC_Init>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d12e      	bne.n	8003b8e <MX_ADC_Init+0x9e>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003b30:	2301      	movs	r3, #1
 8003b32:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	015b      	lsls	r3, r3, #5
 8003b38:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b3e:	a901      	add	r1, sp, #4
 8003b40:	481c      	ldr	r0, [pc, #112]	; (8003bb4 <MX_ADC_Init+0xc4>)
 8003b42:	f7fd fffd 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d124      	bne.n	8003b94 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b4e:	a901      	add	r1, sp, #4
 8003b50:	4818      	ldr	r0, [pc, #96]	; (8003bb4 <MX_ADC_Init+0xc4>)
 8003b52:	f7fd fff5 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d11f      	bne.n	8003b9a <MX_ADC_Init+0xaa>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b5e:	a901      	add	r1, sp, #4
 8003b60:	4814      	ldr	r0, [pc, #80]	; (8003bb4 <MX_ADC_Init+0xc4>)
 8003b62:	f7fd ffed 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d11a      	bne.n	8003ba0 <MX_ADC_Init+0xb0>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b6e:	a901      	add	r1, sp, #4
 8003b70:	4810      	ldr	r0, [pc, #64]	; (8003bb4 <MX_ADC_Init+0xc4>)
 8003b72:	f7fd ffe5 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d115      	bne.n	8003ba6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003b7e:	a901      	add	r1, sp, #4
 8003b80:	480c      	ldr	r0, [pc, #48]	; (8003bb4 <MX_ADC_Init+0xc4>)
 8003b82:	f7fd ffdd 	bl	8001b40 <HAL_ADC_ConfigChannel>
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d110      	bne.n	8003bac <MX_ADC_Init+0xbc>
  {
    Error_Handler();
  }

}
 8003b8a:	b005      	add	sp, #20
 8003b8c:	bd00      	pop	{pc}
    Error_Handler();
 8003b8e:	f000 fa73 	bl	8004078 <Error_Handler>
 8003b92:	e7cd      	b.n	8003b30 <MX_ADC_Init+0x40>
    Error_Handler();
 8003b94:	f000 fa70 	bl	8004078 <Error_Handler>
 8003b98:	e7d7      	b.n	8003b4a <MX_ADC_Init+0x5a>
    Error_Handler();
 8003b9a:	f000 fa6d 	bl	8004078 <Error_Handler>
 8003b9e:	e7dc      	b.n	8003b5a <MX_ADC_Init+0x6a>
    Error_Handler();
 8003ba0:	f000 fa6a 	bl	8004078 <Error_Handler>
 8003ba4:	e7e1      	b.n	8003b6a <MX_ADC_Init+0x7a>
    Error_Handler();
 8003ba6:	f000 fa67 	bl	8004078 <Error_Handler>
 8003baa:	e7e6      	b.n	8003b7a <MX_ADC_Init+0x8a>
    Error_Handler();
 8003bac:	f000 fa64 	bl	8004078 <Error_Handler>
}
 8003bb0:	e7eb      	b.n	8003b8a <MX_ADC_Init+0x9a>
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	20000dc8 	.word	0x20000dc8
 8003bb8:	40012400 	.word	0x40012400

08003bbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003bbc:	b530      	push	{r4, r5, lr}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc2:	2214      	movs	r2, #20
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	a803      	add	r0, sp, #12
 8003bc8:	f000 fc58 	bl	800447c <memset>
  if(adcHandle->Instance==ADC1)
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_ADC_MspInit+0x88>)
 8003bce:	6822      	ldr	r2, [r4, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003bd4:	b009      	add	sp, #36	; 0x24
 8003bd6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_ADC_MspInit+0x8c>)
 8003bda:	699a      	ldr	r2, [r3, #24]
 8003bdc:	2580      	movs	r5, #128	; 0x80
 8003bde:	00ad      	lsls	r5, r5, #2
 8003be0:	432a      	orrs	r2, r5
 8003be2:	619a      	str	r2, [r3, #24]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	402a      	ands	r2, r5
 8003be8:	9201      	str	r2, [sp, #4]
 8003bea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	2180      	movs	r1, #128	; 0x80
 8003bf0:	0289      	lsls	r1, r1, #10
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	615a      	str	r2, [r3, #20]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	9302      	str	r3, [sp, #8]
 8003bfc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = HV1_Pin|HV2_Pin|PILOT_ADC_Pin|IMEAS_L1_Pin 
 8003bfe:	233e      	movs	r3, #62	; 0x3e
 8003c00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c02:	3b3b      	subs	r3, #59	; 0x3b
 8003c04:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c06:	a903      	add	r1, sp, #12
 8003c08:	2090      	movs	r0, #144	; 0x90
 8003c0a:	05c0      	lsls	r0, r0, #23
 8003c0c:	f7fe f960 	bl	8001ed0 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8003c10:	480e      	ldr	r0, [pc, #56]	; (8003c4c <HAL_ADC_MspInit+0x90>)
 8003c12:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <HAL_ADC_MspInit+0x94>)
 8003c14:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c16:	2300      	movs	r3, #0
 8003c18:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c1a:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	60c2      	str	r2, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c20:	6105      	str	r5, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	0112      	lsls	r2, r2, #4
 8003c26:	6142      	str	r2, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003c28:	2220      	movs	r2, #32
 8003c2a:	6182      	str	r2, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003c2c:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003c2e:	f7fe f893 	bl	8001d58 <HAL_DMA_Init>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d103      	bne.n	8003c3e <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_ADC_MspInit+0x90>)
 8003c38:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003c3a:	625c      	str	r4, [r3, #36]	; 0x24
}
 8003c3c:	e7ca      	b.n	8003bd4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8003c3e:	f000 fa1b 	bl	8004078 <Error_Handler>
 8003c42:	e7f8      	b.n	8003c36 <HAL_ADC_MspInit+0x7a>
 8003c44:	40012400 	.word	0x40012400
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	20000d84 	.word	0x20000d84
 8003c50:	40020008 	.word	0x40020008

08003c54 <adc_Start>:
  }
} 

/* USER CODE BEGIN 1 */

void adc_Start(void){
 8003c54:	b510      	push	{r4, lr}
	HAL_ADC_Start_DMA(&hadc, Buffer, NB_ADC_CHANNELS);
 8003c56:	2205      	movs	r2, #5
 8003c58:	4902      	ldr	r1, [pc, #8]	; (8003c64 <adc_Start+0x10>)
 8003c5a:	4803      	ldr	r0, [pc, #12]	; (8003c68 <adc_Start+0x14>)
 8003c5c:	f7fd fece 	bl	80019fc <HAL_ADC_Start_DMA>
}
 8003c60:	bd10      	pop	{r4, pc}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	20000d70 	.word	0x20000d70
 8003c68:	20000dc8 	.word	0x20000dc8

08003c6c <read_pilot_voltage>:



int16_t read_pilot_voltage(void){
 8003c6c:	b510      	push	{r4, lr}
	uint32_t c;
	int16_t mv;
	c = Buffer[2];
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <read_pilot_voltage+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
	mv = ((uint32_t)c * 3000) / 4096.0;
 8003c72:	4807      	ldr	r0, [pc, #28]	; (8003c90 <read_pilot_voltage+0x24>)
 8003c74:	4358      	muls	r0, r3
 8003c76:	f7fd fd4b 	bl	8001710 <__aeabi_ui2d>
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <read_pilot_voltage+0x28>)
 8003c7e:	f7fc ff7d 	bl	8000b7c <__aeabi_dmul>
 8003c82:	f7fd fd11 	bl	80016a8 <__aeabi_d2iz>
 8003c86:	b200      	sxth	r0, r0
	return mv;

}
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	20000d70 	.word	0x20000d70
 8003c90:	00000bb8 	.word	0x00000bb8
 8003c94:	3f300000 	.word	0x3f300000

08003c98 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003c98:	b500      	push	{lr}
 8003c9a:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c9c:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <MX_DMA_Init+0x2c>)
 8003c9e:	6951      	ldr	r1, [r2, #20]
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	4319      	orrs	r1, r3
 8003ca4:	6151      	str	r1, [r2, #20]
 8003ca6:	6952      	ldr	r2, [r2, #20]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2103      	movs	r1, #3
 8003cb2:	2009      	movs	r0, #9
 8003cb4:	f7fd ffea 	bl	8001c8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003cb8:	2009      	movs	r0, #9
 8003cba:	f7fe f819 	bl	8001cf0 <HAL_NVIC_EnableIRQ>

}
 8003cbe:	b003      	add	sp, #12
 8003cc0:	bd00      	pop	{pc}
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <cmpfunc>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
int cmpfunc (const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
 8003cc8:	6800      	ldr	r0, [r0, #0]
 8003cca:	680b      	ldr	r3, [r1, #0]
 8003ccc:	1ac0      	subs	r0, r0, r3
}
 8003cce:	4770      	bx	lr

08003cd0 <StartDefaultTask>:
{
 8003cd0:	b510      	push	{r4, lr}
	  osDelay(1);
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f7ff f921 	bl	8002f1a <osDelay>
 8003cd8:	e7fb      	b.n	8003cd2 <StartDefaultTask+0x2>
	...

08003cdc <StartTaskPilot>:
{
 8003cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cde:	46c6      	mov	lr, r8
 8003ce0:	b500      	push	{lr}
 8003ce2:	b090      	sub	sp, #64	; 0x40
  adc_Start();
 8003ce4:	f7ff ffb6 	bl	8003c54 <adc_Start>
  for(int i = 0; i < BUFFER_SIZE; i++){
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e004      	b.n	8003cf6 <StartTaskPilot+0x1a>
	  samples[i] = 3000;
 8003cec:	009a      	lsls	r2, r3, #2
 8003cee:	492a      	ldr	r1, [pc, #168]	; (8003d98 <StartTaskPilot+0xbc>)
 8003cf0:	4668      	mov	r0, sp
 8003cf2:	5011      	str	r1, [r2, r0]
  for(int i = 0; i < BUFFER_SIZE; i++){
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	d9f8      	bls.n	8003cec <StartTaskPilot+0x10>
 8003cfa:	2700      	movs	r7, #0
 8003cfc:	2500      	movs	r5, #0
 8003cfe:	26ff      	movs	r6, #255	; 0xff
 8003d00:	2400      	movs	r4, #0
 8003d02:	e01a      	b.n	8003d3a <StartTaskPilot+0x5e>
			sum += samples[i];
 8003d04:	0099      	lsls	r1, r3, #2
 8003d06:	466a      	mov	r2, sp
 8003d08:	5889      	ldr	r1, [r1, r2]
 8003d0a:	1864      	adds	r4, r4, r1
		for(int i = BUFFER_SIZE /2; i < BUFFER_SIZE; i++){
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	2b0f      	cmp	r3, #15
 8003d10:	d9f8      	bls.n	8003d04 <StartTaskPilot+0x28>
		filtered = sum / (BUFFER_SIZE /2);
 8003d12:	08e4      	lsrs	r4, r4, #3
		samples[samplectr++ % BUFFER_SIZE] = pilot_voltage;
 8003d14:	4647      	mov	r7, r8
	if(filtered > 1600 && filtered < 2000 && time_elapsed > STATE_MIN_DELAY){
 8003d16:	0022      	movs	r2, r4
 8003d18:	21c7      	movs	r1, #199	; 0xc7
 8003d1a:	0049      	lsls	r1, r1, #1
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <StartTaskPilot+0xc0>)
 8003d1e:	18e3      	adds	r3, r4, r3
 8003d20:	428b      	cmp	r3, r1
 8003d22:	d824      	bhi.n	8003d6e <StartTaskPilot+0x92>
 8003d24:	2d37      	cmp	r5, #55	; 0x37
 8003d26:	d922      	bls.n	8003d6e <StartTaskPilot+0x92>
		PilotState = PILOT_READY;
 8003d28:	2202      	movs	r2, #2
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <StartTaskPilot+0xc4>)
 8003d2c:	701a      	strb	r2, [r3, #0]
	if(PilotState != old_state) {
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <StartTaskPilot+0xc4>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	429e      	cmp	r6, r3
 8003d34:	d000      	beq.n	8003d38 <StartTaskPilot+0x5c>
		time_elapsed = 0;
 8003d36:	2500      	movs	r5, #0
 8003d38:	001e      	movs	r6, r3
	osDelay(SAMPLE_PERIOD);
 8003d3a:	2009      	movs	r0, #9
 8003d3c:	f7ff f8ed 	bl	8002f1a <osDelay>
	time_elapsed++;
 8003d40:	3501      	adds	r5, #1
	pilot_voltage = (int)read_pilot_voltage();
 8003d42:	f7ff ff93 	bl	8003c6c <read_pilot_voltage>
	if(pilot_voltage > 1400){
 8003d46:	23af      	movs	r3, #175	; 0xaf
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4298      	cmp	r0, r3
 8003d4c:	dde3      	ble.n	8003d16 <StartTaskPilot+0x3a>
		samples[samplectr++ % BUFFER_SIZE] = pilot_voltage;
 8003d4e:	1c7b      	adds	r3, r7, #1
 8003d50:	4698      	mov	r8, r3
 8003d52:	230f      	movs	r3, #15
 8003d54:	403b      	ands	r3, r7
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	466a      	mov	r2, sp
 8003d5a:	5098      	str	r0, [r3, r2]
		qsort(samples, BUFFER_SIZE, sizeof(int), cmpfunc);
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <StartTaskPilot+0xc8>)
 8003d5e:	2204      	movs	r2, #4
 8003d60:	2110      	movs	r1, #16
 8003d62:	4668      	mov	r0, sp
 8003d64:	f000 fbc8 	bl	80044f8 <qsort>
		for(int i = BUFFER_SIZE /2; i < BUFFER_SIZE; i++){
 8003d68:	2308      	movs	r3, #8
		sum = 0;
 8003d6a:	2400      	movs	r4, #0
		for(int i = BUFFER_SIZE /2; i < BUFFER_SIZE; i++){
 8003d6c:	e7cf      	b.n	8003d0e <StartTaskPilot+0x32>
	} else if(filtered >= 2100 && filtered < 2250 && time_elapsed > STATE_MIN_DELAY){
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <StartTaskPilot+0xcc>)
 8003d70:	469c      	mov	ip, r3
 8003d72:	4462      	add	r2, ip
 8003d74:	2a95      	cmp	r2, #149	; 0x95
 8003d76:	d805      	bhi.n	8003d84 <StartTaskPilot+0xa8>
 8003d78:	2d37      	cmp	r5, #55	; 0x37
 8003d7a:	d903      	bls.n	8003d84 <StartTaskPilot+0xa8>
		PilotState = PILOT_VEHICLE_PRESENT;
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <StartTaskPilot+0xc4>)
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e7d4      	b.n	8003d2e <StartTaskPilot+0x52>
	} else if(filtered >= 2350 && time_elapsed > STATE_MIN_DELAY) {
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <StartTaskPilot+0xd0>)
 8003d86:	429c      	cmp	r4, r3
 8003d88:	ddd1      	ble.n	8003d2e <StartTaskPilot+0x52>
 8003d8a:	2d37      	cmp	r5, #55	; 0x37
 8003d8c:	d9cf      	bls.n	8003d2e <StartTaskPilot+0x52>
		PilotState = PILOT_VEHICLE_NOT_DETECTED;
 8003d8e:	2200      	movs	r2, #0
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <StartTaskPilot+0xc4>)
 8003d92:	701a      	strb	r2, [r3, #0]
 8003d94:	e7cb      	b.n	8003d2e <StartTaskPilot+0x52>
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	00000bb8 	.word	0x00000bb8
 8003d9c:	fffff9bf 	.word	0xfffff9bf
 8003da0:	20000d68 	.word	0x20000d68
 8003da4:	08003cc9 	.word	0x08003cc9
 8003da8:	fffff7cc 	.word	0xfffff7cc
 8003dac:	0000092d 	.word	0x0000092d

08003db0 <StartTaskMainTask>:
{
 8003db0:	b510      	push	{r4, lr}
  set_indicator(LED_POWER, TRUE);
 8003db2:	2101      	movs	r1, #1
 8003db4:	2002      	movs	r0, #2
 8003db6:	f000 f8e1 	bl	8003f7c <set_indicator>
  set_contactor(FALSE);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 f8ca 	bl	8003f54 <set_contactor>
  set_pwm(FALSE, 0.0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f000 fadb 	bl	8004380 <set_pwm>
  BOOLEAN blinker_blue = FALSE;
 8003dca:	2400      	movs	r4, #0
 8003dcc:	e00d      	b.n	8003dea <StartTaskMainTask+0x3a>
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET){
 8003dce:	2101      	movs	r1, #1
 8003dd0:	2090      	movs	r0, #144	; 0x90
 8003dd2:	05c0      	lsls	r0, r0, #23
 8003dd4:	f7fe f942 	bl	800205c <HAL_GPIO_ReadPin>
 8003dd8:	2801      	cmp	r0, #1
 8003dda:	d01c      	beq.n	8003e16 <StartTaskMainTask+0x66>
		set_contactor(FALSE);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f000 f8b9 	bl	8003f54 <set_contactor>
		set_indicator(LED_DISCO_GREEN, FALSE);
 8003de2:	2100      	movs	r1, #0
 8003de4:	2001      	movs	r0, #1
 8003de6:	f000 f8c9 	bl	8003f7c <set_indicator>
	osDelay(20);
 8003dea:	2014      	movs	r0, #20
 8003dec:	f7ff f895 	bl	8002f1a <osDelay>
	freectr++;
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <StartTaskMainTask+0x74>)
 8003df2:	8818      	ldrh	r0, [r3, #0]
 8003df4:	3001      	adds	r0, #1
 8003df6:	b280      	uxth	r0, r0
 8003df8:	8018      	strh	r0, [r3, #0]
	if(freectr % 10 == 0){
 8003dfa:	210a      	movs	r1, #10
 8003dfc:	f7fc fa0a 	bl	8000214 <__aeabi_uidivmod>
 8003e00:	b289      	uxth	r1, r1
 8003e02:	2900      	cmp	r1, #0
 8003e04:	d1e3      	bne.n	8003dce <StartTaskMainTask+0x1e>
		set_indicator(LED_DISCO_BLUE, blinker_blue = !blinker_blue);
 8003e06:	4263      	negs	r3, r4
 8003e08:	415c      	adcs	r4, r3
 8003e0a:	b2e4      	uxtb	r4, r4
 8003e0c:	0021      	movs	r1, r4
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f000 f8b4 	bl	8003f7c <set_indicator>
 8003e14:	e7db      	b.n	8003dce <StartTaskMainTask+0x1e>
		set_contactor(TRUE);
 8003e16:	f000 f89d 	bl	8003f54 <set_contactor>
		set_indicator(LED_DISCO_GREEN, TRUE);
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f000 f8ad 	bl	8003f7c <set_indicator>
 8003e22:	e7e2      	b.n	8003dea <StartTaskMainTask+0x3a>
 8003e24:	20000d6a 	.word	0x20000d6a

08003e28 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	b092      	sub	sp, #72	; 0x48
  osMessageQDef(ChargingStatus, 16, uint16_t);
 8003e2c:	a810      	add	r0, sp, #64	; 0x40
 8003e2e:	4c18      	ldr	r4, [pc, #96]	; (8003e90 <MX_FREERTOS_Init+0x68>)
 8003e30:	0025      	movs	r5, r4
 8003e32:	0003      	movs	r3, r0
 8003e34:	cd06      	ldmia	r5!, {r1, r2}
 8003e36:	c306      	stmia	r3!, {r1, r2}
  ChargingStatusHandle = osMessageCreate(osMessageQ(ChargingStatus), NULL);
 8003e38:	2100      	movs	r1, #0
 8003e3a:	f7ff f876 	bl	8002f2a <osMessageCreate>
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <MX_FREERTOS_Init+0x6c>)
 8003e40:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003e42:	a80b      	add	r0, sp, #44	; 0x2c
 8003e44:	0003      	movs	r3, r0
 8003e46:	002a      	movs	r2, r5
 8003e48:	ca62      	ldmia	r2!, {r1, r5, r6}
 8003e4a:	c362      	stmia	r3!, {r1, r5, r6}
 8003e4c:	ca22      	ldmia	r2!, {r1, r5}
 8003e4e:	c322      	stmia	r3!, {r1, r5}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003e50:	2100      	movs	r1, #0
 8003e52:	f7ff f848 	bl	8002ee6 <osThreadCreate>
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <MX_FREERTOS_Init+0x70>)
 8003e58:	6018      	str	r0, [r3, #0]
  osThreadDef(Pilot, StartTaskPilot, osPriorityNormal, 0, 128);
 8003e5a:	a806      	add	r0, sp, #24
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	0023      	movs	r3, r4
 8003e60:	331c      	adds	r3, #28
 8003e62:	cb62      	ldmia	r3!, {r1, r5, r6}
 8003e64:	c262      	stmia	r2!, {r1, r5, r6}
 8003e66:	cb22      	ldmia	r3!, {r1, r5}
 8003e68:	c222      	stmia	r2!, {r1, r5}
  PilotHandle = osThreadCreate(osThread(Pilot), NULL);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f7ff f83b 	bl	8002ee6 <osThreadCreate>
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <MX_FREERTOS_Init+0x74>)
 8003e72:	6018      	str	r0, [r3, #0]
  osThreadDef(MainTask, StartTaskMainTask, osPriorityIdle, 0, 128);
 8003e74:	a801      	add	r0, sp, #4
 8003e76:	0002      	movs	r2, r0
 8003e78:	3430      	adds	r4, #48	; 0x30
 8003e7a:	cc2a      	ldmia	r4!, {r1, r3, r5}
 8003e7c:	c22a      	stmia	r2!, {r1, r3, r5}
 8003e7e:	cc0a      	ldmia	r4!, {r1, r3}
 8003e80:	c20a      	stmia	r2!, {r1, r3}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8003e82:	2100      	movs	r1, #0
 8003e84:	f7ff f82f 	bl	8002ee6 <osThreadCreate>
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <MX_FREERTOS_Init+0x78>)
 8003e8a:	6018      	str	r0, [r3, #0]
}
 8003e8c:	b012      	add	sp, #72	; 0x48
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	080047b8 	.word	0x080047b8
 8003e94:	20000e20 	.word	0x20000e20
 8003e98:	20000e14 	.word	0x20000e14
 8003e9c:	20000e18 	.word	0x20000e18
 8003ea0:	20000e1c 	.word	0x20000e1c

08003ea4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea6:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea8:	2214      	movs	r2, #20
 8003eaa:	2100      	movs	r1, #0
 8003eac:	a803      	add	r0, sp, #12
 8003eae:	f000 fae5 	bl	800447c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <MX_GPIO_Init+0x9c>)
 8003eb4:	6959      	ldr	r1, [r3, #20]
 8003eb6:	2080      	movs	r0, #128	; 0x80
 8003eb8:	0280      	lsls	r0, r0, #10
 8003eba:	4301      	orrs	r1, r0
 8003ebc:	6159      	str	r1, [r3, #20]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	4002      	ands	r2, r0
 8003ec2:	9200      	str	r2, [sp, #0]
 8003ec4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec6:	6959      	ldr	r1, [r3, #20]
 8003ec8:	2080      	movs	r0, #128	; 0x80
 8003eca:	02c0      	lsls	r0, r0, #11
 8003ecc:	4301      	orrs	r1, r0
 8003ece:	6159      	str	r1, [r3, #20]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	4002      	ands	r2, r0
 8003ed4:	9201      	str	r2, [sp, #4]
 8003ed6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	2180      	movs	r1, #128	; 0x80
 8003edc:	0309      	lsls	r1, r1, #12
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	615a      	str	r2, [r3, #20]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	400b      	ands	r3, r1
 8003ee6:	9302      	str	r3, [sp, #8]
 8003ee8:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D8_Pin|LED_D9_Pin|LED_D10_Pin|CONTACTOR_Pin 
 8003eea:	4f16      	ldr	r7, [pc, #88]	; (8003f44 <MX_GPIO_Init+0xa0>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	0039      	movs	r1, r7
 8003ef0:	4815      	ldr	r0, [pc, #84]	; (8003f48 <MX_GPIO_Init+0xa4>)
 8003ef2:	f7fe f8ba 	bl	800206a <HAL_GPIO_WritePin>
                          |LED_D11_Pin|LED_D12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8003ef6:	26c0      	movs	r6, #192	; 0xc0
 8003ef8:	00b6      	lsls	r6, r6, #2
 8003efa:	2200      	movs	r2, #0
 8003efc:	0031      	movs	r1, r6
 8003efe:	4813      	ldr	r0, [pc, #76]	; (8003f4c <MX_GPIO_Init+0xa8>)
 8003f00:	f7fe f8b3 	bl	800206a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003f04:	2501      	movs	r5, #1
 8003f06:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003f08:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <MX_GPIO_Init+0xac>)
 8003f0a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0c:	2400      	movs	r4, #0
 8003f0e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003f10:	a903      	add	r1, sp, #12
 8003f12:	2090      	movs	r0, #144	; 0x90
 8003f14:	05c0      	lsls	r0, r0, #23
 8003f16:	f7fd ffdb 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LED_D8_Pin|LED_D9_Pin|LED_D10_Pin|CONTACTOR_Pin 
 8003f1a:	9703      	str	r7, [sp, #12]
                          |LED_D11_Pin|LED_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f1c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f22:	a903      	add	r1, sp, #12
 8003f24:	4808      	ldr	r0, [pc, #32]	; (8003f48 <MX_GPIO_Init+0xa4>)
 8003f26:	f7fd ffd3 	bl	8001ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8003f2a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f2c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f32:	a903      	add	r1, sp, #12
 8003f34:	4805      	ldr	r0, [pc, #20]	; (8003f4c <MX_GPIO_Init+0xa8>)
 8003f36:	f7fd ffcb 	bl	8001ed0 <HAL_GPIO_Init>

}
 8003f3a:	b009      	add	sp, #36	; 0x24
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	40021000 	.word	0x40021000
 8003f44:	00008037 	.word	0x00008037
 8003f48:	48000400 	.word	0x48000400
 8003f4c:	48000800 	.word	0x48000800
 8003f50:	10120000 	.word	0x10120000

08003f54 <set_contactor>:

/* USER CODE BEGIN 2 */
void set_contactor(BOOLEAN state){
 8003f54:	b510      	push	{r4, lr}
	if(state){
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d106      	bne.n	8003f68 <set_contactor+0x14>
		HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, GPIO_PIN_RESET);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2180      	movs	r1, #128	; 0x80
 8003f5e:	0209      	lsls	r1, r1, #8
 8003f60:	4805      	ldr	r0, [pc, #20]	; (8003f78 <set_contactor+0x24>)
 8003f62:	f7fe f882 	bl	800206a <HAL_GPIO_WritePin>
	}

}
 8003f66:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, GPIO_PIN_SET);
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2180      	movs	r1, #128	; 0x80
 8003f6c:	0209      	lsls	r1, r1, #8
 8003f6e:	4802      	ldr	r0, [pc, #8]	; (8003f78 <set_contactor+0x24>)
 8003f70:	f7fe f87b 	bl	800206a <HAL_GPIO_WritePin>
 8003f74:	e7f7      	b.n	8003f66 <set_contactor+0x12>
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	48000400 	.word	0x48000400

08003f7c <set_indicator>:

void set_indicator(INDICATOR led, BOOLEAN state){
 8003f7c:	b510      	push	{r4, lr}
	state = state ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8003f7e:	1e4a      	subs	r2, r1, #1
 8003f80:	4191      	sbcs	r1, r2
 8003f82:	b2ca      	uxtb	r2, r1
	switch(led){
 8003f84:	2806      	cmp	r0, #6
 8003f86:	d808      	bhi.n	8003f9a <set_indicator+0x1e>
 8003f88:	0080      	lsls	r0, r0, #2
 8003f8a:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <set_indicator+0x60>)
 8003f8c:	581b      	ldr	r3, [r3, r0]
 8003f8e:	469f      	mov	pc, r3
	case LED_DISCO_BLUE:
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, state);
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	0049      	lsls	r1, r1, #1
 8003f94:	4812      	ldr	r0, [pc, #72]	; (8003fe0 <set_indicator+0x64>)
 8003f96:	f7fe f868 	bl	800206a <HAL_GPIO_WritePin>
		break;
	case LED_FAULT:
		HAL_GPIO_WritePin(LED_D12_GPIO_Port, LED_D12_Pin, state);
		break;
	}
}
 8003f9a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 8003f9c:	2180      	movs	r1, #128	; 0x80
 8003f9e:	0089      	lsls	r1, r1, #2
 8003fa0:	480f      	ldr	r0, [pc, #60]	; (8003fe0 <set_indicator+0x64>)
 8003fa2:	f7fe f862 	bl	800206a <HAL_GPIO_WritePin>
		break;
 8003fa6:	e7f8      	b.n	8003f9a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D8_GPIO_Port, LED_D8_Pin, state);
 8003fa8:	2101      	movs	r1, #1
 8003faa:	480e      	ldr	r0, [pc, #56]	; (8003fe4 <set_indicator+0x68>)
 8003fac:	f7fe f85d 	bl	800206a <HAL_GPIO_WritePin>
		break;
 8003fb0:	e7f3      	b.n	8003f9a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D9_GPIO_Port, LED_D9_Pin, state);
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	480b      	ldr	r0, [pc, #44]	; (8003fe4 <set_indicator+0x68>)
 8003fb6:	f7fe f858 	bl	800206a <HAL_GPIO_WritePin>
		break;
 8003fba:	e7ee      	b.n	8003f9a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D10_GPIO_Port, LED_D10_Pin, state);
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	4809      	ldr	r0, [pc, #36]	; (8003fe4 <set_indicator+0x68>)
 8003fc0:	f7fe f853 	bl	800206a <HAL_GPIO_WritePin>
		break;
 8003fc4:	e7e9      	b.n	8003f9a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D11_GPIO_Port, LED_D11_Pin, state);
 8003fc6:	2110      	movs	r1, #16
 8003fc8:	4806      	ldr	r0, [pc, #24]	; (8003fe4 <set_indicator+0x68>)
 8003fca:	f7fe f84e 	bl	800206a <HAL_GPIO_WritePin>
		break;
 8003fce:	e7e4      	b.n	8003f9a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D12_GPIO_Port, LED_D12_Pin, state);
 8003fd0:	2120      	movs	r1, #32
 8003fd2:	4804      	ldr	r0, [pc, #16]	; (8003fe4 <set_indicator+0x68>)
 8003fd4:	f7fe f849 	bl	800206a <HAL_GPIO_WritePin>
}
 8003fd8:	e7df      	b.n	8003f9a <set_indicator+0x1e>
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	080048a4 	.word	0x080048a4
 8003fe0:	48000800 	.word	0x48000800
 8003fe4:	48000400 	.word	0x48000400

08003fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fec:	2230      	movs	r2, #48	; 0x30
 8003fee:	2100      	movs	r1, #0
 8003ff0:	a804      	add	r0, sp, #16
 8003ff2:	f000 fa43 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ff6:	2410      	movs	r4, #16
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4668      	mov	r0, sp
 8003ffe:	f000 fa3d 	bl	800447c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004002:	2312      	movs	r3, #18
 8004004:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004006:	3b11      	subs	r3, #17
 8004008:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800400a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800400c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800400e:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004010:	3c0e      	subs	r4, #14
 8004012:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004014:	23a0      	movs	r3, #160	; 0xa0
 8004016:	039b      	lsls	r3, r3, #14
 8004018:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800401a:	a804      	add	r0, sp, #16
 800401c:	f7fe f82c 	bl	8002078 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004020:	2307      	movs	r3, #7
 8004022:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004024:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004026:	2300      	movs	r3, #0
 8004028:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800402a:	9303      	str	r3, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800402c:	2101      	movs	r1, #1
 800402e:	4668      	mov	r0, sp
 8004030:	f7fe fa7e 	bl	8002530 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004034:	b010      	add	sp, #64	; 0x40
 8004036:	bd10      	pop	{r4, pc}

08004038 <main>:
{
 8004038:	b510      	push	{r4, lr}
  HAL_Init();
 800403a:	f7fd fba1 	bl	8001780 <HAL_Init>
  SystemClock_Config();
 800403e:	f7ff ffd3 	bl	8003fe8 <SystemClock_Config>
  MX_GPIO_Init();
 8004042:	f7ff ff2f 	bl	8003ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004046:	f7ff fe27 	bl	8003c98 <MX_DMA_Init>
  MX_ADC_Init();
 800404a:	f7ff fd51 	bl	8003af0 <MX_ADC_Init>
  MX_TIM3_Init();
 800404e:	f000 f8b1 	bl	80041b4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8004052:	f000 f939 	bl	80042c8 <MX_TIM2_Init>
  MX_FREERTOS_Init();
 8004056:	f7ff fee7 	bl	8003e28 <MX_FREERTOS_Init>
  osKernelStart();
 800405a:	f7fe ff3f 	bl	8002edc <osKernelStart>
 800405e:	e7fe      	b.n	800405e <main+0x26>

08004060 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004062:	6802      	ldr	r2, [r0, #0]
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004066:	429a      	cmp	r2, r3
 8004068:	d000      	beq.n	800406c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800406a:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 800406c:	f7fd fb98 	bl	80017a0 <HAL_IncTick>
}
 8004070:	e7fb      	b.n	800406a <HAL_TIM_PeriodElapsedCallback+0xa>
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	40012c00 	.word	0x40012c00

08004078 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004078:	4770      	bx	lr
	...

0800407c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800407c:	b500      	push	{lr}
 800407e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004080:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <HAL_MspInit+0x38>)
 8004082:	6999      	ldr	r1, [r3, #24]
 8004084:	2201      	movs	r2, #1
 8004086:	4311      	orrs	r1, r2
 8004088:	6199      	str	r1, [r3, #24]
 800408a:	6999      	ldr	r1, [r3, #24]
 800408c:	400a      	ands	r2, r1
 800408e:	9200      	str	r2, [sp, #0]
 8004090:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	0549      	lsls	r1, r1, #21
 8004098:	430a      	orrs	r2, r1
 800409a:	61da      	str	r2, [r3, #28]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	400b      	ands	r3, r1
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80040a4:	2200      	movs	r2, #0
 80040a6:	2103      	movs	r1, #3
 80040a8:	2002      	movs	r0, #2
 80040aa:	4240      	negs	r0, r0
 80040ac:	f7fd fdee 	bl	8001c8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040b0:	b003      	add	sp, #12
 80040b2:	bd00      	pop	{pc}
 80040b4:	40021000 	.word	0x40021000

080040b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040b8:	b500      	push	{lr}
 80040ba:	b087      	sub	sp, #28
 80040bc:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 80040be:	2200      	movs	r2, #0
 80040c0:	200d      	movs	r0, #13
 80040c2:	f7fd fde3 	bl	8001c8c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 80040c6:	200d      	movs	r0, #13
 80040c8:	f7fd fe12 	bl	8001cf0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80040cc:	4a13      	ldr	r2, [pc, #76]	; (800411c <HAL_InitTick+0x64>)
 80040ce:	6991      	ldr	r1, [r2, #24]
 80040d0:	2080      	movs	r0, #128	; 0x80
 80040d2:	0100      	lsls	r0, r0, #4
 80040d4:	4301      	orrs	r1, r0
 80040d6:	6191      	str	r1, [r2, #24]
 80040d8:	6993      	ldr	r3, [r2, #24]
 80040da:	4003      	ands	r3, r0
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040e0:	a901      	add	r1, sp, #4
 80040e2:	a802      	add	r0, sp, #8
 80040e4:	f7fe fae4 	bl	80026b0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80040e8:	f7fe fad2 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80040ec:	490c      	ldr	r1, [pc, #48]	; (8004120 <HAL_InitTick+0x68>)
 80040ee:	f7fc f80b 	bl	8000108 <__udivsi3>
 80040f2:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80040f4:	480b      	ldr	r0, [pc, #44]	; (8004124 <HAL_InitTick+0x6c>)
 80040f6:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <HAL_InitTick+0x70>)
 80040f8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80040fa:	4a0c      	ldr	r2, [pc, #48]	; (800412c <HAL_InitTick+0x74>)
 80040fc:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80040fe:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004104:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004106:	f7fe fcf7 	bl	8002af8 <HAL_TIM_Base_Init>
 800410a:	2800      	cmp	r0, #0
 800410c:	d002      	beq.n	8004114 <HAL_InitTick+0x5c>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800410e:	2001      	movs	r0, #1
}
 8004110:	b007      	add	sp, #28
 8004112:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8004114:	4803      	ldr	r0, [pc, #12]	; (8004124 <HAL_InitTick+0x6c>)
 8004116:	f7fe fbe0 	bl	80028da <HAL_TIM_Base_Start_IT>
 800411a:	e7f9      	b.n	8004110 <HAL_InitTick+0x58>
 800411c:	40021000 	.word	0x40021000
 8004120:	000f4240 	.word	0x000f4240
 8004124:	20000e24 	.word	0x20000e24
 8004128:	40012c00 	.word	0x40012c00
 800412c:	000003e7 	.word	0x000003e7

08004130 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004130:	4770      	bx	lr

08004132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004132:	e7fe      	b.n	8004132 <HardFault_Handler>

08004134 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004134:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004136:	4802      	ldr	r0, [pc, #8]	; (8004140 <DMA1_Channel1_IRQHandler+0xc>)
 8004138:	f7fd fe75 	bl	8001e26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800413c:	bd10      	pop	{r4, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	20000d84 	.word	0x20000d84

08004144 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004144:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004146:	4802      	ldr	r0, [pc, #8]	; (8004150 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8004148:	f7fe fbd7 	bl	80028fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800414c:	bd10      	pop	{r4, pc}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	20000e24 	.word	0x20000e24

08004154 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004154:	4b11      	ldr	r3, [pc, #68]	; (800419c <SystemInit+0x48>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	480f      	ldr	r0, [pc, #60]	; (80041a0 <SystemInit+0x4c>)
 8004162:	4002      	ands	r2, r0
 8004164:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	480e      	ldr	r0, [pc, #56]	; (80041a4 <SystemInit+0x50>)
 800416a:	4002      	ands	r2, r0
 800416c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	480d      	ldr	r0, [pc, #52]	; (80041a8 <SystemInit+0x54>)
 8004172:	4002      	ands	r2, r0
 8004174:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	480c      	ldr	r0, [pc, #48]	; (80041ac <SystemInit+0x58>)
 800417a:	4002      	ands	r2, r0
 800417c:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	200f      	movs	r0, #15
 8004182:	4382      	bics	r2, r0
 8004184:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8004186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004188:	4809      	ldr	r0, [pc, #36]	; (80041b0 <SystemInit+0x5c>)
 800418a:	4002      	ands	r2, r0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800418e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004190:	438a      	bics	r2, r1
 8004192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]

}
 8004198:	4770      	bx	lr
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	40021000 	.word	0x40021000
 80041a0:	f8ffb80c 	.word	0xf8ffb80c
 80041a4:	fef6ffff 	.word	0xfef6ffff
 80041a8:	fffbffff 	.word	0xfffbffff
 80041ac:	ffc0ffff 	.word	0xffc0ffff
 80041b0:	fffffeac 	.word	0xfffffeac

080041b4 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041b4:	b500      	push	{lr}
 80041b6:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041b8:	2210      	movs	r2, #16
 80041ba:	2100      	movs	r1, #0
 80041bc:	a802      	add	r0, sp, #8
 80041be:	f000 f95d 	bl	800447c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c2:	2208      	movs	r2, #8
 80041c4:	2100      	movs	r1, #0
 80041c6:	4668      	mov	r0, sp
 80041c8:	f000 f958 	bl	800447c <memset>

  htim3.Instance = TIM3;
 80041cc:	4815      	ldr	r0, [pc, #84]	; (8004224 <MX_TIM3_Init+0x70>)
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <MX_TIM3_Init+0x74>)
 80041d0:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d6:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 48000;
 80041d8:	4a14      	ldr	r2, [pc, #80]	; (800422c <MX_TIM3_Init+0x78>)
 80041da:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041dc:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041de:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80041e0:	f7fe fc8a 	bl	8002af8 <HAL_TIM_Base_Init>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d113      	bne.n	8004210 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	015b      	lsls	r3, r3, #5
 80041ec:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80041ee:	a902      	add	r1, sp, #8
 80041f0:	480c      	ldr	r0, [pc, #48]	; (8004224 <MX_TIM3_Init+0x70>)
 80041f2:	f7fe fd7b 	bl	8002cec <HAL_TIM_ConfigClockSource>
 80041f6:	2800      	cmp	r0, #0
 80041f8:	d10d      	bne.n	8004216 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041fe:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004200:	4669      	mov	r1, sp
 8004202:	4808      	ldr	r0, [pc, #32]	; (8004224 <MX_TIM3_Init+0x70>)
 8004204:	f7fe fe3c 	bl	8002e80 <HAL_TIMEx_MasterConfigSynchronization>
 8004208:	2800      	cmp	r0, #0
 800420a:	d107      	bne.n	800421c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
  }

}
 800420c:	b007      	add	sp, #28
 800420e:	bd00      	pop	{pc}
    Error_Handler();
 8004210:	f7ff ff32 	bl	8004078 <Error_Handler>
 8004214:	e7e8      	b.n	80041e8 <MX_TIM3_Init+0x34>
    Error_Handler();
 8004216:	f7ff ff2f 	bl	8004078 <Error_Handler>
 800421a:	e7ee      	b.n	80041fa <MX_TIM3_Init+0x46>
    Error_Handler();
 800421c:	f7ff ff2c 	bl	8004078 <Error_Handler>
}
 8004220:	e7f4      	b.n	800420c <MX_TIM3_Init+0x58>
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	20000e64 	.word	0x20000e64
 8004228:	40000400 	.word	0x40000400
 800422c:	0000bb80 	.word	0x0000bb80

08004230 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004230:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM2)
 8004232:	6803      	ldr	r3, [r0, #0]
 8004234:	2280      	movs	r2, #128	; 0x80
 8004236:	05d2      	lsls	r2, r2, #23
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 800423c:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <HAL_TIM_Base_MspInit+0x40>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d00b      	beq.n	800425a <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004242:	b002      	add	sp, #8
 8004244:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004246:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <HAL_TIM_Base_MspInit+0x44>)
 8004248:	69d1      	ldr	r1, [r2, #28]
 800424a:	2301      	movs	r3, #1
 800424c:	4319      	orrs	r1, r3
 800424e:	61d1      	str	r1, [r2, #28]
 8004250:	69d2      	ldr	r2, [r2, #28]
 8004252:	4013      	ands	r3, r2
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	9b00      	ldr	r3, [sp, #0]
 8004258:	e7f3      	b.n	8004242 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800425a:	4a06      	ldr	r2, [pc, #24]	; (8004274 <HAL_TIM_Base_MspInit+0x44>)
 800425c:	69d1      	ldr	r1, [r2, #28]
 800425e:	2302      	movs	r3, #2
 8004260:	4319      	orrs	r1, r3
 8004262:	61d1      	str	r1, [r2, #28]
 8004264:	69d2      	ldr	r2, [r2, #28]
 8004266:	4013      	ands	r3, r2
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	9b01      	ldr	r3, [sp, #4]
}
 800426c:	e7e9      	b.n	8004242 <HAL_TIM_Base_MspInit+0x12>
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	40000400 	.word	0x40000400
 8004274:	40021000 	.word	0x40021000

08004278 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004278:	b510      	push	{r4, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427e:	2214      	movs	r2, #20
 8004280:	2100      	movs	r1, #0
 8004282:	a801      	add	r0, sp, #4
 8004284:	f000 f8fa 	bl	800447c <memset>
  if(timHandle->Instance==TIM2)
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	05db      	lsls	r3, r3, #23
 800428e:	429a      	cmp	r2, r3
 8004290:	d001      	beq.n	8004296 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004292:	b006      	add	sp, #24
 8004294:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004296:	4a0b      	ldr	r2, [pc, #44]	; (80042c4 <HAL_TIM_MspPostInit+0x4c>)
 8004298:	6951      	ldr	r1, [r2, #20]
 800429a:	2080      	movs	r0, #128	; 0x80
 800429c:	0280      	lsls	r0, r0, #10
 800429e:	4301      	orrs	r1, r0
 80042a0:	6151      	str	r1, [r2, #20]
 80042a2:	6953      	ldr	r3, [r2, #20]
 80042a4:	4003      	ands	r3, r0
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PILOT_Pin;
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b0:	2302      	movs	r3, #2
 80042b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80042b4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PILOT_GPIO_Port, &GPIO_InitStruct);
 80042b6:	a901      	add	r1, sp, #4
 80042b8:	2090      	movs	r0, #144	; 0x90
 80042ba:	05c0      	lsls	r0, r0, #23
 80042bc:	f7fd fe08 	bl	8001ed0 <HAL_GPIO_Init>
}
 80042c0:	e7e7      	b.n	8004292 <HAL_TIM_MspPostInit+0x1a>
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	40021000 	.word	0x40021000

080042c8 <MX_TIM2_Init>:
{
 80042c8:	b500      	push	{lr}
 80042ca:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042cc:	2210      	movs	r2, #16
 80042ce:	2100      	movs	r1, #0
 80042d0:	a80a      	add	r0, sp, #40	; 0x28
 80042d2:	f000 f8d3 	bl	800447c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042d6:	2208      	movs	r2, #8
 80042d8:	2100      	movs	r1, #0
 80042da:	a808      	add	r0, sp, #32
 80042dc:	f000 f8ce 	bl	800447c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042e0:	221c      	movs	r2, #28
 80042e2:	2100      	movs	r1, #0
 80042e4:	a801      	add	r0, sp, #4
 80042e6:	f000 f8c9 	bl	800447c <memset>
  htim2.Instance = TIM2;
 80042ea:	4823      	ldr	r0, [pc, #140]	; (8004378 <MX_TIM2_Init+0xb0>)
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	05db      	lsls	r3, r3, #23
 80042f0:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f6:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 48000;
 80042f8:	4a20      	ldr	r2, [pc, #128]	; (800437c <MX_TIM2_Init+0xb4>)
 80042fa:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042fc:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042fe:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004300:	f7fe fbfa 	bl	8002af8 <HAL_TIM_Base_Init>
 8004304:	2800      	cmp	r0, #0
 8004306:	d128      	bne.n	800435a <MX_TIM2_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	015b      	lsls	r3, r3, #5
 800430c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800430e:	a90a      	add	r1, sp, #40	; 0x28
 8004310:	4819      	ldr	r0, [pc, #100]	; (8004378 <MX_TIM2_Init+0xb0>)
 8004312:	f7fe fceb 	bl	8002cec <HAL_TIM_ConfigClockSource>
 8004316:	2800      	cmp	r0, #0
 8004318:	d122      	bne.n	8004360 <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800431a:	4817      	ldr	r0, [pc, #92]	; (8004378 <MX_TIM2_Init+0xb0>)
 800431c:	f7fe fc06 	bl	8002b2c <HAL_TIM_PWM_Init>
 8004320:	2800      	cmp	r0, #0
 8004322:	d120      	bne.n	8004366 <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004324:	2300      	movs	r3, #0
 8004326:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004328:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800432a:	a908      	add	r1, sp, #32
 800432c:	4812      	ldr	r0, [pc, #72]	; (8004378 <MX_TIM2_Init+0xb0>)
 800432e:	f7fe fda7 	bl	8002e80 <HAL_TIMEx_MasterConfigSynchronization>
 8004332:	2800      	cmp	r0, #0
 8004334:	d11a      	bne.n	800436c <MX_TIM2_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004336:	2360      	movs	r3, #96	; 0x60
 8004338:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800433e:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004340:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004342:	2200      	movs	r2, #0
 8004344:	a901      	add	r1, sp, #4
 8004346:	480c      	ldr	r0, [pc, #48]	; (8004378 <MX_TIM2_Init+0xb0>)
 8004348:	f7fe fc4e 	bl	8002be8 <HAL_TIM_PWM_ConfigChannel>
 800434c:	2800      	cmp	r0, #0
 800434e:	d110      	bne.n	8004372 <MX_TIM2_Init+0xaa>
  HAL_TIM_MspPostInit(&htim2);
 8004350:	4809      	ldr	r0, [pc, #36]	; (8004378 <MX_TIM2_Init+0xb0>)
 8004352:	f7ff ff91 	bl	8004278 <HAL_TIM_MspPostInit>
}
 8004356:	b00f      	add	sp, #60	; 0x3c
 8004358:	bd00      	pop	{pc}
    Error_Handler();
 800435a:	f7ff fe8d 	bl	8004078 <Error_Handler>
 800435e:	e7d3      	b.n	8004308 <MX_TIM2_Init+0x40>
    Error_Handler();
 8004360:	f7ff fe8a 	bl	8004078 <Error_Handler>
 8004364:	e7d9      	b.n	800431a <MX_TIM2_Init+0x52>
    Error_Handler();
 8004366:	f7ff fe87 	bl	8004078 <Error_Handler>
 800436a:	e7db      	b.n	8004324 <MX_TIM2_Init+0x5c>
    Error_Handler();
 800436c:	f7ff fe84 	bl	8004078 <Error_Handler>
 8004370:	e7e1      	b.n	8004336 <MX_TIM2_Init+0x6e>
    Error_Handler();
 8004372:	f7ff fe81 	bl	8004078 <Error_Handler>
 8004376:	e7eb      	b.n	8004350 <MX_TIM2_Init+0x88>
 8004378:	20000ea4 	.word	0x20000ea4
 800437c:	0000bb80 	.word	0x0000bb80

08004380 <set_pwm>:
  }
} 

/* USER CODE BEGIN 1 */

void set_pwm(int enable, double amps){
 8004380:	b530      	push	{r4, r5, lr}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	0014      	movs	r4, r2
 8004386:	001d      	movs	r5, r3
	uint16_t pulse_width;
    TIM_OC_InitTypeDef sConfigOC;

    if(enable){
 8004388:	2800      	cmp	r0, #0
 800438a:	d01e      	beq.n	80043ca <set_pwm+0x4a>
    	pulse_width = 48000.0 * amps / 60.0;
 800438c:	2200      	movs	r2, #0
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <set_pwm+0x50>)
 8004390:	0020      	movs	r0, r4
 8004392:	0029      	movs	r1, r5
 8004394:	f7fc fbf2 	bl	8000b7c <__aeabi_dmul>
 8004398:	2200      	movs	r2, #0
 800439a:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <set_pwm+0x54>)
 800439c:	f7fb ffba 	bl	8000314 <__aeabi_ddiv>
 80043a0:	f7fb ff9a 	bl	80002d8 <__aeabi_d2uiz>
 80043a4:	b280      	uxth	r0, r0
    } else {
    	// constant 12V on the pilot
    	pulse_width = 48000;
    }

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043a6:	2360      	movs	r3, #96	; 0x60
 80043a8:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pulse_width;
 80043aa:	9002      	str	r0, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043ac:	2300      	movs	r3, #0
 80043ae:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043b0:	9305      	str	r3, [sp, #20]
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 80043b2:	4c09      	ldr	r4, [pc, #36]	; (80043d8 <set_pwm+0x58>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	a901      	add	r1, sp, #4
 80043b8:	0020      	movs	r0, r4
 80043ba:	f7fe fc15 	bl	8002be8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80043be:	2100      	movs	r1, #0
 80043c0:	0020      	movs	r0, r4
 80043c2:	f7fe fd2b 	bl	8002e1c <HAL_TIM_PWM_Start>
}
 80043c6:	b009      	add	sp, #36	; 0x24
 80043c8:	bd30      	pop	{r4, r5, pc}
    	pulse_width = 48000;
 80043ca:	4804      	ldr	r0, [pc, #16]	; (80043dc <set_pwm+0x5c>)
 80043cc:	e7eb      	b.n	80043a6 <set_pwm+0x26>
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40e77000 	.word	0x40e77000
 80043d4:	404e0000 	.word	0x404e0000
 80043d8:	20000ea4 	.word	0x20000ea4
 80043dc:	0000bb80 	.word	0x0000bb80

080043e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043e0:	480d      	ldr	r0, [pc, #52]	; (8004418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043e4:	480d      	ldr	r0, [pc, #52]	; (800441c <LoopForever+0x6>)
  ldr r1, =_edata
 80043e6:	490e      	ldr	r1, [pc, #56]	; (8004420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043e8:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <LoopForever+0xe>)
  movs r3, #0
 80043ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043ec:	e002      	b.n	80043f4 <LoopCopyDataInit>

080043ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043f2:	3304      	adds	r3, #4

080043f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043f8:	d3f9      	bcc.n	80043ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043fa:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043fc:	4c0b      	ldr	r4, [pc, #44]	; (800442c <LoopForever+0x16>)
  movs r3, #0
 80043fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004400:	e001      	b.n	8004406 <LoopFillZerobss>

08004402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004404:	3204      	adds	r2, #4

08004406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004408:	d3fb      	bcc.n	8004402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800440a:	f7ff fea3 	bl	8004154 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800440e:	f000 f811 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004412:	f7ff fe11 	bl	8004038 <main>

08004416 <LoopForever>:

LoopForever:
    b LoopForever
 8004416:	e7fe      	b.n	8004416 <LoopForever>
  ldr   r0, =_estack
 8004418:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800441c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004420:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8004424:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 8004428:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800442c:	20000ee4 	.word	0x20000ee4

08004430 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004430:	e7fe      	b.n	8004430 <ADC1_COMP_IRQHandler>
	...

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	2600      	movs	r6, #0
 8004438:	4d0c      	ldr	r5, [pc, #48]	; (800446c <__libc_init_array+0x38>)
 800443a:	4c0d      	ldr	r4, [pc, #52]	; (8004470 <__libc_init_array+0x3c>)
 800443c:	1b64      	subs	r4, r4, r5
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	42a6      	cmp	r6, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	2600      	movs	r6, #0
 8004446:	f000 f99b 	bl	8004780 <_init>
 800444a:	4d0a      	ldr	r5, [pc, #40]	; (8004474 <__libc_init_array+0x40>)
 800444c:	4c0a      	ldr	r4, [pc, #40]	; (8004478 <__libc_init_array+0x44>)
 800444e:	1b64      	subs	r4, r4, r5
 8004450:	10a4      	asrs	r4, r4, #2
 8004452:	42a6      	cmp	r6, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	00b3      	lsls	r3, r6, #2
 800445a:	58eb      	ldr	r3, [r5, r3]
 800445c:	4798      	blx	r3
 800445e:	3601      	adds	r6, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	00b3      	lsls	r3, r6, #2
 8004464:	58eb      	ldr	r3, [r5, r3]
 8004466:	4798      	blx	r3
 8004468:	3601      	adds	r6, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	080048d8 	.word	0x080048d8
 8004470:	080048d8 	.word	0x080048d8
 8004474:	080048d8 	.word	0x080048d8
 8004478:	080048dc 	.word	0x080048dc

0800447c <memset>:
 800447c:	0003      	movs	r3, r0
 800447e:	1882      	adds	r2, r0, r2
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	7019      	strb	r1, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <swapfunc>:
 800448c:	b530      	push	{r4, r5, lr}
 800448e:	2400      	movs	r4, #0
 8004490:	2b01      	cmp	r3, #1
 8004492:	dc08      	bgt.n	80044a6 <swapfunc+0x1a>
 8004494:	0892      	lsrs	r2, r2, #2
 8004496:	6803      	ldr	r3, [r0, #0]
 8004498:	680c      	ldr	r4, [r1, #0]
 800449a:	3a01      	subs	r2, #1
 800449c:	c010      	stmia	r0!, {r4}
 800449e:	c108      	stmia	r1!, {r3}
 80044a0:	2a00      	cmp	r2, #0
 80044a2:	dcf8      	bgt.n	8004496 <swapfunc+0xa>
 80044a4:	bd30      	pop	{r4, r5, pc}
 80044a6:	5d03      	ldrb	r3, [r0, r4]
 80044a8:	5d0d      	ldrb	r5, [r1, r4]
 80044aa:	5505      	strb	r5, [r0, r4]
 80044ac:	550b      	strb	r3, [r1, r4]
 80044ae:	3401      	adds	r4, #1
 80044b0:	1b13      	subs	r3, r2, r4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	dcf7      	bgt.n	80044a6 <swapfunc+0x1a>
 80044b6:	e7f5      	b.n	80044a4 <swapfunc+0x18>

080044b8 <med3.isra.1>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	000c      	movs	r4, r1
 80044bc:	0015      	movs	r5, r2
 80044be:	0007      	movs	r7, r0
 80044c0:	001e      	movs	r6, r3
 80044c2:	4798      	blx	r3
 80044c4:	0029      	movs	r1, r5
 80044c6:	2800      	cmp	r0, #0
 80044c8:	da0b      	bge.n	80044e2 <med3.isra.1+0x2a>
 80044ca:	0020      	movs	r0, r4
 80044cc:	47b0      	blx	r6
 80044ce:	2800      	cmp	r0, #0
 80044d0:	db05      	blt.n	80044de <med3.isra.1+0x26>
 80044d2:	0029      	movs	r1, r5
 80044d4:	0038      	movs	r0, r7
 80044d6:	47b0      	blx	r6
 80044d8:	2800      	cmp	r0, #0
 80044da:	db0b      	blt.n	80044f4 <med3.isra.1+0x3c>
 80044dc:	003c      	movs	r4, r7
 80044de:	0020      	movs	r0, r4
 80044e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e2:	0020      	movs	r0, r4
 80044e4:	47b0      	blx	r6
 80044e6:	2800      	cmp	r0, #0
 80044e8:	dcf9      	bgt.n	80044de <med3.isra.1+0x26>
 80044ea:	0029      	movs	r1, r5
 80044ec:	0038      	movs	r0, r7
 80044ee:	47b0      	blx	r6
 80044f0:	2800      	cmp	r0, #0
 80044f2:	dbf3      	blt.n	80044dc <med3.isra.1+0x24>
 80044f4:	002c      	movs	r4, r5
 80044f6:	e7f2      	b.n	80044de <med3.isra.1+0x26>

080044f8 <qsort>:
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	0017      	movs	r7, r2
 80044fc:	b089      	sub	sp, #36	; 0x24
 80044fe:	9000      	str	r0, [sp, #0]
 8004500:	9102      	str	r1, [sp, #8]
 8004502:	9303      	str	r3, [sp, #12]
 8004504:	2302      	movs	r3, #2
 8004506:	2203      	movs	r2, #3
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	9b00      	ldr	r3, [sp, #0]
 800450c:	4213      	tst	r3, r2
 800450e:	d106      	bne.n	800451e <qsort+0x26>
 8004510:	4217      	tst	r7, r2
 8004512:	d104      	bne.n	800451e <qsort+0x26>
 8004514:	1f3b      	subs	r3, r7, #4
 8004516:	001a      	movs	r2, r3
 8004518:	1e53      	subs	r3, r2, #1
 800451a:	419a      	sbcs	r2, r3
 800451c:	9201      	str	r2, [sp, #4]
 800451e:	9b02      	ldr	r3, [sp, #8]
 8004520:	2b06      	cmp	r3, #6
 8004522:	d827      	bhi.n	8004574 <qsort+0x7c>
 8004524:	9b00      	ldr	r3, [sp, #0]
 8004526:	9a00      	ldr	r2, [sp, #0]
 8004528:	19de      	adds	r6, r3, r7
 800452a:	9b02      	ldr	r3, [sp, #8]
 800452c:	437b      	muls	r3, r7
 800452e:	18d3      	adds	r3, r2, r3
 8004530:	9302      	str	r3, [sp, #8]
 8004532:	9b02      	ldr	r3, [sp, #8]
 8004534:	429e      	cmp	r6, r3
 8004536:	d300      	bcc.n	800453a <qsort+0x42>
 8004538:	e11f      	b.n	800477a <qsort+0x282>
 800453a:	0034      	movs	r4, r6
 800453c:	e015      	b.n	800456a <qsort+0x72>
 800453e:	9b01      	ldr	r3, [sp, #4]
 8004540:	003a      	movs	r2, r7
 8004542:	0029      	movs	r1, r5
 8004544:	0020      	movs	r0, r4
 8004546:	f7ff ffa1 	bl	800448c <swapfunc>
 800454a:	e00d      	b.n	8004568 <qsort+0x70>
 800454c:	1be5      	subs	r5, r4, r7
 800454e:	0021      	movs	r1, r4
 8004550:	0028      	movs	r0, r5
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	4798      	blx	r3
 8004556:	2800      	cmp	r0, #0
 8004558:	dd0a      	ble.n	8004570 <qsort+0x78>
 800455a:	9b01      	ldr	r3, [sp, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <qsort+0x46>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	682a      	ldr	r2, [r5, #0]
 8004564:	6022      	str	r2, [r4, #0]
 8004566:	602b      	str	r3, [r5, #0]
 8004568:	002c      	movs	r4, r5
 800456a:	9b00      	ldr	r3, [sp, #0]
 800456c:	42a3      	cmp	r3, r4
 800456e:	d3ed      	bcc.n	800454c <qsort+0x54>
 8004570:	19f6      	adds	r6, r6, r7
 8004572:	e7de      	b.n	8004532 <qsort+0x3a>
 8004574:	9b02      	ldr	r3, [sp, #8]
 8004576:	085c      	lsrs	r4, r3, #1
 8004578:	437c      	muls	r4, r7
 800457a:	9b00      	ldr	r3, [sp, #0]
 800457c:	191c      	adds	r4, r3, r4
 800457e:	9b02      	ldr	r3, [sp, #8]
 8004580:	2b07      	cmp	r3, #7
 8004582:	d027      	beq.n	80045d4 <qsort+0xdc>
 8004584:	1e5e      	subs	r6, r3, #1
 8004586:	437e      	muls	r6, r7
 8004588:	9b00      	ldr	r3, [sp, #0]
 800458a:	199e      	adds	r6, r3, r6
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	9b02      	ldr	r3, [sp, #8]
 8004590:	2b28      	cmp	r3, #40	; 0x28
 8004592:	d918      	bls.n	80045c6 <qsort+0xce>
 8004594:	08dd      	lsrs	r5, r3, #3
 8004596:	437d      	muls	r5, r7
 8004598:	9b00      	ldr	r3, [sp, #0]
 800459a:	9800      	ldr	r0, [sp, #0]
 800459c:	1959      	adds	r1, r3, r5
 800459e:	194a      	adds	r2, r1, r5
 80045a0:	9b03      	ldr	r3, [sp, #12]
 80045a2:	f7ff ff89 	bl	80044b8 <med3.isra.1>
 80045a6:	1962      	adds	r2, r4, r5
 80045a8:	0021      	movs	r1, r4
 80045aa:	9004      	str	r0, [sp, #16]
 80045ac:	9b03      	ldr	r3, [sp, #12]
 80045ae:	1b60      	subs	r0, r4, r5
 80045b0:	f7ff ff82 	bl	80044b8 <med3.isra.1>
 80045b4:	0004      	movs	r4, r0
 80045b6:	0068      	lsls	r0, r5, #1
 80045b8:	1a30      	subs	r0, r6, r0
 80045ba:	0032      	movs	r2, r6
 80045bc:	1941      	adds	r1, r0, r5
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	f7ff ff7a 	bl	80044b8 <med3.isra.1>
 80045c4:	0006      	movs	r6, r0
 80045c6:	0021      	movs	r1, r4
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	0032      	movs	r2, r6
 80045cc:	9804      	ldr	r0, [sp, #16]
 80045ce:	f7ff ff73 	bl	80044b8 <med3.isra.1>
 80045d2:	0004      	movs	r4, r0
 80045d4:	9b01      	ldr	r3, [sp, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d130      	bne.n	800463c <qsort+0x144>
 80045da:	9b00      	ldr	r3, [sp, #0]
 80045dc:	6821      	ldr	r1, [r4, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	9a00      	ldr	r2, [sp, #0]
 80045e2:	6011      	str	r1, [r2, #0]
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	9b00      	ldr	r3, [sp, #0]
 80045e8:	19de      	adds	r6, r3, r7
 80045ea:	9b02      	ldr	r3, [sp, #8]
 80045ec:	9604      	str	r6, [sp, #16]
 80045ee:	1e5c      	subs	r4, r3, #1
 80045f0:	437c      	muls	r4, r7
 80045f2:	9b00      	ldr	r3, [sp, #0]
 80045f4:	191c      	adds	r4, r3, r4
 80045f6:	19f3      	adds	r3, r6, r7
 80045f8:	9307      	str	r3, [sp, #28]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9405      	str	r4, [sp, #20]
 80045fe:	9306      	str	r3, [sp, #24]
 8004600:	9b07      	ldr	r3, [sp, #28]
 8004602:	1bdd      	subs	r5, r3, r7
 8004604:	42ac      	cmp	r4, r5
 8004606:	d200      	bcs.n	800460a <qsort+0x112>
 8004608:	e0ae      	b.n	8004768 <qsort+0x270>
 800460a:	9900      	ldr	r1, [sp, #0]
 800460c:	0028      	movs	r0, r5
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	4798      	blx	r3
 8004612:	2800      	cmp	r0, #0
 8004614:	dc32      	bgt.n	800467c <qsort+0x184>
 8004616:	d10d      	bne.n	8004634 <qsort+0x13c>
 8004618:	9b01      	ldr	r3, [sp, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d115      	bne.n	800464a <qsort+0x152>
 800461e:	9b04      	ldr	r3, [sp, #16]
 8004620:	6829      	ldr	r1, [r5, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	9a04      	ldr	r2, [sp, #16]
 8004626:	6011      	str	r1, [r2, #0]
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	9b04      	ldr	r3, [sp, #16]
 800462c:	19db      	adds	r3, r3, r7
 800462e:	9304      	str	r3, [sp, #16]
 8004630:	2301      	movs	r3, #1
 8004632:	9306      	str	r3, [sp, #24]
 8004634:	9b07      	ldr	r3, [sp, #28]
 8004636:	19db      	adds	r3, r3, r7
 8004638:	9307      	str	r3, [sp, #28]
 800463a:	e7e1      	b.n	8004600 <qsort+0x108>
 800463c:	9b01      	ldr	r3, [sp, #4]
 800463e:	003a      	movs	r2, r7
 8004640:	0021      	movs	r1, r4
 8004642:	9800      	ldr	r0, [sp, #0]
 8004644:	f7ff ff22 	bl	800448c <swapfunc>
 8004648:	e7cd      	b.n	80045e6 <qsort+0xee>
 800464a:	9b01      	ldr	r3, [sp, #4]
 800464c:	003a      	movs	r2, r7
 800464e:	0029      	movs	r1, r5
 8004650:	9804      	ldr	r0, [sp, #16]
 8004652:	f7ff ff1b 	bl	800448c <swapfunc>
 8004656:	e7e8      	b.n	800462a <qsort+0x132>
 8004658:	2800      	cmp	r0, #0
 800465a:	d10e      	bne.n	800467a <qsort+0x182>
 800465c:	9b01      	ldr	r3, [sp, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11e      	bne.n	80046a0 <qsort+0x1a8>
 8004662:	9a05      	ldr	r2, [sp, #20]
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	6022      	str	r2, [r4, #0]
 800466a:	9206      	str	r2, [sp, #24]
 800466c:	9a05      	ldr	r2, [sp, #20]
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	9b05      	ldr	r3, [sp, #20]
 8004672:	1bdb      	subs	r3, r3, r7
 8004674:	9305      	str	r3, [sp, #20]
 8004676:	2301      	movs	r3, #1
 8004678:	9306      	str	r3, [sp, #24]
 800467a:	1be4      	subs	r4, r4, r7
 800467c:	42ac      	cmp	r4, r5
 800467e:	d373      	bcc.n	8004768 <qsort+0x270>
 8004680:	9900      	ldr	r1, [sp, #0]
 8004682:	0020      	movs	r0, r4
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	4798      	blx	r3
 8004688:	2800      	cmp	r0, #0
 800468a:	dae5      	bge.n	8004658 <qsort+0x160>
 800468c:	9b01      	ldr	r3, [sp, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00d      	beq.n	80046ae <qsort+0x1b6>
 8004692:	9b01      	ldr	r3, [sp, #4]
 8004694:	003a      	movs	r2, r7
 8004696:	0021      	movs	r1, r4
 8004698:	0028      	movs	r0, r5
 800469a:	f7ff fef7 	bl	800448c <swapfunc>
 800469e:	e00a      	b.n	80046b6 <qsort+0x1be>
 80046a0:	9b01      	ldr	r3, [sp, #4]
 80046a2:	003a      	movs	r2, r7
 80046a4:	9905      	ldr	r1, [sp, #20]
 80046a6:	0020      	movs	r0, r4
 80046a8:	f7ff fef0 	bl	800448c <swapfunc>
 80046ac:	e7e0      	b.n	8004670 <qsort+0x178>
 80046ae:	682b      	ldr	r3, [r5, #0]
 80046b0:	6822      	ldr	r2, [r4, #0]
 80046b2:	602a      	str	r2, [r5, #0]
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	1be4      	subs	r4, r4, r7
 80046b8:	e7ba      	b.n	8004630 <qsort+0x138>
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	003a      	movs	r2, r7
 80046be:	0029      	movs	r1, r5
 80046c0:	0020      	movs	r0, r4
 80046c2:	f7ff fee3 	bl	800448c <swapfunc>
 80046c6:	e00d      	b.n	80046e4 <qsort+0x1ec>
 80046c8:	1be5      	subs	r5, r4, r7
 80046ca:	0021      	movs	r1, r4
 80046cc:	0028      	movs	r0, r5
 80046ce:	9b03      	ldr	r3, [sp, #12]
 80046d0:	4798      	blx	r3
 80046d2:	2800      	cmp	r0, #0
 80046d4:	dd0a      	ble.n	80046ec <qsort+0x1f4>
 80046d6:	9b01      	ldr	r3, [sp, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ee      	bne.n	80046ba <qsort+0x1c2>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	682a      	ldr	r2, [r5, #0]
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	602b      	str	r3, [r5, #0]
 80046e4:	002c      	movs	r4, r5
 80046e6:	9b00      	ldr	r3, [sp, #0]
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	d3ed      	bcc.n	80046c8 <qsort+0x1d0>
 80046ec:	19f6      	adds	r6, r6, r7
 80046ee:	9b02      	ldr	r3, [sp, #8]
 80046f0:	429e      	cmp	r6, r3
 80046f2:	d242      	bcs.n	800477a <qsort+0x282>
 80046f4:	0034      	movs	r4, r6
 80046f6:	e7f6      	b.n	80046e6 <qsort+0x1ee>
 80046f8:	9a00      	ldr	r2, [sp, #0]
 80046fa:	18d3      	adds	r3, r2, r3
 80046fc:	9302      	str	r3, [sp, #8]
 80046fe:	9b04      	ldr	r3, [sp, #16]
 8004700:	1aee      	subs	r6, r5, r3
 8004702:	1a9a      	subs	r2, r3, r2
 8004704:	42b2      	cmp	r2, r6
 8004706:	dd00      	ble.n	800470a <qsort+0x212>
 8004708:	0032      	movs	r2, r6
 800470a:	2a00      	cmp	r2, #0
 800470c:	d004      	beq.n	8004718 <qsort+0x220>
 800470e:	1aa9      	subs	r1, r5, r2
 8004710:	9b01      	ldr	r3, [sp, #4]
 8004712:	9800      	ldr	r0, [sp, #0]
 8004714:	f7ff feba 	bl	800448c <swapfunc>
 8004718:	9b05      	ldr	r3, [sp, #20]
 800471a:	9a05      	ldr	r2, [sp, #20]
 800471c:	1b1c      	subs	r4, r3, r4
 800471e:	9b02      	ldr	r3, [sp, #8]
 8004720:	1a9a      	subs	r2, r3, r2
 8004722:	1bd2      	subs	r2, r2, r7
 8004724:	42a2      	cmp	r2, r4
 8004726:	d900      	bls.n	800472a <qsort+0x232>
 8004728:	0022      	movs	r2, r4
 800472a:	2a00      	cmp	r2, #0
 800472c:	d005      	beq.n	800473a <qsort+0x242>
 800472e:	9b02      	ldr	r3, [sp, #8]
 8004730:	0028      	movs	r0, r5
 8004732:	1a99      	subs	r1, r3, r2
 8004734:	9b01      	ldr	r3, [sp, #4]
 8004736:	f7ff fea9 	bl	800448c <swapfunc>
 800473a:	42b7      	cmp	r7, r6
 800473c:	d209      	bcs.n	8004752 <qsort+0x25a>
 800473e:	0039      	movs	r1, r7
 8004740:	0030      	movs	r0, r6
 8004742:	f7fb fce1 	bl	8000108 <__udivsi3>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	0001      	movs	r1, r0
 800474a:	003a      	movs	r2, r7
 800474c:	9800      	ldr	r0, [sp, #0]
 800474e:	f7ff fed3 	bl	80044f8 <qsort>
 8004752:	42a7      	cmp	r7, r4
 8004754:	d211      	bcs.n	800477a <qsort+0x282>
 8004756:	9b02      	ldr	r3, [sp, #8]
 8004758:	0039      	movs	r1, r7
 800475a:	1b1b      	subs	r3, r3, r4
 800475c:	0020      	movs	r0, r4
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	f7fb fcd2 	bl	8000108 <__udivsi3>
 8004764:	9002      	str	r0, [sp, #8]
 8004766:	e6cd      	b.n	8004504 <qsort+0xc>
 8004768:	9b02      	ldr	r3, [sp, #8]
 800476a:	9a06      	ldr	r2, [sp, #24]
 800476c:	437b      	muls	r3, r7
 800476e:	2a00      	cmp	r2, #0
 8004770:	d1c2      	bne.n	80046f8 <qsort+0x200>
 8004772:	9a00      	ldr	r2, [sp, #0]
 8004774:	18d3      	adds	r3, r2, r3
 8004776:	9302      	str	r3, [sp, #8]
 8004778:	e7b9      	b.n	80046ee <qsort+0x1f6>
 800477a:	b009      	add	sp, #36	; 0x24
 800477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004780 <_init>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr

0800478c <_fini>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr
