
evse_technolaf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005328  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080053e8  080053e8  000153e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005550  08005550  00015550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08005558  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000eb4  20000080  080055d4  00020080  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000f34  080055d4  00020f34  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b846  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000038f1  00000000  00000000  0003b8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a173  00000000  00000000  0003f1db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f10  00000000  00000000  00049350  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef0  00000000  00000000  0004a260  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007a38  00000000  00000000  0004b150  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004b0a  00000000  00000000  00052b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00057692  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002968  00000000  00000000  00057710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080053d0 	.word	0x080053d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	080053d0 	.word	0x080053d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 ff51 	bl	80010d8 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 feab 	bl	8000f9c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 ff43 	bl	80010d8 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 ff39 	bl	80010d8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fecb 	bl	8001010 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fec1 	bl	8001010 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__clzsi2>:
 800029c:	211c      	movs	r1, #28
 800029e:	2301      	movs	r3, #1
 80002a0:	041b      	lsls	r3, r3, #16
 80002a2:	4298      	cmp	r0, r3
 80002a4:	d301      	bcc.n	80002aa <__clzsi2+0xe>
 80002a6:	0c00      	lsrs	r0, r0, #16
 80002a8:	3910      	subs	r1, #16
 80002aa:	0a1b      	lsrs	r3, r3, #8
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d301      	bcc.n	80002b4 <__clzsi2+0x18>
 80002b0:	0a00      	lsrs	r0, r0, #8
 80002b2:	3908      	subs	r1, #8
 80002b4:	091b      	lsrs	r3, r3, #4
 80002b6:	4298      	cmp	r0, r3
 80002b8:	d301      	bcc.n	80002be <__clzsi2+0x22>
 80002ba:	0900      	lsrs	r0, r0, #4
 80002bc:	3904      	subs	r1, #4
 80002be:	a202      	add	r2, pc, #8	; (adr r2, 80002c8 <__clzsi2+0x2c>)
 80002c0:	5c10      	ldrb	r0, [r2, r0]
 80002c2:	1840      	adds	r0, r0, r1
 80002c4:	4770      	bx	lr
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	02020304 	.word	0x02020304
 80002cc:	01010101 	.word	0x01010101
	...

080002d8 <__aeabi_d2uiz>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	2200      	movs	r2, #0
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <__aeabi_d2uiz+0x38>)
 80002de:	0004      	movs	r4, r0
 80002e0:	000d      	movs	r5, r1
 80002e2:	f7ff ffd1 	bl	8000288 <__aeabi_dcmpge>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d104      	bne.n	80002f4 <__aeabi_d2uiz+0x1c>
 80002ea:	0020      	movs	r0, r4
 80002ec:	0029      	movs	r1, r5
 80002ee:	f001 fceb 	bl	8001cc8 <__aeabi_d2iz>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <__aeabi_d2uiz+0x38>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	0020      	movs	r0, r4
 80002fa:	0029      	movs	r1, r5
 80002fc:	f001 f9ce 	bl	800169c <__aeabi_dsub>
 8000300:	f001 fce2 	bl	8001cc8 <__aeabi_d2iz>
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	061b      	lsls	r3, r3, #24
 8000308:	469c      	mov	ip, r3
 800030a:	4460      	add	r0, ip
 800030c:	e7f1      	b.n	80002f2 <__aeabi_d2uiz+0x1a>
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	41e00000 	.word	0x41e00000

08000314 <__aeabi_dadd>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	4645      	mov	r5, r8
 8000318:	46de      	mov	lr, fp
 800031a:	4657      	mov	r7, sl
 800031c:	464e      	mov	r6, r9
 800031e:	030c      	lsls	r4, r1, #12
 8000320:	b5e0      	push	{r5, r6, r7, lr}
 8000322:	004e      	lsls	r6, r1, #1
 8000324:	0fc9      	lsrs	r1, r1, #31
 8000326:	4688      	mov	r8, r1
 8000328:	000d      	movs	r5, r1
 800032a:	0a61      	lsrs	r1, r4, #9
 800032c:	0f44      	lsrs	r4, r0, #29
 800032e:	430c      	orrs	r4, r1
 8000330:	00c7      	lsls	r7, r0, #3
 8000332:	0319      	lsls	r1, r3, #12
 8000334:	0058      	lsls	r0, r3, #1
 8000336:	0fdb      	lsrs	r3, r3, #31
 8000338:	469b      	mov	fp, r3
 800033a:	0a4b      	lsrs	r3, r1, #9
 800033c:	0f51      	lsrs	r1, r2, #29
 800033e:	430b      	orrs	r3, r1
 8000340:	0d76      	lsrs	r6, r6, #21
 8000342:	0d40      	lsrs	r0, r0, #21
 8000344:	0019      	movs	r1, r3
 8000346:	00d2      	lsls	r2, r2, #3
 8000348:	45d8      	cmp	r8, fp
 800034a:	d100      	bne.n	800034e <__aeabi_dadd+0x3a>
 800034c:	e0ae      	b.n	80004ac <__aeabi_dadd+0x198>
 800034e:	1a35      	subs	r5, r6, r0
 8000350:	2d00      	cmp	r5, #0
 8000352:	dc00      	bgt.n	8000356 <__aeabi_dadd+0x42>
 8000354:	e0f6      	b.n	8000544 <__aeabi_dadd+0x230>
 8000356:	2800      	cmp	r0, #0
 8000358:	d10f      	bne.n	800037a <__aeabi_dadd+0x66>
 800035a:	4313      	orrs	r3, r2
 800035c:	d100      	bne.n	8000360 <__aeabi_dadd+0x4c>
 800035e:	e0db      	b.n	8000518 <__aeabi_dadd+0x204>
 8000360:	1e6b      	subs	r3, r5, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d000      	beq.n	8000368 <__aeabi_dadd+0x54>
 8000366:	e137      	b.n	80005d8 <__aeabi_dadd+0x2c4>
 8000368:	1aba      	subs	r2, r7, r2
 800036a:	4297      	cmp	r7, r2
 800036c:	41bf      	sbcs	r7, r7
 800036e:	1a64      	subs	r4, r4, r1
 8000370:	427f      	negs	r7, r7
 8000372:	1be4      	subs	r4, r4, r7
 8000374:	2601      	movs	r6, #1
 8000376:	0017      	movs	r7, r2
 8000378:	e024      	b.n	80003c4 <__aeabi_dadd+0xb0>
 800037a:	4bc6      	ldr	r3, [pc, #792]	; (8000694 <__aeabi_dadd+0x380>)
 800037c:	429e      	cmp	r6, r3
 800037e:	d04d      	beq.n	800041c <__aeabi_dadd+0x108>
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	041b      	lsls	r3, r3, #16
 8000384:	4319      	orrs	r1, r3
 8000386:	2d38      	cmp	r5, #56	; 0x38
 8000388:	dd00      	ble.n	800038c <__aeabi_dadd+0x78>
 800038a:	e107      	b.n	800059c <__aeabi_dadd+0x288>
 800038c:	2d1f      	cmp	r5, #31
 800038e:	dd00      	ble.n	8000392 <__aeabi_dadd+0x7e>
 8000390:	e138      	b.n	8000604 <__aeabi_dadd+0x2f0>
 8000392:	2020      	movs	r0, #32
 8000394:	1b43      	subs	r3, r0, r5
 8000396:	469a      	mov	sl, r3
 8000398:	000b      	movs	r3, r1
 800039a:	4650      	mov	r0, sl
 800039c:	4083      	lsls	r3, r0
 800039e:	4699      	mov	r9, r3
 80003a0:	0013      	movs	r3, r2
 80003a2:	4648      	mov	r0, r9
 80003a4:	40eb      	lsrs	r3, r5
 80003a6:	4318      	orrs	r0, r3
 80003a8:	0003      	movs	r3, r0
 80003aa:	4650      	mov	r0, sl
 80003ac:	4082      	lsls	r2, r0
 80003ae:	1e50      	subs	r0, r2, #1
 80003b0:	4182      	sbcs	r2, r0
 80003b2:	40e9      	lsrs	r1, r5
 80003b4:	431a      	orrs	r2, r3
 80003b6:	1aba      	subs	r2, r7, r2
 80003b8:	1a61      	subs	r1, r4, r1
 80003ba:	4297      	cmp	r7, r2
 80003bc:	41a4      	sbcs	r4, r4
 80003be:	0017      	movs	r7, r2
 80003c0:	4264      	negs	r4, r4
 80003c2:	1b0c      	subs	r4, r1, r4
 80003c4:	0223      	lsls	r3, r4, #8
 80003c6:	d562      	bpl.n	800048e <__aeabi_dadd+0x17a>
 80003c8:	0264      	lsls	r4, r4, #9
 80003ca:	0a65      	lsrs	r5, r4, #9
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d100      	bne.n	80003d2 <__aeabi_dadd+0xbe>
 80003d0:	e0df      	b.n	8000592 <__aeabi_dadd+0x27e>
 80003d2:	0028      	movs	r0, r5
 80003d4:	f7ff ff62 	bl	800029c <__clzsi2>
 80003d8:	0003      	movs	r3, r0
 80003da:	3b08      	subs	r3, #8
 80003dc:	2b1f      	cmp	r3, #31
 80003de:	dd00      	ble.n	80003e2 <__aeabi_dadd+0xce>
 80003e0:	e0d2      	b.n	8000588 <__aeabi_dadd+0x274>
 80003e2:	2220      	movs	r2, #32
 80003e4:	003c      	movs	r4, r7
 80003e6:	1ad2      	subs	r2, r2, r3
 80003e8:	409d      	lsls	r5, r3
 80003ea:	40d4      	lsrs	r4, r2
 80003ec:	409f      	lsls	r7, r3
 80003ee:	4325      	orrs	r5, r4
 80003f0:	429e      	cmp	r6, r3
 80003f2:	dd00      	ble.n	80003f6 <__aeabi_dadd+0xe2>
 80003f4:	e0c4      	b.n	8000580 <__aeabi_dadd+0x26c>
 80003f6:	1b9e      	subs	r6, r3, r6
 80003f8:	1c73      	adds	r3, r6, #1
 80003fa:	2b1f      	cmp	r3, #31
 80003fc:	dd00      	ble.n	8000400 <__aeabi_dadd+0xec>
 80003fe:	e0f1      	b.n	80005e4 <__aeabi_dadd+0x2d0>
 8000400:	2220      	movs	r2, #32
 8000402:	0038      	movs	r0, r7
 8000404:	0029      	movs	r1, r5
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	40d8      	lsrs	r0, r3
 800040a:	4091      	lsls	r1, r2
 800040c:	4097      	lsls	r7, r2
 800040e:	002c      	movs	r4, r5
 8000410:	4301      	orrs	r1, r0
 8000412:	1e78      	subs	r0, r7, #1
 8000414:	4187      	sbcs	r7, r0
 8000416:	40dc      	lsrs	r4, r3
 8000418:	2600      	movs	r6, #0
 800041a:	430f      	orrs	r7, r1
 800041c:	077b      	lsls	r3, r7, #29
 800041e:	d009      	beq.n	8000434 <__aeabi_dadd+0x120>
 8000420:	230f      	movs	r3, #15
 8000422:	403b      	ands	r3, r7
 8000424:	2b04      	cmp	r3, #4
 8000426:	d005      	beq.n	8000434 <__aeabi_dadd+0x120>
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	42bb      	cmp	r3, r7
 800042c:	41bf      	sbcs	r7, r7
 800042e:	427f      	negs	r7, r7
 8000430:	19e4      	adds	r4, r4, r7
 8000432:	001f      	movs	r7, r3
 8000434:	0223      	lsls	r3, r4, #8
 8000436:	d52c      	bpl.n	8000492 <__aeabi_dadd+0x17e>
 8000438:	4b96      	ldr	r3, [pc, #600]	; (8000694 <__aeabi_dadd+0x380>)
 800043a:	3601      	adds	r6, #1
 800043c:	429e      	cmp	r6, r3
 800043e:	d100      	bne.n	8000442 <__aeabi_dadd+0x12e>
 8000440:	e09a      	b.n	8000578 <__aeabi_dadd+0x264>
 8000442:	4645      	mov	r5, r8
 8000444:	4b94      	ldr	r3, [pc, #592]	; (8000698 <__aeabi_dadd+0x384>)
 8000446:	08ff      	lsrs	r7, r7, #3
 8000448:	401c      	ands	r4, r3
 800044a:	0760      	lsls	r0, r4, #29
 800044c:	0576      	lsls	r6, r6, #21
 800044e:	0264      	lsls	r4, r4, #9
 8000450:	4307      	orrs	r7, r0
 8000452:	0b24      	lsrs	r4, r4, #12
 8000454:	0d76      	lsrs	r6, r6, #21
 8000456:	2100      	movs	r1, #0
 8000458:	0324      	lsls	r4, r4, #12
 800045a:	0b23      	lsrs	r3, r4, #12
 800045c:	0d0c      	lsrs	r4, r1, #20
 800045e:	4a8f      	ldr	r2, [pc, #572]	; (800069c <__aeabi_dadd+0x388>)
 8000460:	0524      	lsls	r4, r4, #20
 8000462:	431c      	orrs	r4, r3
 8000464:	4014      	ands	r4, r2
 8000466:	0533      	lsls	r3, r6, #20
 8000468:	4323      	orrs	r3, r4
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	07ed      	lsls	r5, r5, #31
 800046e:	085b      	lsrs	r3, r3, #1
 8000470:	432b      	orrs	r3, r5
 8000472:	0038      	movs	r0, r7
 8000474:	0019      	movs	r1, r3
 8000476:	bc3c      	pop	{r2, r3, r4, r5}
 8000478:	4690      	mov	r8, r2
 800047a:	4699      	mov	r9, r3
 800047c:	46a2      	mov	sl, r4
 800047e:	46ab      	mov	fp, r5
 8000480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000482:	4664      	mov	r4, ip
 8000484:	4304      	orrs	r4, r0
 8000486:	d100      	bne.n	800048a <__aeabi_dadd+0x176>
 8000488:	e211      	b.n	80008ae <__aeabi_dadd+0x59a>
 800048a:	0004      	movs	r4, r0
 800048c:	4667      	mov	r7, ip
 800048e:	077b      	lsls	r3, r7, #29
 8000490:	d1c6      	bne.n	8000420 <__aeabi_dadd+0x10c>
 8000492:	4645      	mov	r5, r8
 8000494:	0760      	lsls	r0, r4, #29
 8000496:	08ff      	lsrs	r7, r7, #3
 8000498:	4307      	orrs	r7, r0
 800049a:	08e4      	lsrs	r4, r4, #3
 800049c:	4b7d      	ldr	r3, [pc, #500]	; (8000694 <__aeabi_dadd+0x380>)
 800049e:	429e      	cmp	r6, r3
 80004a0:	d030      	beq.n	8000504 <__aeabi_dadd+0x1f0>
 80004a2:	0324      	lsls	r4, r4, #12
 80004a4:	0576      	lsls	r6, r6, #21
 80004a6:	0b24      	lsrs	r4, r4, #12
 80004a8:	0d76      	lsrs	r6, r6, #21
 80004aa:	e7d4      	b.n	8000456 <__aeabi_dadd+0x142>
 80004ac:	1a33      	subs	r3, r6, r0
 80004ae:	469a      	mov	sl, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dd78      	ble.n	80005a6 <__aeabi_dadd+0x292>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d031      	beq.n	800051c <__aeabi_dadd+0x208>
 80004b8:	4876      	ldr	r0, [pc, #472]	; (8000694 <__aeabi_dadd+0x380>)
 80004ba:	4286      	cmp	r6, r0
 80004bc:	d0ae      	beq.n	800041c <__aeabi_dadd+0x108>
 80004be:	2080      	movs	r0, #128	; 0x80
 80004c0:	0400      	lsls	r0, r0, #16
 80004c2:	4301      	orrs	r1, r0
 80004c4:	4653      	mov	r3, sl
 80004c6:	2b38      	cmp	r3, #56	; 0x38
 80004c8:	dc00      	bgt.n	80004cc <__aeabi_dadd+0x1b8>
 80004ca:	e0e9      	b.n	80006a0 <__aeabi_dadd+0x38c>
 80004cc:	430a      	orrs	r2, r1
 80004ce:	1e51      	subs	r1, r2, #1
 80004d0:	418a      	sbcs	r2, r1
 80004d2:	2100      	movs	r1, #0
 80004d4:	19d2      	adds	r2, r2, r7
 80004d6:	42ba      	cmp	r2, r7
 80004d8:	41bf      	sbcs	r7, r7
 80004da:	1909      	adds	r1, r1, r4
 80004dc:	427c      	negs	r4, r7
 80004de:	0017      	movs	r7, r2
 80004e0:	190c      	adds	r4, r1, r4
 80004e2:	0223      	lsls	r3, r4, #8
 80004e4:	d5d3      	bpl.n	800048e <__aeabi_dadd+0x17a>
 80004e6:	4b6b      	ldr	r3, [pc, #428]	; (8000694 <__aeabi_dadd+0x380>)
 80004e8:	3601      	adds	r6, #1
 80004ea:	429e      	cmp	r6, r3
 80004ec:	d100      	bne.n	80004f0 <__aeabi_dadd+0x1dc>
 80004ee:	e13a      	b.n	8000766 <__aeabi_dadd+0x452>
 80004f0:	2001      	movs	r0, #1
 80004f2:	4b69      	ldr	r3, [pc, #420]	; (8000698 <__aeabi_dadd+0x384>)
 80004f4:	401c      	ands	r4, r3
 80004f6:	087b      	lsrs	r3, r7, #1
 80004f8:	4007      	ands	r7, r0
 80004fa:	431f      	orrs	r7, r3
 80004fc:	07e0      	lsls	r0, r4, #31
 80004fe:	4307      	orrs	r7, r0
 8000500:	0864      	lsrs	r4, r4, #1
 8000502:	e78b      	b.n	800041c <__aeabi_dadd+0x108>
 8000504:	0023      	movs	r3, r4
 8000506:	433b      	orrs	r3, r7
 8000508:	d100      	bne.n	800050c <__aeabi_dadd+0x1f8>
 800050a:	e1cb      	b.n	80008a4 <__aeabi_dadd+0x590>
 800050c:	2280      	movs	r2, #128	; 0x80
 800050e:	0312      	lsls	r2, r2, #12
 8000510:	4314      	orrs	r4, r2
 8000512:	0324      	lsls	r4, r4, #12
 8000514:	0b24      	lsrs	r4, r4, #12
 8000516:	e79e      	b.n	8000456 <__aeabi_dadd+0x142>
 8000518:	002e      	movs	r6, r5
 800051a:	e77f      	b.n	800041c <__aeabi_dadd+0x108>
 800051c:	0008      	movs	r0, r1
 800051e:	4310      	orrs	r0, r2
 8000520:	d100      	bne.n	8000524 <__aeabi_dadd+0x210>
 8000522:	e0b4      	b.n	800068e <__aeabi_dadd+0x37a>
 8000524:	1e58      	subs	r0, r3, #1
 8000526:	2800      	cmp	r0, #0
 8000528:	d000      	beq.n	800052c <__aeabi_dadd+0x218>
 800052a:	e0de      	b.n	80006ea <__aeabi_dadd+0x3d6>
 800052c:	18ba      	adds	r2, r7, r2
 800052e:	42ba      	cmp	r2, r7
 8000530:	419b      	sbcs	r3, r3
 8000532:	1864      	adds	r4, r4, r1
 8000534:	425b      	negs	r3, r3
 8000536:	18e4      	adds	r4, r4, r3
 8000538:	0017      	movs	r7, r2
 800053a:	2601      	movs	r6, #1
 800053c:	0223      	lsls	r3, r4, #8
 800053e:	d5a6      	bpl.n	800048e <__aeabi_dadd+0x17a>
 8000540:	2602      	movs	r6, #2
 8000542:	e7d5      	b.n	80004f0 <__aeabi_dadd+0x1dc>
 8000544:	2d00      	cmp	r5, #0
 8000546:	d16e      	bne.n	8000626 <__aeabi_dadd+0x312>
 8000548:	1c70      	adds	r0, r6, #1
 800054a:	0540      	lsls	r0, r0, #21
 800054c:	0d40      	lsrs	r0, r0, #21
 800054e:	2801      	cmp	r0, #1
 8000550:	dc00      	bgt.n	8000554 <__aeabi_dadd+0x240>
 8000552:	e0f9      	b.n	8000748 <__aeabi_dadd+0x434>
 8000554:	1ab8      	subs	r0, r7, r2
 8000556:	4684      	mov	ip, r0
 8000558:	4287      	cmp	r7, r0
 800055a:	4180      	sbcs	r0, r0
 800055c:	1ae5      	subs	r5, r4, r3
 800055e:	4240      	negs	r0, r0
 8000560:	1a2d      	subs	r5, r5, r0
 8000562:	0228      	lsls	r0, r5, #8
 8000564:	d400      	bmi.n	8000568 <__aeabi_dadd+0x254>
 8000566:	e089      	b.n	800067c <__aeabi_dadd+0x368>
 8000568:	1bd7      	subs	r7, r2, r7
 800056a:	42ba      	cmp	r2, r7
 800056c:	4192      	sbcs	r2, r2
 800056e:	1b1c      	subs	r4, r3, r4
 8000570:	4252      	negs	r2, r2
 8000572:	1aa5      	subs	r5, r4, r2
 8000574:	46d8      	mov	r8, fp
 8000576:	e729      	b.n	80003cc <__aeabi_dadd+0xb8>
 8000578:	4645      	mov	r5, r8
 800057a:	2400      	movs	r4, #0
 800057c:	2700      	movs	r7, #0
 800057e:	e76a      	b.n	8000456 <__aeabi_dadd+0x142>
 8000580:	4c45      	ldr	r4, [pc, #276]	; (8000698 <__aeabi_dadd+0x384>)
 8000582:	1af6      	subs	r6, r6, r3
 8000584:	402c      	ands	r4, r5
 8000586:	e749      	b.n	800041c <__aeabi_dadd+0x108>
 8000588:	003d      	movs	r5, r7
 800058a:	3828      	subs	r0, #40	; 0x28
 800058c:	4085      	lsls	r5, r0
 800058e:	2700      	movs	r7, #0
 8000590:	e72e      	b.n	80003f0 <__aeabi_dadd+0xdc>
 8000592:	0038      	movs	r0, r7
 8000594:	f7ff fe82 	bl	800029c <__clzsi2>
 8000598:	3020      	adds	r0, #32
 800059a:	e71d      	b.n	80003d8 <__aeabi_dadd+0xc4>
 800059c:	430a      	orrs	r2, r1
 800059e:	1e51      	subs	r1, r2, #1
 80005a0:	418a      	sbcs	r2, r1
 80005a2:	2100      	movs	r1, #0
 80005a4:	e707      	b.n	80003b6 <__aeabi_dadd+0xa2>
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_dadd+0x298>
 80005aa:	e0f3      	b.n	8000794 <__aeabi_dadd+0x480>
 80005ac:	1c70      	adds	r0, r6, #1
 80005ae:	0543      	lsls	r3, r0, #21
 80005b0:	0d5b      	lsrs	r3, r3, #21
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	dc00      	bgt.n	80005b8 <__aeabi_dadd+0x2a4>
 80005b6:	e0ad      	b.n	8000714 <__aeabi_dadd+0x400>
 80005b8:	4b36      	ldr	r3, [pc, #216]	; (8000694 <__aeabi_dadd+0x380>)
 80005ba:	4298      	cmp	r0, r3
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dadd+0x2ac>
 80005be:	e0d1      	b.n	8000764 <__aeabi_dadd+0x450>
 80005c0:	18ba      	adds	r2, r7, r2
 80005c2:	42ba      	cmp	r2, r7
 80005c4:	41bf      	sbcs	r7, r7
 80005c6:	1864      	adds	r4, r4, r1
 80005c8:	427f      	negs	r7, r7
 80005ca:	19e4      	adds	r4, r4, r7
 80005cc:	07e7      	lsls	r7, r4, #31
 80005ce:	0852      	lsrs	r2, r2, #1
 80005d0:	4317      	orrs	r7, r2
 80005d2:	0864      	lsrs	r4, r4, #1
 80005d4:	0006      	movs	r6, r0
 80005d6:	e721      	b.n	800041c <__aeabi_dadd+0x108>
 80005d8:	482e      	ldr	r0, [pc, #184]	; (8000694 <__aeabi_dadd+0x380>)
 80005da:	4285      	cmp	r5, r0
 80005dc:	d100      	bne.n	80005e0 <__aeabi_dadd+0x2cc>
 80005de:	e093      	b.n	8000708 <__aeabi_dadd+0x3f4>
 80005e0:	001d      	movs	r5, r3
 80005e2:	e6d0      	b.n	8000386 <__aeabi_dadd+0x72>
 80005e4:	0029      	movs	r1, r5
 80005e6:	3e1f      	subs	r6, #31
 80005e8:	40f1      	lsrs	r1, r6
 80005ea:	2b20      	cmp	r3, #32
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dadd+0x2dc>
 80005ee:	e08d      	b.n	800070c <__aeabi_dadd+0x3f8>
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	409d      	lsls	r5, r3
 80005f6:	432f      	orrs	r7, r5
 80005f8:	1e7d      	subs	r5, r7, #1
 80005fa:	41af      	sbcs	r7, r5
 80005fc:	2400      	movs	r4, #0
 80005fe:	430f      	orrs	r7, r1
 8000600:	2600      	movs	r6, #0
 8000602:	e744      	b.n	800048e <__aeabi_dadd+0x17a>
 8000604:	002b      	movs	r3, r5
 8000606:	0008      	movs	r0, r1
 8000608:	3b20      	subs	r3, #32
 800060a:	40d8      	lsrs	r0, r3
 800060c:	0003      	movs	r3, r0
 800060e:	2d20      	cmp	r5, #32
 8000610:	d100      	bne.n	8000614 <__aeabi_dadd+0x300>
 8000612:	e07d      	b.n	8000710 <__aeabi_dadd+0x3fc>
 8000614:	2040      	movs	r0, #64	; 0x40
 8000616:	1b45      	subs	r5, r0, r5
 8000618:	40a9      	lsls	r1, r5
 800061a:	430a      	orrs	r2, r1
 800061c:	1e51      	subs	r1, r2, #1
 800061e:	418a      	sbcs	r2, r1
 8000620:	2100      	movs	r1, #0
 8000622:	431a      	orrs	r2, r3
 8000624:	e6c7      	b.n	80003b6 <__aeabi_dadd+0xa2>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d050      	beq.n	80006cc <__aeabi_dadd+0x3b8>
 800062a:	4e1a      	ldr	r6, [pc, #104]	; (8000694 <__aeabi_dadd+0x380>)
 800062c:	42b0      	cmp	r0, r6
 800062e:	d057      	beq.n	80006e0 <__aeabi_dadd+0x3cc>
 8000630:	2680      	movs	r6, #128	; 0x80
 8000632:	426b      	negs	r3, r5
 8000634:	4699      	mov	r9, r3
 8000636:	0436      	lsls	r6, r6, #16
 8000638:	4334      	orrs	r4, r6
 800063a:	464b      	mov	r3, r9
 800063c:	2b38      	cmp	r3, #56	; 0x38
 800063e:	dd00      	ble.n	8000642 <__aeabi_dadd+0x32e>
 8000640:	e0d6      	b.n	80007f0 <__aeabi_dadd+0x4dc>
 8000642:	2b1f      	cmp	r3, #31
 8000644:	dd00      	ble.n	8000648 <__aeabi_dadd+0x334>
 8000646:	e135      	b.n	80008b4 <__aeabi_dadd+0x5a0>
 8000648:	2620      	movs	r6, #32
 800064a:	1af5      	subs	r5, r6, r3
 800064c:	0026      	movs	r6, r4
 800064e:	40ae      	lsls	r6, r5
 8000650:	46b2      	mov	sl, r6
 8000652:	003e      	movs	r6, r7
 8000654:	40de      	lsrs	r6, r3
 8000656:	46ac      	mov	ip, r5
 8000658:	0035      	movs	r5, r6
 800065a:	4656      	mov	r6, sl
 800065c:	432e      	orrs	r6, r5
 800065e:	4665      	mov	r5, ip
 8000660:	40af      	lsls	r7, r5
 8000662:	1e7d      	subs	r5, r7, #1
 8000664:	41af      	sbcs	r7, r5
 8000666:	40dc      	lsrs	r4, r3
 8000668:	4337      	orrs	r7, r6
 800066a:	1bd7      	subs	r7, r2, r7
 800066c:	42ba      	cmp	r2, r7
 800066e:	4192      	sbcs	r2, r2
 8000670:	1b0c      	subs	r4, r1, r4
 8000672:	4252      	negs	r2, r2
 8000674:	1aa4      	subs	r4, r4, r2
 8000676:	0006      	movs	r6, r0
 8000678:	46d8      	mov	r8, fp
 800067a:	e6a3      	b.n	80003c4 <__aeabi_dadd+0xb0>
 800067c:	4664      	mov	r4, ip
 800067e:	4667      	mov	r7, ip
 8000680:	432c      	orrs	r4, r5
 8000682:	d000      	beq.n	8000686 <__aeabi_dadd+0x372>
 8000684:	e6a2      	b.n	80003cc <__aeabi_dadd+0xb8>
 8000686:	2500      	movs	r5, #0
 8000688:	2600      	movs	r6, #0
 800068a:	2700      	movs	r7, #0
 800068c:	e706      	b.n	800049c <__aeabi_dadd+0x188>
 800068e:	001e      	movs	r6, r3
 8000690:	e6c4      	b.n	800041c <__aeabi_dadd+0x108>
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	000007ff 	.word	0x000007ff
 8000698:	ff7fffff 	.word	0xff7fffff
 800069c:	800fffff 	.word	0x800fffff
 80006a0:	2b1f      	cmp	r3, #31
 80006a2:	dc63      	bgt.n	800076c <__aeabi_dadd+0x458>
 80006a4:	2020      	movs	r0, #32
 80006a6:	1ac3      	subs	r3, r0, r3
 80006a8:	0008      	movs	r0, r1
 80006aa:	4098      	lsls	r0, r3
 80006ac:	469c      	mov	ip, r3
 80006ae:	4683      	mov	fp, r0
 80006b0:	4653      	mov	r3, sl
 80006b2:	0010      	movs	r0, r2
 80006b4:	40d8      	lsrs	r0, r3
 80006b6:	0003      	movs	r3, r0
 80006b8:	4658      	mov	r0, fp
 80006ba:	4318      	orrs	r0, r3
 80006bc:	4663      	mov	r3, ip
 80006be:	409a      	lsls	r2, r3
 80006c0:	1e53      	subs	r3, r2, #1
 80006c2:	419a      	sbcs	r2, r3
 80006c4:	4653      	mov	r3, sl
 80006c6:	4302      	orrs	r2, r0
 80006c8:	40d9      	lsrs	r1, r3
 80006ca:	e703      	b.n	80004d4 <__aeabi_dadd+0x1c0>
 80006cc:	0026      	movs	r6, r4
 80006ce:	433e      	orrs	r6, r7
 80006d0:	d006      	beq.n	80006e0 <__aeabi_dadd+0x3cc>
 80006d2:	43eb      	mvns	r3, r5
 80006d4:	4699      	mov	r9, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0c7      	beq.n	800066a <__aeabi_dadd+0x356>
 80006da:	4e94      	ldr	r6, [pc, #592]	; (800092c <__aeabi_dadd+0x618>)
 80006dc:	42b0      	cmp	r0, r6
 80006de:	d1ac      	bne.n	800063a <__aeabi_dadd+0x326>
 80006e0:	000c      	movs	r4, r1
 80006e2:	0017      	movs	r7, r2
 80006e4:	0006      	movs	r6, r0
 80006e6:	46d8      	mov	r8, fp
 80006e8:	e698      	b.n	800041c <__aeabi_dadd+0x108>
 80006ea:	4b90      	ldr	r3, [pc, #576]	; (800092c <__aeabi_dadd+0x618>)
 80006ec:	459a      	cmp	sl, r3
 80006ee:	d00b      	beq.n	8000708 <__aeabi_dadd+0x3f4>
 80006f0:	4682      	mov	sl, r0
 80006f2:	e6e7      	b.n	80004c4 <__aeabi_dadd+0x1b0>
 80006f4:	2800      	cmp	r0, #0
 80006f6:	d000      	beq.n	80006fa <__aeabi_dadd+0x3e6>
 80006f8:	e09e      	b.n	8000838 <__aeabi_dadd+0x524>
 80006fa:	0018      	movs	r0, r3
 80006fc:	4310      	orrs	r0, r2
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x3ee>
 8000700:	e0e9      	b.n	80008d6 <__aeabi_dadd+0x5c2>
 8000702:	001c      	movs	r4, r3
 8000704:	0017      	movs	r7, r2
 8000706:	46d8      	mov	r8, fp
 8000708:	4e88      	ldr	r6, [pc, #544]	; (800092c <__aeabi_dadd+0x618>)
 800070a:	e687      	b.n	800041c <__aeabi_dadd+0x108>
 800070c:	2500      	movs	r5, #0
 800070e:	e772      	b.n	80005f6 <__aeabi_dadd+0x2e2>
 8000710:	2100      	movs	r1, #0
 8000712:	e782      	b.n	800061a <__aeabi_dadd+0x306>
 8000714:	0023      	movs	r3, r4
 8000716:	433b      	orrs	r3, r7
 8000718:	2e00      	cmp	r6, #0
 800071a:	d000      	beq.n	800071e <__aeabi_dadd+0x40a>
 800071c:	e0ab      	b.n	8000876 <__aeabi_dadd+0x562>
 800071e:	2b00      	cmp	r3, #0
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x410>
 8000722:	e0e7      	b.n	80008f4 <__aeabi_dadd+0x5e0>
 8000724:	000b      	movs	r3, r1
 8000726:	4313      	orrs	r3, r2
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0x418>
 800072a:	e677      	b.n	800041c <__aeabi_dadd+0x108>
 800072c:	18ba      	adds	r2, r7, r2
 800072e:	42ba      	cmp	r2, r7
 8000730:	41bf      	sbcs	r7, r7
 8000732:	1864      	adds	r4, r4, r1
 8000734:	427f      	negs	r7, r7
 8000736:	19e4      	adds	r4, r4, r7
 8000738:	0223      	lsls	r3, r4, #8
 800073a:	d400      	bmi.n	800073e <__aeabi_dadd+0x42a>
 800073c:	e0f2      	b.n	8000924 <__aeabi_dadd+0x610>
 800073e:	4b7c      	ldr	r3, [pc, #496]	; (8000930 <__aeabi_dadd+0x61c>)
 8000740:	0017      	movs	r7, r2
 8000742:	401c      	ands	r4, r3
 8000744:	0006      	movs	r6, r0
 8000746:	e669      	b.n	800041c <__aeabi_dadd+0x108>
 8000748:	0020      	movs	r0, r4
 800074a:	4338      	orrs	r0, r7
 800074c:	2e00      	cmp	r6, #0
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dadd+0x3e0>
 8000750:	2800      	cmp	r0, #0
 8000752:	d15b      	bne.n	800080c <__aeabi_dadd+0x4f8>
 8000754:	001c      	movs	r4, r3
 8000756:	4314      	orrs	r4, r2
 8000758:	d100      	bne.n	800075c <__aeabi_dadd+0x448>
 800075a:	e0a8      	b.n	80008ae <__aeabi_dadd+0x59a>
 800075c:	001c      	movs	r4, r3
 800075e:	0017      	movs	r7, r2
 8000760:	46d8      	mov	r8, fp
 8000762:	e65b      	b.n	800041c <__aeabi_dadd+0x108>
 8000764:	0006      	movs	r6, r0
 8000766:	2400      	movs	r4, #0
 8000768:	2700      	movs	r7, #0
 800076a:	e697      	b.n	800049c <__aeabi_dadd+0x188>
 800076c:	4650      	mov	r0, sl
 800076e:	000b      	movs	r3, r1
 8000770:	3820      	subs	r0, #32
 8000772:	40c3      	lsrs	r3, r0
 8000774:	4699      	mov	r9, r3
 8000776:	4653      	mov	r3, sl
 8000778:	2b20      	cmp	r3, #32
 800077a:	d100      	bne.n	800077e <__aeabi_dadd+0x46a>
 800077c:	e095      	b.n	80008aa <__aeabi_dadd+0x596>
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	4650      	mov	r0, sl
 8000782:	1a1b      	subs	r3, r3, r0
 8000784:	4099      	lsls	r1, r3
 8000786:	430a      	orrs	r2, r1
 8000788:	1e51      	subs	r1, r2, #1
 800078a:	418a      	sbcs	r2, r1
 800078c:	464b      	mov	r3, r9
 800078e:	2100      	movs	r1, #0
 8000790:	431a      	orrs	r2, r3
 8000792:	e69f      	b.n	80004d4 <__aeabi_dadd+0x1c0>
 8000794:	2e00      	cmp	r6, #0
 8000796:	d130      	bne.n	80007fa <__aeabi_dadd+0x4e6>
 8000798:	0026      	movs	r6, r4
 800079a:	433e      	orrs	r6, r7
 800079c:	d067      	beq.n	800086e <__aeabi_dadd+0x55a>
 800079e:	43db      	mvns	r3, r3
 80007a0:	469a      	mov	sl, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d01c      	beq.n	80007e0 <__aeabi_dadd+0x4cc>
 80007a6:	4e61      	ldr	r6, [pc, #388]	; (800092c <__aeabi_dadd+0x618>)
 80007a8:	42b0      	cmp	r0, r6
 80007aa:	d060      	beq.n	800086e <__aeabi_dadd+0x55a>
 80007ac:	4653      	mov	r3, sl
 80007ae:	2b38      	cmp	r3, #56	; 0x38
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_dadd+0x4a0>
 80007b2:	e096      	b.n	80008e2 <__aeabi_dadd+0x5ce>
 80007b4:	2b1f      	cmp	r3, #31
 80007b6:	dd00      	ble.n	80007ba <__aeabi_dadd+0x4a6>
 80007b8:	e09f      	b.n	80008fa <__aeabi_dadd+0x5e6>
 80007ba:	2620      	movs	r6, #32
 80007bc:	1af3      	subs	r3, r6, r3
 80007be:	0026      	movs	r6, r4
 80007c0:	409e      	lsls	r6, r3
 80007c2:	469c      	mov	ip, r3
 80007c4:	46b3      	mov	fp, r6
 80007c6:	4653      	mov	r3, sl
 80007c8:	003e      	movs	r6, r7
 80007ca:	40de      	lsrs	r6, r3
 80007cc:	0033      	movs	r3, r6
 80007ce:	465e      	mov	r6, fp
 80007d0:	431e      	orrs	r6, r3
 80007d2:	4663      	mov	r3, ip
 80007d4:	409f      	lsls	r7, r3
 80007d6:	1e7b      	subs	r3, r7, #1
 80007d8:	419f      	sbcs	r7, r3
 80007da:	4653      	mov	r3, sl
 80007dc:	40dc      	lsrs	r4, r3
 80007de:	4337      	orrs	r7, r6
 80007e0:	18bf      	adds	r7, r7, r2
 80007e2:	4297      	cmp	r7, r2
 80007e4:	4192      	sbcs	r2, r2
 80007e6:	1864      	adds	r4, r4, r1
 80007e8:	4252      	negs	r2, r2
 80007ea:	18a4      	adds	r4, r4, r2
 80007ec:	0006      	movs	r6, r0
 80007ee:	e678      	b.n	80004e2 <__aeabi_dadd+0x1ce>
 80007f0:	4327      	orrs	r7, r4
 80007f2:	1e7c      	subs	r4, r7, #1
 80007f4:	41a7      	sbcs	r7, r4
 80007f6:	2400      	movs	r4, #0
 80007f8:	e737      	b.n	800066a <__aeabi_dadd+0x356>
 80007fa:	4e4c      	ldr	r6, [pc, #304]	; (800092c <__aeabi_dadd+0x618>)
 80007fc:	42b0      	cmp	r0, r6
 80007fe:	d036      	beq.n	800086e <__aeabi_dadd+0x55a>
 8000800:	2680      	movs	r6, #128	; 0x80
 8000802:	425b      	negs	r3, r3
 8000804:	0436      	lsls	r6, r6, #16
 8000806:	469a      	mov	sl, r3
 8000808:	4334      	orrs	r4, r6
 800080a:	e7cf      	b.n	80007ac <__aeabi_dadd+0x498>
 800080c:	0018      	movs	r0, r3
 800080e:	4310      	orrs	r0, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x500>
 8000812:	e603      	b.n	800041c <__aeabi_dadd+0x108>
 8000814:	1ab8      	subs	r0, r7, r2
 8000816:	4684      	mov	ip, r0
 8000818:	4567      	cmp	r7, ip
 800081a:	41ad      	sbcs	r5, r5
 800081c:	1ae0      	subs	r0, r4, r3
 800081e:	426d      	negs	r5, r5
 8000820:	1b40      	subs	r0, r0, r5
 8000822:	0205      	lsls	r5, r0, #8
 8000824:	d400      	bmi.n	8000828 <__aeabi_dadd+0x514>
 8000826:	e62c      	b.n	8000482 <__aeabi_dadd+0x16e>
 8000828:	1bd7      	subs	r7, r2, r7
 800082a:	42ba      	cmp	r2, r7
 800082c:	4192      	sbcs	r2, r2
 800082e:	1b1c      	subs	r4, r3, r4
 8000830:	4252      	negs	r2, r2
 8000832:	1aa4      	subs	r4, r4, r2
 8000834:	46d8      	mov	r8, fp
 8000836:	e5f1      	b.n	800041c <__aeabi_dadd+0x108>
 8000838:	0018      	movs	r0, r3
 800083a:	4310      	orrs	r0, r2
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x52c>
 800083e:	e763      	b.n	8000708 <__aeabi_dadd+0x3f4>
 8000840:	08f8      	lsrs	r0, r7, #3
 8000842:	0767      	lsls	r7, r4, #29
 8000844:	4307      	orrs	r7, r0
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	08e4      	lsrs	r4, r4, #3
 800084a:	0300      	lsls	r0, r0, #12
 800084c:	4204      	tst	r4, r0
 800084e:	d008      	beq.n	8000862 <__aeabi_dadd+0x54e>
 8000850:	08dd      	lsrs	r5, r3, #3
 8000852:	4205      	tst	r5, r0
 8000854:	d105      	bne.n	8000862 <__aeabi_dadd+0x54e>
 8000856:	08d2      	lsrs	r2, r2, #3
 8000858:	0759      	lsls	r1, r3, #29
 800085a:	4311      	orrs	r1, r2
 800085c:	000f      	movs	r7, r1
 800085e:	002c      	movs	r4, r5
 8000860:	46d8      	mov	r8, fp
 8000862:	0f7b      	lsrs	r3, r7, #29
 8000864:	00e4      	lsls	r4, r4, #3
 8000866:	431c      	orrs	r4, r3
 8000868:	00ff      	lsls	r7, r7, #3
 800086a:	4e30      	ldr	r6, [pc, #192]	; (800092c <__aeabi_dadd+0x618>)
 800086c:	e5d6      	b.n	800041c <__aeabi_dadd+0x108>
 800086e:	000c      	movs	r4, r1
 8000870:	0017      	movs	r7, r2
 8000872:	0006      	movs	r6, r0
 8000874:	e5d2      	b.n	800041c <__aeabi_dadd+0x108>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d038      	beq.n	80008ec <__aeabi_dadd+0x5d8>
 800087a:	000b      	movs	r3, r1
 800087c:	4313      	orrs	r3, r2
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x56e>
 8000880:	e742      	b.n	8000708 <__aeabi_dadd+0x3f4>
 8000882:	08f8      	lsrs	r0, r7, #3
 8000884:	0767      	lsls	r7, r4, #29
 8000886:	4307      	orrs	r7, r0
 8000888:	2080      	movs	r0, #128	; 0x80
 800088a:	08e4      	lsrs	r4, r4, #3
 800088c:	0300      	lsls	r0, r0, #12
 800088e:	4204      	tst	r4, r0
 8000890:	d0e7      	beq.n	8000862 <__aeabi_dadd+0x54e>
 8000892:	08cb      	lsrs	r3, r1, #3
 8000894:	4203      	tst	r3, r0
 8000896:	d1e4      	bne.n	8000862 <__aeabi_dadd+0x54e>
 8000898:	08d2      	lsrs	r2, r2, #3
 800089a:	0749      	lsls	r1, r1, #29
 800089c:	4311      	orrs	r1, r2
 800089e:	000f      	movs	r7, r1
 80008a0:	001c      	movs	r4, r3
 80008a2:	e7de      	b.n	8000862 <__aeabi_dadd+0x54e>
 80008a4:	2700      	movs	r7, #0
 80008a6:	2400      	movs	r4, #0
 80008a8:	e5d5      	b.n	8000456 <__aeabi_dadd+0x142>
 80008aa:	2100      	movs	r1, #0
 80008ac:	e76b      	b.n	8000786 <__aeabi_dadd+0x472>
 80008ae:	2500      	movs	r5, #0
 80008b0:	2700      	movs	r7, #0
 80008b2:	e5f3      	b.n	800049c <__aeabi_dadd+0x188>
 80008b4:	464e      	mov	r6, r9
 80008b6:	0025      	movs	r5, r4
 80008b8:	3e20      	subs	r6, #32
 80008ba:	40f5      	lsrs	r5, r6
 80008bc:	464b      	mov	r3, r9
 80008be:	002e      	movs	r6, r5
 80008c0:	2b20      	cmp	r3, #32
 80008c2:	d02d      	beq.n	8000920 <__aeabi_dadd+0x60c>
 80008c4:	2540      	movs	r5, #64	; 0x40
 80008c6:	1aed      	subs	r5, r5, r3
 80008c8:	40ac      	lsls	r4, r5
 80008ca:	4327      	orrs	r7, r4
 80008cc:	1e7c      	subs	r4, r7, #1
 80008ce:	41a7      	sbcs	r7, r4
 80008d0:	2400      	movs	r4, #0
 80008d2:	4337      	orrs	r7, r6
 80008d4:	e6c9      	b.n	800066a <__aeabi_dadd+0x356>
 80008d6:	2480      	movs	r4, #128	; 0x80
 80008d8:	2500      	movs	r5, #0
 80008da:	0324      	lsls	r4, r4, #12
 80008dc:	4e13      	ldr	r6, [pc, #76]	; (800092c <__aeabi_dadd+0x618>)
 80008de:	2700      	movs	r7, #0
 80008e0:	e5dc      	b.n	800049c <__aeabi_dadd+0x188>
 80008e2:	4327      	orrs	r7, r4
 80008e4:	1e7c      	subs	r4, r7, #1
 80008e6:	41a7      	sbcs	r7, r4
 80008e8:	2400      	movs	r4, #0
 80008ea:	e779      	b.n	80007e0 <__aeabi_dadd+0x4cc>
 80008ec:	000c      	movs	r4, r1
 80008ee:	0017      	movs	r7, r2
 80008f0:	4e0e      	ldr	r6, [pc, #56]	; (800092c <__aeabi_dadd+0x618>)
 80008f2:	e593      	b.n	800041c <__aeabi_dadd+0x108>
 80008f4:	000c      	movs	r4, r1
 80008f6:	0017      	movs	r7, r2
 80008f8:	e590      	b.n	800041c <__aeabi_dadd+0x108>
 80008fa:	4656      	mov	r6, sl
 80008fc:	0023      	movs	r3, r4
 80008fe:	3e20      	subs	r6, #32
 8000900:	40f3      	lsrs	r3, r6
 8000902:	4699      	mov	r9, r3
 8000904:	4653      	mov	r3, sl
 8000906:	2b20      	cmp	r3, #32
 8000908:	d00e      	beq.n	8000928 <__aeabi_dadd+0x614>
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	4656      	mov	r6, sl
 800090e:	1b9b      	subs	r3, r3, r6
 8000910:	409c      	lsls	r4, r3
 8000912:	4327      	orrs	r7, r4
 8000914:	1e7c      	subs	r4, r7, #1
 8000916:	41a7      	sbcs	r7, r4
 8000918:	464b      	mov	r3, r9
 800091a:	2400      	movs	r4, #0
 800091c:	431f      	orrs	r7, r3
 800091e:	e75f      	b.n	80007e0 <__aeabi_dadd+0x4cc>
 8000920:	2400      	movs	r4, #0
 8000922:	e7d2      	b.n	80008ca <__aeabi_dadd+0x5b6>
 8000924:	0017      	movs	r7, r2
 8000926:	e5b2      	b.n	800048e <__aeabi_dadd+0x17a>
 8000928:	2400      	movs	r4, #0
 800092a:	e7f2      	b.n	8000912 <__aeabi_dadd+0x5fe>
 800092c:	000007ff 	.word	0x000007ff
 8000930:	ff7fffff 	.word	0xff7fffff

08000934 <__aeabi_ddiv>:
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	4657      	mov	r7, sl
 8000938:	4645      	mov	r5, r8
 800093a:	46de      	mov	lr, fp
 800093c:	464e      	mov	r6, r9
 800093e:	b5e0      	push	{r5, r6, r7, lr}
 8000940:	004c      	lsls	r4, r1, #1
 8000942:	030e      	lsls	r6, r1, #12
 8000944:	b087      	sub	sp, #28
 8000946:	4683      	mov	fp, r0
 8000948:	4692      	mov	sl, r2
 800094a:	001d      	movs	r5, r3
 800094c:	4680      	mov	r8, r0
 800094e:	0b36      	lsrs	r6, r6, #12
 8000950:	0d64      	lsrs	r4, r4, #21
 8000952:	0fcf      	lsrs	r7, r1, #31
 8000954:	2c00      	cmp	r4, #0
 8000956:	d04f      	beq.n	80009f8 <__aeabi_ddiv+0xc4>
 8000958:	4b6f      	ldr	r3, [pc, #444]	; (8000b18 <__aeabi_ddiv+0x1e4>)
 800095a:	429c      	cmp	r4, r3
 800095c:	d035      	beq.n	80009ca <__aeabi_ddiv+0x96>
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	0f42      	lsrs	r2, r0, #29
 8000962:	041b      	lsls	r3, r3, #16
 8000964:	00f6      	lsls	r6, r6, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	4333      	orrs	r3, r6
 800096a:	4699      	mov	r9, r3
 800096c:	00c3      	lsls	r3, r0, #3
 800096e:	4698      	mov	r8, r3
 8000970:	4b6a      	ldr	r3, [pc, #424]	; (8000b1c <__aeabi_ddiv+0x1e8>)
 8000972:	2600      	movs	r6, #0
 8000974:	469c      	mov	ip, r3
 8000976:	2300      	movs	r3, #0
 8000978:	4464      	add	r4, ip
 800097a:	9303      	str	r3, [sp, #12]
 800097c:	032b      	lsls	r3, r5, #12
 800097e:	0b1b      	lsrs	r3, r3, #12
 8000980:	469b      	mov	fp, r3
 8000982:	006b      	lsls	r3, r5, #1
 8000984:	0fed      	lsrs	r5, r5, #31
 8000986:	4650      	mov	r0, sl
 8000988:	0d5b      	lsrs	r3, r3, #21
 800098a:	9501      	str	r5, [sp, #4]
 800098c:	d05e      	beq.n	8000a4c <__aeabi_ddiv+0x118>
 800098e:	4a62      	ldr	r2, [pc, #392]	; (8000b18 <__aeabi_ddiv+0x1e4>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d053      	beq.n	8000a3c <__aeabi_ddiv+0x108>
 8000994:	465a      	mov	r2, fp
 8000996:	00d1      	lsls	r1, r2, #3
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	0f40      	lsrs	r0, r0, #29
 800099c:	0412      	lsls	r2, r2, #16
 800099e:	4302      	orrs	r2, r0
 80009a0:	430a      	orrs	r2, r1
 80009a2:	4693      	mov	fp, r2
 80009a4:	4652      	mov	r2, sl
 80009a6:	00d1      	lsls	r1, r2, #3
 80009a8:	4a5c      	ldr	r2, [pc, #368]	; (8000b1c <__aeabi_ddiv+0x1e8>)
 80009aa:	4694      	mov	ip, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	4463      	add	r3, ip
 80009b0:	0038      	movs	r0, r7
 80009b2:	4068      	eors	r0, r5
 80009b4:	4684      	mov	ip, r0
 80009b6:	9002      	str	r0, [sp, #8]
 80009b8:	1ae4      	subs	r4, r4, r3
 80009ba:	4316      	orrs	r6, r2
 80009bc:	2e0f      	cmp	r6, #15
 80009be:	d900      	bls.n	80009c2 <__aeabi_ddiv+0x8e>
 80009c0:	e0b4      	b.n	8000b2c <__aeabi_ddiv+0x1f8>
 80009c2:	4b57      	ldr	r3, [pc, #348]	; (8000b20 <__aeabi_ddiv+0x1ec>)
 80009c4:	00b6      	lsls	r6, r6, #2
 80009c6:	599b      	ldr	r3, [r3, r6]
 80009c8:	469f      	mov	pc, r3
 80009ca:	0003      	movs	r3, r0
 80009cc:	4333      	orrs	r3, r6
 80009ce:	4699      	mov	r9, r3
 80009d0:	d16c      	bne.n	8000aac <__aeabi_ddiv+0x178>
 80009d2:	2300      	movs	r3, #0
 80009d4:	4698      	mov	r8, r3
 80009d6:	3302      	adds	r3, #2
 80009d8:	2608      	movs	r6, #8
 80009da:	9303      	str	r3, [sp, #12]
 80009dc:	e7ce      	b.n	800097c <__aeabi_ddiv+0x48>
 80009de:	46cb      	mov	fp, r9
 80009e0:	4641      	mov	r1, r8
 80009e2:	9a03      	ldr	r2, [sp, #12]
 80009e4:	9701      	str	r7, [sp, #4]
 80009e6:	2a02      	cmp	r2, #2
 80009e8:	d165      	bne.n	8000ab6 <__aeabi_ddiv+0x182>
 80009ea:	9b01      	ldr	r3, [sp, #4]
 80009ec:	4c4a      	ldr	r4, [pc, #296]	; (8000b18 <__aeabi_ddiv+0x1e4>)
 80009ee:	469c      	mov	ip, r3
 80009f0:	2300      	movs	r3, #0
 80009f2:	2200      	movs	r2, #0
 80009f4:	4698      	mov	r8, r3
 80009f6:	e06b      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 80009f8:	0003      	movs	r3, r0
 80009fa:	4333      	orrs	r3, r6
 80009fc:	4699      	mov	r9, r3
 80009fe:	d04e      	beq.n	8000a9e <__aeabi_ddiv+0x16a>
 8000a00:	2e00      	cmp	r6, #0
 8000a02:	d100      	bne.n	8000a06 <__aeabi_ddiv+0xd2>
 8000a04:	e1bc      	b.n	8000d80 <__aeabi_ddiv+0x44c>
 8000a06:	0030      	movs	r0, r6
 8000a08:	f7ff fc48 	bl	800029c <__clzsi2>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	3b0b      	subs	r3, #11
 8000a10:	2b1c      	cmp	r3, #28
 8000a12:	dd00      	ble.n	8000a16 <__aeabi_ddiv+0xe2>
 8000a14:	e1ac      	b.n	8000d70 <__aeabi_ddiv+0x43c>
 8000a16:	221d      	movs	r2, #29
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	465a      	mov	r2, fp
 8000a1c:	0001      	movs	r1, r0
 8000a1e:	40da      	lsrs	r2, r3
 8000a20:	3908      	subs	r1, #8
 8000a22:	408e      	lsls	r6, r1
 8000a24:	0013      	movs	r3, r2
 8000a26:	4333      	orrs	r3, r6
 8000a28:	4699      	mov	r9, r3
 8000a2a:	465b      	mov	r3, fp
 8000a2c:	408b      	lsls	r3, r1
 8000a2e:	4698      	mov	r8, r3
 8000a30:	2300      	movs	r3, #0
 8000a32:	4c3c      	ldr	r4, [pc, #240]	; (8000b24 <__aeabi_ddiv+0x1f0>)
 8000a34:	2600      	movs	r6, #0
 8000a36:	1a24      	subs	r4, r4, r0
 8000a38:	9303      	str	r3, [sp, #12]
 8000a3a:	e79f      	b.n	800097c <__aeabi_ddiv+0x48>
 8000a3c:	4651      	mov	r1, sl
 8000a3e:	465a      	mov	r2, fp
 8000a40:	4311      	orrs	r1, r2
 8000a42:	d129      	bne.n	8000a98 <__aeabi_ddiv+0x164>
 8000a44:	2200      	movs	r2, #0
 8000a46:	4693      	mov	fp, r2
 8000a48:	3202      	adds	r2, #2
 8000a4a:	e7b1      	b.n	80009b0 <__aeabi_ddiv+0x7c>
 8000a4c:	4659      	mov	r1, fp
 8000a4e:	4301      	orrs	r1, r0
 8000a50:	d01e      	beq.n	8000a90 <__aeabi_ddiv+0x15c>
 8000a52:	465b      	mov	r3, fp
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_ddiv+0x126>
 8000a58:	e19e      	b.n	8000d98 <__aeabi_ddiv+0x464>
 8000a5a:	4658      	mov	r0, fp
 8000a5c:	f7ff fc1e 	bl	800029c <__clzsi2>
 8000a60:	0003      	movs	r3, r0
 8000a62:	3b0b      	subs	r3, #11
 8000a64:	2b1c      	cmp	r3, #28
 8000a66:	dd00      	ble.n	8000a6a <__aeabi_ddiv+0x136>
 8000a68:	e18f      	b.n	8000d8a <__aeabi_ddiv+0x456>
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	4659      	mov	r1, fp
 8000a6e:	3a08      	subs	r2, #8
 8000a70:	4091      	lsls	r1, r2
 8000a72:	468b      	mov	fp, r1
 8000a74:	211d      	movs	r1, #29
 8000a76:	1acb      	subs	r3, r1, r3
 8000a78:	4651      	mov	r1, sl
 8000a7a:	40d9      	lsrs	r1, r3
 8000a7c:	000b      	movs	r3, r1
 8000a7e:	4659      	mov	r1, fp
 8000a80:	430b      	orrs	r3, r1
 8000a82:	4651      	mov	r1, sl
 8000a84:	469b      	mov	fp, r3
 8000a86:	4091      	lsls	r1, r2
 8000a88:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <__aeabi_ddiv+0x1f0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	1a1b      	subs	r3, r3, r0
 8000a8e:	e78f      	b.n	80009b0 <__aeabi_ddiv+0x7c>
 8000a90:	2300      	movs	r3, #0
 8000a92:	2201      	movs	r2, #1
 8000a94:	469b      	mov	fp, r3
 8000a96:	e78b      	b.n	80009b0 <__aeabi_ddiv+0x7c>
 8000a98:	4651      	mov	r1, sl
 8000a9a:	2203      	movs	r2, #3
 8000a9c:	e788      	b.n	80009b0 <__aeabi_ddiv+0x7c>
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	4698      	mov	r8, r3
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	2604      	movs	r6, #4
 8000aa6:	2400      	movs	r4, #0
 8000aa8:	9303      	str	r3, [sp, #12]
 8000aaa:	e767      	b.n	800097c <__aeabi_ddiv+0x48>
 8000aac:	2303      	movs	r3, #3
 8000aae:	46b1      	mov	r9, r6
 8000ab0:	9303      	str	r3, [sp, #12]
 8000ab2:	260c      	movs	r6, #12
 8000ab4:	e762      	b.n	800097c <__aeabi_ddiv+0x48>
 8000ab6:	2a03      	cmp	r2, #3
 8000ab8:	d100      	bne.n	8000abc <__aeabi_ddiv+0x188>
 8000aba:	e25c      	b.n	8000f76 <__aeabi_ddiv+0x642>
 8000abc:	9b01      	ldr	r3, [sp, #4]
 8000abe:	2a01      	cmp	r2, #1
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_ddiv+0x190>
 8000ac2:	e1e4      	b.n	8000e8e <__aeabi_ddiv+0x55a>
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	469c      	mov	ip, r3
 8000ac8:	2300      	movs	r3, #0
 8000aca:	2400      	movs	r4, #0
 8000acc:	2200      	movs	r2, #0
 8000ace:	4698      	mov	r8, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	0312      	lsls	r2, r2, #12
 8000ad4:	0b13      	lsrs	r3, r2, #12
 8000ad6:	0d0a      	lsrs	r2, r1, #20
 8000ad8:	0512      	lsls	r2, r2, #20
 8000ada:	431a      	orrs	r2, r3
 8000adc:	0523      	lsls	r3, r4, #20
 8000ade:	4c12      	ldr	r4, [pc, #72]	; (8000b28 <__aeabi_ddiv+0x1f4>)
 8000ae0:	4640      	mov	r0, r8
 8000ae2:	4022      	ands	r2, r4
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	4662      	mov	r2, ip
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	07d2      	lsls	r2, r2, #31
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	4313      	orrs	r3, r2
 8000af0:	0019      	movs	r1, r3
 8000af2:	b007      	add	sp, #28
 8000af4:	bc3c      	pop	{r2, r3, r4, r5}
 8000af6:	4690      	mov	r8, r2
 8000af8:	4699      	mov	r9, r3
 8000afa:	46a2      	mov	sl, r4
 8000afc:	46ab      	mov	fp, r5
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	2300      	movs	r3, #0
 8000b02:	2280      	movs	r2, #128	; 0x80
 8000b04:	469c      	mov	ip, r3
 8000b06:	0312      	lsls	r2, r2, #12
 8000b08:	4698      	mov	r8, r3
 8000b0a:	4c03      	ldr	r4, [pc, #12]	; (8000b18 <__aeabi_ddiv+0x1e4>)
 8000b0c:	e7e0      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	4c01      	ldr	r4, [pc, #4]	; (8000b18 <__aeabi_ddiv+0x1e4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	4698      	mov	r8, r3
 8000b16:	e7db      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	fffffc01 	.word	0xfffffc01
 8000b20:	08005444 	.word	0x08005444
 8000b24:	fffffc0d 	.word	0xfffffc0d
 8000b28:	800fffff 	.word	0x800fffff
 8000b2c:	45d9      	cmp	r9, fp
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_ddiv+0x1fe>
 8000b30:	e139      	b.n	8000da6 <__aeabi_ddiv+0x472>
 8000b32:	d100      	bne.n	8000b36 <__aeabi_ddiv+0x202>
 8000b34:	e134      	b.n	8000da0 <__aeabi_ddiv+0x46c>
 8000b36:	2300      	movs	r3, #0
 8000b38:	4646      	mov	r6, r8
 8000b3a:	464d      	mov	r5, r9
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	3c01      	subs	r4, #1
 8000b40:	465b      	mov	r3, fp
 8000b42:	0e0a      	lsrs	r2, r1, #24
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	431a      	orrs	r2, r3
 8000b48:	020b      	lsls	r3, r1, #8
 8000b4a:	0c17      	lsrs	r7, r2, #16
 8000b4c:	9303      	str	r3, [sp, #12]
 8000b4e:	0413      	lsls	r3, r2, #16
 8000b50:	0c1b      	lsrs	r3, r3, #16
 8000b52:	0039      	movs	r1, r7
 8000b54:	0028      	movs	r0, r5
 8000b56:	4690      	mov	r8, r2
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	f7ff fad5 	bl	8000108 <__udivsi3>
 8000b5e:	0002      	movs	r2, r0
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	4683      	mov	fp, r0
 8000b64:	435a      	muls	r2, r3
 8000b66:	0028      	movs	r0, r5
 8000b68:	0039      	movs	r1, r7
 8000b6a:	4691      	mov	r9, r2
 8000b6c:	f7ff fb52 	bl	8000214 <__aeabi_uidivmod>
 8000b70:	0c35      	lsrs	r5, r6, #16
 8000b72:	0409      	lsls	r1, r1, #16
 8000b74:	430d      	orrs	r5, r1
 8000b76:	45a9      	cmp	r9, r5
 8000b78:	d90d      	bls.n	8000b96 <__aeabi_ddiv+0x262>
 8000b7a:	465b      	mov	r3, fp
 8000b7c:	4445      	add	r5, r8
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	45a8      	cmp	r8, r5
 8000b82:	d900      	bls.n	8000b86 <__aeabi_ddiv+0x252>
 8000b84:	e13a      	b.n	8000dfc <__aeabi_ddiv+0x4c8>
 8000b86:	45a9      	cmp	r9, r5
 8000b88:	d800      	bhi.n	8000b8c <__aeabi_ddiv+0x258>
 8000b8a:	e137      	b.n	8000dfc <__aeabi_ddiv+0x4c8>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	425b      	negs	r3, r3
 8000b90:	469c      	mov	ip, r3
 8000b92:	4445      	add	r5, r8
 8000b94:	44e3      	add	fp, ip
 8000b96:	464b      	mov	r3, r9
 8000b98:	1aeb      	subs	r3, r5, r3
 8000b9a:	0039      	movs	r1, r7
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	9304      	str	r3, [sp, #16]
 8000ba0:	f7ff fab2 	bl	8000108 <__udivsi3>
 8000ba4:	9b01      	ldr	r3, [sp, #4]
 8000ba6:	0005      	movs	r5, r0
 8000ba8:	4343      	muls	r3, r0
 8000baa:	0039      	movs	r1, r7
 8000bac:	9804      	ldr	r0, [sp, #16]
 8000bae:	4699      	mov	r9, r3
 8000bb0:	f7ff fb30 	bl	8000214 <__aeabi_uidivmod>
 8000bb4:	0433      	lsls	r3, r6, #16
 8000bb6:	0409      	lsls	r1, r1, #16
 8000bb8:	0c1b      	lsrs	r3, r3, #16
 8000bba:	430b      	orrs	r3, r1
 8000bbc:	4599      	cmp	r9, r3
 8000bbe:	d909      	bls.n	8000bd4 <__aeabi_ddiv+0x2a0>
 8000bc0:	4443      	add	r3, r8
 8000bc2:	1e6a      	subs	r2, r5, #1
 8000bc4:	4598      	cmp	r8, r3
 8000bc6:	d900      	bls.n	8000bca <__aeabi_ddiv+0x296>
 8000bc8:	e11a      	b.n	8000e00 <__aeabi_ddiv+0x4cc>
 8000bca:	4599      	cmp	r9, r3
 8000bcc:	d800      	bhi.n	8000bd0 <__aeabi_ddiv+0x29c>
 8000bce:	e117      	b.n	8000e00 <__aeabi_ddiv+0x4cc>
 8000bd0:	3d02      	subs	r5, #2
 8000bd2:	4443      	add	r3, r8
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	465a      	mov	r2, fp
 8000bda:	0412      	lsls	r2, r2, #16
 8000bdc:	432a      	orrs	r2, r5
 8000bde:	9903      	ldr	r1, [sp, #12]
 8000be0:	4693      	mov	fp, r2
 8000be2:	0c10      	lsrs	r0, r2, #16
 8000be4:	0c0a      	lsrs	r2, r1, #16
 8000be6:	4691      	mov	r9, r2
 8000be8:	0409      	lsls	r1, r1, #16
 8000bea:	465a      	mov	r2, fp
 8000bec:	0c09      	lsrs	r1, r1, #16
 8000bee:	464e      	mov	r6, r9
 8000bf0:	000d      	movs	r5, r1
 8000bf2:	0412      	lsls	r2, r2, #16
 8000bf4:	0c12      	lsrs	r2, r2, #16
 8000bf6:	4345      	muls	r5, r0
 8000bf8:	9105      	str	r1, [sp, #20]
 8000bfa:	4351      	muls	r1, r2
 8000bfc:	4372      	muls	r2, r6
 8000bfe:	4370      	muls	r0, r6
 8000c00:	1952      	adds	r2, r2, r5
 8000c02:	0c0e      	lsrs	r6, r1, #16
 8000c04:	18b2      	adds	r2, r6, r2
 8000c06:	4295      	cmp	r5, r2
 8000c08:	d903      	bls.n	8000c12 <__aeabi_ddiv+0x2de>
 8000c0a:	2580      	movs	r5, #128	; 0x80
 8000c0c:	026d      	lsls	r5, r5, #9
 8000c0e:	46ac      	mov	ip, r5
 8000c10:	4460      	add	r0, ip
 8000c12:	0c15      	lsrs	r5, r2, #16
 8000c14:	0409      	lsls	r1, r1, #16
 8000c16:	0412      	lsls	r2, r2, #16
 8000c18:	0c09      	lsrs	r1, r1, #16
 8000c1a:	1828      	adds	r0, r5, r0
 8000c1c:	1852      	adds	r2, r2, r1
 8000c1e:	4283      	cmp	r3, r0
 8000c20:	d200      	bcs.n	8000c24 <__aeabi_ddiv+0x2f0>
 8000c22:	e0ce      	b.n	8000dc2 <__aeabi_ddiv+0x48e>
 8000c24:	d100      	bne.n	8000c28 <__aeabi_ddiv+0x2f4>
 8000c26:	e0c8      	b.n	8000dba <__aeabi_ddiv+0x486>
 8000c28:	1a1d      	subs	r5, r3, r0
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	1a9e      	subs	r6, r3, r2
 8000c2e:	45b2      	cmp	sl, r6
 8000c30:	4192      	sbcs	r2, r2
 8000c32:	4252      	negs	r2, r2
 8000c34:	1aab      	subs	r3, r5, r2
 8000c36:	469a      	mov	sl, r3
 8000c38:	4598      	cmp	r8, r3
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_ddiv+0x30a>
 8000c3c:	e117      	b.n	8000e6e <__aeabi_ddiv+0x53a>
 8000c3e:	0039      	movs	r1, r7
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff fa61 	bl	8000108 <__udivsi3>
 8000c46:	9b01      	ldr	r3, [sp, #4]
 8000c48:	0005      	movs	r5, r0
 8000c4a:	4343      	muls	r3, r0
 8000c4c:	0039      	movs	r1, r7
 8000c4e:	4650      	mov	r0, sl
 8000c50:	9304      	str	r3, [sp, #16]
 8000c52:	f7ff fadf 	bl	8000214 <__aeabi_uidivmod>
 8000c56:	9804      	ldr	r0, [sp, #16]
 8000c58:	040b      	lsls	r3, r1, #16
 8000c5a:	0c31      	lsrs	r1, r6, #16
 8000c5c:	4319      	orrs	r1, r3
 8000c5e:	4288      	cmp	r0, r1
 8000c60:	d909      	bls.n	8000c76 <__aeabi_ddiv+0x342>
 8000c62:	4441      	add	r1, r8
 8000c64:	1e6b      	subs	r3, r5, #1
 8000c66:	4588      	cmp	r8, r1
 8000c68:	d900      	bls.n	8000c6c <__aeabi_ddiv+0x338>
 8000c6a:	e107      	b.n	8000e7c <__aeabi_ddiv+0x548>
 8000c6c:	4288      	cmp	r0, r1
 8000c6e:	d800      	bhi.n	8000c72 <__aeabi_ddiv+0x33e>
 8000c70:	e104      	b.n	8000e7c <__aeabi_ddiv+0x548>
 8000c72:	3d02      	subs	r5, #2
 8000c74:	4441      	add	r1, r8
 8000c76:	9b04      	ldr	r3, [sp, #16]
 8000c78:	1acb      	subs	r3, r1, r3
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	0039      	movs	r1, r7
 8000c7e:	9304      	str	r3, [sp, #16]
 8000c80:	f7ff fa42 	bl	8000108 <__udivsi3>
 8000c84:	9b01      	ldr	r3, [sp, #4]
 8000c86:	4682      	mov	sl, r0
 8000c88:	4343      	muls	r3, r0
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	9804      	ldr	r0, [sp, #16]
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	f7ff fac0 	bl	8000214 <__aeabi_uidivmod>
 8000c94:	9801      	ldr	r0, [sp, #4]
 8000c96:	040b      	lsls	r3, r1, #16
 8000c98:	0431      	lsls	r1, r6, #16
 8000c9a:	0c09      	lsrs	r1, r1, #16
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	4288      	cmp	r0, r1
 8000ca0:	d90d      	bls.n	8000cbe <__aeabi_ddiv+0x38a>
 8000ca2:	4653      	mov	r3, sl
 8000ca4:	4441      	add	r1, r8
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	4588      	cmp	r8, r1
 8000caa:	d900      	bls.n	8000cae <__aeabi_ddiv+0x37a>
 8000cac:	e0e8      	b.n	8000e80 <__aeabi_ddiv+0x54c>
 8000cae:	4288      	cmp	r0, r1
 8000cb0:	d800      	bhi.n	8000cb4 <__aeabi_ddiv+0x380>
 8000cb2:	e0e5      	b.n	8000e80 <__aeabi_ddiv+0x54c>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	425b      	negs	r3, r3
 8000cb8:	469c      	mov	ip, r3
 8000cba:	4441      	add	r1, r8
 8000cbc:	44e2      	add	sl, ip
 8000cbe:	9b01      	ldr	r3, [sp, #4]
 8000cc0:	042d      	lsls	r5, r5, #16
 8000cc2:	1ace      	subs	r6, r1, r3
 8000cc4:	4651      	mov	r1, sl
 8000cc6:	4329      	orrs	r1, r5
 8000cc8:	9d05      	ldr	r5, [sp, #20]
 8000cca:	464f      	mov	r7, r9
 8000ccc:	002a      	movs	r2, r5
 8000cce:	040b      	lsls	r3, r1, #16
 8000cd0:	0c08      	lsrs	r0, r1, #16
 8000cd2:	0c1b      	lsrs	r3, r3, #16
 8000cd4:	435a      	muls	r2, r3
 8000cd6:	4345      	muls	r5, r0
 8000cd8:	437b      	muls	r3, r7
 8000cda:	4378      	muls	r0, r7
 8000cdc:	195b      	adds	r3, r3, r5
 8000cde:	0c17      	lsrs	r7, r2, #16
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	429d      	cmp	r5, r3
 8000ce4:	d903      	bls.n	8000cee <__aeabi_ddiv+0x3ba>
 8000ce6:	2580      	movs	r5, #128	; 0x80
 8000ce8:	026d      	lsls	r5, r5, #9
 8000cea:	46ac      	mov	ip, r5
 8000cec:	4460      	add	r0, ip
 8000cee:	0c1d      	lsrs	r5, r3, #16
 8000cf0:	0412      	lsls	r2, r2, #16
 8000cf2:	041b      	lsls	r3, r3, #16
 8000cf4:	0c12      	lsrs	r2, r2, #16
 8000cf6:	1828      	adds	r0, r5, r0
 8000cf8:	189b      	adds	r3, r3, r2
 8000cfa:	4286      	cmp	r6, r0
 8000cfc:	d200      	bcs.n	8000d00 <__aeabi_ddiv+0x3cc>
 8000cfe:	e093      	b.n	8000e28 <__aeabi_ddiv+0x4f4>
 8000d00:	d100      	bne.n	8000d04 <__aeabi_ddiv+0x3d0>
 8000d02:	e08e      	b.n	8000e22 <__aeabi_ddiv+0x4ee>
 8000d04:	2301      	movs	r3, #1
 8000d06:	4319      	orrs	r1, r3
 8000d08:	4ba0      	ldr	r3, [pc, #640]	; (8000f8c <__aeabi_ddiv+0x658>)
 8000d0a:	18e3      	adds	r3, r4, r3
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dc00      	bgt.n	8000d12 <__aeabi_ddiv+0x3de>
 8000d10:	e099      	b.n	8000e46 <__aeabi_ddiv+0x512>
 8000d12:	074a      	lsls	r2, r1, #29
 8000d14:	d000      	beq.n	8000d18 <__aeabi_ddiv+0x3e4>
 8000d16:	e09e      	b.n	8000e56 <__aeabi_ddiv+0x522>
 8000d18:	465a      	mov	r2, fp
 8000d1a:	01d2      	lsls	r2, r2, #7
 8000d1c:	d506      	bpl.n	8000d2c <__aeabi_ddiv+0x3f8>
 8000d1e:	465a      	mov	r2, fp
 8000d20:	4b9b      	ldr	r3, [pc, #620]	; (8000f90 <__aeabi_ddiv+0x65c>)
 8000d22:	401a      	ands	r2, r3
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4693      	mov	fp, r2
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	18e3      	adds	r3, r4, r3
 8000d2c:	4a99      	ldr	r2, [pc, #612]	; (8000f94 <__aeabi_ddiv+0x660>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	dd68      	ble.n	8000e04 <__aeabi_ddiv+0x4d0>
 8000d32:	2301      	movs	r3, #1
 8000d34:	9a02      	ldr	r2, [sp, #8]
 8000d36:	4c98      	ldr	r4, [pc, #608]	; (8000f98 <__aeabi_ddiv+0x664>)
 8000d38:	401a      	ands	r2, r3
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	4698      	mov	r8, r3
 8000d40:	2200      	movs	r2, #0
 8000d42:	e6c5      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	464b      	mov	r3, r9
 8000d48:	0312      	lsls	r2, r2, #12
 8000d4a:	4213      	tst	r3, r2
 8000d4c:	d00a      	beq.n	8000d64 <__aeabi_ddiv+0x430>
 8000d4e:	465b      	mov	r3, fp
 8000d50:	4213      	tst	r3, r2
 8000d52:	d106      	bne.n	8000d62 <__aeabi_ddiv+0x42e>
 8000d54:	431a      	orrs	r2, r3
 8000d56:	0312      	lsls	r2, r2, #12
 8000d58:	0b12      	lsrs	r2, r2, #12
 8000d5a:	46ac      	mov	ip, r5
 8000d5c:	4688      	mov	r8, r1
 8000d5e:	4c8e      	ldr	r4, [pc, #568]	; (8000f98 <__aeabi_ddiv+0x664>)
 8000d60:	e6b6      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000d62:	464b      	mov	r3, r9
 8000d64:	431a      	orrs	r2, r3
 8000d66:	0312      	lsls	r2, r2, #12
 8000d68:	0b12      	lsrs	r2, r2, #12
 8000d6a:	46bc      	mov	ip, r7
 8000d6c:	4c8a      	ldr	r4, [pc, #552]	; (8000f98 <__aeabi_ddiv+0x664>)
 8000d6e:	e6af      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000d70:	0003      	movs	r3, r0
 8000d72:	465a      	mov	r2, fp
 8000d74:	3b28      	subs	r3, #40	; 0x28
 8000d76:	409a      	lsls	r2, r3
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	4698      	mov	r8, r3
 8000d7e:	e657      	b.n	8000a30 <__aeabi_ddiv+0xfc>
 8000d80:	4658      	mov	r0, fp
 8000d82:	f7ff fa8b 	bl	800029c <__clzsi2>
 8000d86:	3020      	adds	r0, #32
 8000d88:	e640      	b.n	8000a0c <__aeabi_ddiv+0xd8>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	4652      	mov	r2, sl
 8000d8e:	3b28      	subs	r3, #40	; 0x28
 8000d90:	409a      	lsls	r2, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	4693      	mov	fp, r2
 8000d96:	e677      	b.n	8000a88 <__aeabi_ddiv+0x154>
 8000d98:	f7ff fa80 	bl	800029c <__clzsi2>
 8000d9c:	3020      	adds	r0, #32
 8000d9e:	e65f      	b.n	8000a60 <__aeabi_ddiv+0x12c>
 8000da0:	4588      	cmp	r8, r1
 8000da2:	d200      	bcs.n	8000da6 <__aeabi_ddiv+0x472>
 8000da4:	e6c7      	b.n	8000b36 <__aeabi_ddiv+0x202>
 8000da6:	464b      	mov	r3, r9
 8000da8:	07de      	lsls	r6, r3, #31
 8000daa:	085d      	lsrs	r5, r3, #1
 8000dac:	4643      	mov	r3, r8
 8000dae:	085b      	lsrs	r3, r3, #1
 8000db0:	431e      	orrs	r6, r3
 8000db2:	4643      	mov	r3, r8
 8000db4:	07db      	lsls	r3, r3, #31
 8000db6:	469a      	mov	sl, r3
 8000db8:	e6c2      	b.n	8000b40 <__aeabi_ddiv+0x20c>
 8000dba:	2500      	movs	r5, #0
 8000dbc:	4592      	cmp	sl, r2
 8000dbe:	d300      	bcc.n	8000dc2 <__aeabi_ddiv+0x48e>
 8000dc0:	e733      	b.n	8000c2a <__aeabi_ddiv+0x2f6>
 8000dc2:	9e03      	ldr	r6, [sp, #12]
 8000dc4:	4659      	mov	r1, fp
 8000dc6:	46b4      	mov	ip, r6
 8000dc8:	44e2      	add	sl, ip
 8000dca:	45b2      	cmp	sl, r6
 8000dcc:	41ad      	sbcs	r5, r5
 8000dce:	426d      	negs	r5, r5
 8000dd0:	4445      	add	r5, r8
 8000dd2:	18eb      	adds	r3, r5, r3
 8000dd4:	3901      	subs	r1, #1
 8000dd6:	4598      	cmp	r8, r3
 8000dd8:	d207      	bcs.n	8000dea <__aeabi_ddiv+0x4b6>
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d900      	bls.n	8000de0 <__aeabi_ddiv+0x4ac>
 8000dde:	e07f      	b.n	8000ee0 <__aeabi_ddiv+0x5ac>
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x4b0>
 8000de2:	e0bc      	b.n	8000f5e <__aeabi_ddiv+0x62a>
 8000de4:	1a1d      	subs	r5, r3, r0
 8000de6:	468b      	mov	fp, r1
 8000de8:	e71f      	b.n	8000c2a <__aeabi_ddiv+0x2f6>
 8000dea:	4598      	cmp	r8, r3
 8000dec:	d1fa      	bne.n	8000de4 <__aeabi_ddiv+0x4b0>
 8000dee:	9d03      	ldr	r5, [sp, #12]
 8000df0:	4555      	cmp	r5, sl
 8000df2:	d9f2      	bls.n	8000dda <__aeabi_ddiv+0x4a6>
 8000df4:	4643      	mov	r3, r8
 8000df6:	468b      	mov	fp, r1
 8000df8:	1a1d      	subs	r5, r3, r0
 8000dfa:	e716      	b.n	8000c2a <__aeabi_ddiv+0x2f6>
 8000dfc:	469b      	mov	fp, r3
 8000dfe:	e6ca      	b.n	8000b96 <__aeabi_ddiv+0x262>
 8000e00:	0015      	movs	r5, r2
 8000e02:	e6e7      	b.n	8000bd4 <__aeabi_ddiv+0x2a0>
 8000e04:	465a      	mov	r2, fp
 8000e06:	08c9      	lsrs	r1, r1, #3
 8000e08:	0752      	lsls	r2, r2, #29
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	055b      	lsls	r3, r3, #21
 8000e0e:	4690      	mov	r8, r2
 8000e10:	0d5c      	lsrs	r4, r3, #21
 8000e12:	465a      	mov	r2, fp
 8000e14:	2301      	movs	r3, #1
 8000e16:	9902      	ldr	r1, [sp, #8]
 8000e18:	0252      	lsls	r2, r2, #9
 8000e1a:	4019      	ands	r1, r3
 8000e1c:	0b12      	lsrs	r2, r2, #12
 8000e1e:	468c      	mov	ip, r1
 8000e20:	e656      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x4f4>
 8000e26:	e76f      	b.n	8000d08 <__aeabi_ddiv+0x3d4>
 8000e28:	4446      	add	r6, r8
 8000e2a:	1e4a      	subs	r2, r1, #1
 8000e2c:	45b0      	cmp	r8, r6
 8000e2e:	d929      	bls.n	8000e84 <__aeabi_ddiv+0x550>
 8000e30:	0011      	movs	r1, r2
 8000e32:	4286      	cmp	r6, r0
 8000e34:	d000      	beq.n	8000e38 <__aeabi_ddiv+0x504>
 8000e36:	e765      	b.n	8000d04 <__aeabi_ddiv+0x3d0>
 8000e38:	9a03      	ldr	r2, [sp, #12]
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_ddiv+0x50c>
 8000e3e:	e761      	b.n	8000d04 <__aeabi_ddiv+0x3d0>
 8000e40:	e762      	b.n	8000d08 <__aeabi_ddiv+0x3d4>
 8000e42:	2101      	movs	r1, #1
 8000e44:	4249      	negs	r1, r1
 8000e46:	2001      	movs	r0, #1
 8000e48:	1ac2      	subs	r2, r0, r3
 8000e4a:	2a38      	cmp	r2, #56	; 0x38
 8000e4c:	dd21      	ble.n	8000e92 <__aeabi_ddiv+0x55e>
 8000e4e:	9b02      	ldr	r3, [sp, #8]
 8000e50:	4003      	ands	r3, r0
 8000e52:	469c      	mov	ip, r3
 8000e54:	e638      	b.n	8000ac8 <__aeabi_ddiv+0x194>
 8000e56:	220f      	movs	r2, #15
 8000e58:	400a      	ands	r2, r1
 8000e5a:	2a04      	cmp	r2, #4
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_ddiv+0x52c>
 8000e5e:	e75b      	b.n	8000d18 <__aeabi_ddiv+0x3e4>
 8000e60:	000a      	movs	r2, r1
 8000e62:	1d11      	adds	r1, r2, #4
 8000e64:	4291      	cmp	r1, r2
 8000e66:	4192      	sbcs	r2, r2
 8000e68:	4252      	negs	r2, r2
 8000e6a:	4493      	add	fp, r2
 8000e6c:	e754      	b.n	8000d18 <__aeabi_ddiv+0x3e4>
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <__aeabi_ddiv+0x658>)
 8000e70:	18e3      	adds	r3, r4, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	dde5      	ble.n	8000e42 <__aeabi_ddiv+0x50e>
 8000e76:	2201      	movs	r2, #1
 8000e78:	4252      	negs	r2, r2
 8000e7a:	e7f2      	b.n	8000e62 <__aeabi_ddiv+0x52e>
 8000e7c:	001d      	movs	r5, r3
 8000e7e:	e6fa      	b.n	8000c76 <__aeabi_ddiv+0x342>
 8000e80:	469a      	mov	sl, r3
 8000e82:	e71c      	b.n	8000cbe <__aeabi_ddiv+0x38a>
 8000e84:	42b0      	cmp	r0, r6
 8000e86:	d839      	bhi.n	8000efc <__aeabi_ddiv+0x5c8>
 8000e88:	d06e      	beq.n	8000f68 <__aeabi_ddiv+0x634>
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	e73a      	b.n	8000d04 <__aeabi_ddiv+0x3d0>
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	e73a      	b.n	8000d08 <__aeabi_ddiv+0x3d4>
 8000e92:	2a1f      	cmp	r2, #31
 8000e94:	dc3c      	bgt.n	8000f10 <__aeabi_ddiv+0x5dc>
 8000e96:	2320      	movs	r3, #32
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	000c      	movs	r4, r1
 8000e9c:	4658      	mov	r0, fp
 8000e9e:	4099      	lsls	r1, r3
 8000ea0:	4098      	lsls	r0, r3
 8000ea2:	1e4b      	subs	r3, r1, #1
 8000ea4:	4199      	sbcs	r1, r3
 8000ea6:	465b      	mov	r3, fp
 8000ea8:	40d4      	lsrs	r4, r2
 8000eaa:	40d3      	lsrs	r3, r2
 8000eac:	4320      	orrs	r0, r4
 8000eae:	4308      	orrs	r0, r1
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	0743      	lsls	r3, r0, #29
 8000eb4:	d009      	beq.n	8000eca <__aeabi_ddiv+0x596>
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	4003      	ands	r3, r0
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d005      	beq.n	8000eca <__aeabi_ddiv+0x596>
 8000ebe:	0001      	movs	r1, r0
 8000ec0:	1d08      	adds	r0, r1, #4
 8000ec2:	4288      	cmp	r0, r1
 8000ec4:	419b      	sbcs	r3, r3
 8000ec6:	425b      	negs	r3, r3
 8000ec8:	18d2      	adds	r2, r2, r3
 8000eca:	0213      	lsls	r3, r2, #8
 8000ecc:	d53a      	bpl.n	8000f44 <__aeabi_ddiv+0x610>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	9a02      	ldr	r2, [sp, #8]
 8000ed2:	2401      	movs	r4, #1
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	4694      	mov	ip, r2
 8000eda:	4698      	mov	r8, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	e5f7      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4249      	negs	r1, r1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	9d03      	ldr	r5, [sp, #12]
 8000ee8:	44e3      	add	fp, ip
 8000eea:	46ac      	mov	ip, r5
 8000eec:	44e2      	add	sl, ip
 8000eee:	45aa      	cmp	sl, r5
 8000ef0:	41ad      	sbcs	r5, r5
 8000ef2:	426d      	negs	r5, r5
 8000ef4:	4445      	add	r5, r8
 8000ef6:	18ed      	adds	r5, r5, r3
 8000ef8:	1a2d      	subs	r5, r5, r0
 8000efa:	e696      	b.n	8000c2a <__aeabi_ddiv+0x2f6>
 8000efc:	1e8a      	subs	r2, r1, #2
 8000efe:	9903      	ldr	r1, [sp, #12]
 8000f00:	004d      	lsls	r5, r1, #1
 8000f02:	428d      	cmp	r5, r1
 8000f04:	4189      	sbcs	r1, r1
 8000f06:	4249      	negs	r1, r1
 8000f08:	4441      	add	r1, r8
 8000f0a:	1876      	adds	r6, r6, r1
 8000f0c:	9503      	str	r5, [sp, #12]
 8000f0e:	e78f      	b.n	8000e30 <__aeabi_ddiv+0x4fc>
 8000f10:	201f      	movs	r0, #31
 8000f12:	4240      	negs	r0, r0
 8000f14:	1ac3      	subs	r3, r0, r3
 8000f16:	4658      	mov	r0, fp
 8000f18:	40d8      	lsrs	r0, r3
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	2a20      	cmp	r2, #32
 8000f1e:	d028      	beq.n	8000f72 <__aeabi_ddiv+0x63e>
 8000f20:	2040      	movs	r0, #64	; 0x40
 8000f22:	465d      	mov	r5, fp
 8000f24:	1a82      	subs	r2, r0, r2
 8000f26:	4095      	lsls	r5, r2
 8000f28:	4329      	orrs	r1, r5
 8000f2a:	1e4a      	subs	r2, r1, #1
 8000f2c:	4191      	sbcs	r1, r2
 8000f2e:	4319      	orrs	r1, r3
 8000f30:	2307      	movs	r3, #7
 8000f32:	2200      	movs	r2, #0
 8000f34:	400b      	ands	r3, r1
 8000f36:	d009      	beq.n	8000f4c <__aeabi_ddiv+0x618>
 8000f38:	230f      	movs	r3, #15
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	0008      	movs	r0, r1
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d1bd      	bne.n	8000ec0 <__aeabi_ddiv+0x58c>
 8000f44:	0001      	movs	r1, r0
 8000f46:	0753      	lsls	r3, r2, #29
 8000f48:	0252      	lsls	r2, r2, #9
 8000f4a:	0b12      	lsrs	r2, r2, #12
 8000f4c:	08c9      	lsrs	r1, r1, #3
 8000f4e:	4319      	orrs	r1, r3
 8000f50:	2301      	movs	r3, #1
 8000f52:	4688      	mov	r8, r1
 8000f54:	9902      	ldr	r1, [sp, #8]
 8000f56:	2400      	movs	r4, #0
 8000f58:	4019      	ands	r1, r3
 8000f5a:	468c      	mov	ip, r1
 8000f5c:	e5b8      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000f5e:	4552      	cmp	r2, sl
 8000f60:	d8be      	bhi.n	8000ee0 <__aeabi_ddiv+0x5ac>
 8000f62:	468b      	mov	fp, r1
 8000f64:	2500      	movs	r5, #0
 8000f66:	e660      	b.n	8000c2a <__aeabi_ddiv+0x2f6>
 8000f68:	9d03      	ldr	r5, [sp, #12]
 8000f6a:	429d      	cmp	r5, r3
 8000f6c:	d3c6      	bcc.n	8000efc <__aeabi_ddiv+0x5c8>
 8000f6e:	0011      	movs	r1, r2
 8000f70:	e762      	b.n	8000e38 <__aeabi_ddiv+0x504>
 8000f72:	2500      	movs	r5, #0
 8000f74:	e7d8      	b.n	8000f28 <__aeabi_ddiv+0x5f4>
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	465b      	mov	r3, fp
 8000f7a:	0312      	lsls	r2, r2, #12
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	9b01      	ldr	r3, [sp, #4]
 8000f80:	0312      	lsls	r2, r2, #12
 8000f82:	0b12      	lsrs	r2, r2, #12
 8000f84:	469c      	mov	ip, r3
 8000f86:	4688      	mov	r8, r1
 8000f88:	4c03      	ldr	r4, [pc, #12]	; (8000f98 <__aeabi_ddiv+0x664>)
 8000f8a:	e5a1      	b.n	8000ad0 <__aeabi_ddiv+0x19c>
 8000f8c:	000003ff 	.word	0x000003ff
 8000f90:	feffffff 	.word	0xfeffffff
 8000f94:	000007fe 	.word	0x000007fe
 8000f98:	000007ff 	.word	0x000007ff

08000f9c <__eqdf2>:
 8000f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9e:	464f      	mov	r7, r9
 8000fa0:	4646      	mov	r6, r8
 8000fa2:	46d6      	mov	lr, sl
 8000fa4:	005c      	lsls	r4, r3, #1
 8000fa6:	b5c0      	push	{r6, r7, lr}
 8000fa8:	031f      	lsls	r7, r3, #12
 8000faa:	0fdb      	lsrs	r3, r3, #31
 8000fac:	469a      	mov	sl, r3
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <__eqdf2+0x70>)
 8000fb0:	030e      	lsls	r6, r1, #12
 8000fb2:	004d      	lsls	r5, r1, #1
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4680      	mov	r8, r0
 8000fb8:	0b36      	lsrs	r6, r6, #12
 8000fba:	0d6d      	lsrs	r5, r5, #21
 8000fbc:	0fc9      	lsrs	r1, r1, #31
 8000fbe:	4691      	mov	r9, r2
 8000fc0:	0b3f      	lsrs	r7, r7, #12
 8000fc2:	0d64      	lsrs	r4, r4, #21
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	429d      	cmp	r5, r3
 8000fc8:	d008      	beq.n	8000fdc <__eqdf2+0x40>
 8000fca:	429c      	cmp	r4, r3
 8000fcc:	d001      	beq.n	8000fd2 <__eqdf2+0x36>
 8000fce:	42a5      	cmp	r5, r4
 8000fd0:	d00b      	beq.n	8000fea <__eqdf2+0x4e>
 8000fd2:	bc1c      	pop	{r2, r3, r4}
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	4699      	mov	r9, r3
 8000fd8:	46a2      	mov	sl, r4
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fdc:	4663      	mov	r3, ip
 8000fde:	4333      	orrs	r3, r6
 8000fe0:	d1f7      	bne.n	8000fd2 <__eqdf2+0x36>
 8000fe2:	42ac      	cmp	r4, r5
 8000fe4:	d1f5      	bne.n	8000fd2 <__eqdf2+0x36>
 8000fe6:	433a      	orrs	r2, r7
 8000fe8:	d1f3      	bne.n	8000fd2 <__eqdf2+0x36>
 8000fea:	2001      	movs	r0, #1
 8000fec:	42be      	cmp	r6, r7
 8000fee:	d1f0      	bne.n	8000fd2 <__eqdf2+0x36>
 8000ff0:	45c8      	cmp	r8, r9
 8000ff2:	d1ee      	bne.n	8000fd2 <__eqdf2+0x36>
 8000ff4:	4551      	cmp	r1, sl
 8000ff6:	d007      	beq.n	8001008 <__eqdf2+0x6c>
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	d1ea      	bne.n	8000fd2 <__eqdf2+0x36>
 8000ffc:	4663      	mov	r3, ip
 8000ffe:	431e      	orrs	r6, r3
 8001000:	0030      	movs	r0, r6
 8001002:	1e46      	subs	r6, r0, #1
 8001004:	41b0      	sbcs	r0, r6
 8001006:	e7e4      	b.n	8000fd2 <__eqdf2+0x36>
 8001008:	2000      	movs	r0, #0
 800100a:	e7e2      	b.n	8000fd2 <__eqdf2+0x36>
 800100c:	000007ff 	.word	0x000007ff

08001010 <__gedf2>:
 8001010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001012:	4645      	mov	r5, r8
 8001014:	46de      	mov	lr, fp
 8001016:	4657      	mov	r7, sl
 8001018:	464e      	mov	r6, r9
 800101a:	b5e0      	push	{r5, r6, r7, lr}
 800101c:	031f      	lsls	r7, r3, #12
 800101e:	0b3d      	lsrs	r5, r7, #12
 8001020:	4f2c      	ldr	r7, [pc, #176]	; (80010d4 <__gedf2+0xc4>)
 8001022:	030e      	lsls	r6, r1, #12
 8001024:	004c      	lsls	r4, r1, #1
 8001026:	46ab      	mov	fp, r5
 8001028:	005d      	lsls	r5, r3, #1
 800102a:	4684      	mov	ip, r0
 800102c:	0b36      	lsrs	r6, r6, #12
 800102e:	0d64      	lsrs	r4, r4, #21
 8001030:	0fc9      	lsrs	r1, r1, #31
 8001032:	4690      	mov	r8, r2
 8001034:	0d6d      	lsrs	r5, r5, #21
 8001036:	0fdb      	lsrs	r3, r3, #31
 8001038:	42bc      	cmp	r4, r7
 800103a:	d02a      	beq.n	8001092 <__gedf2+0x82>
 800103c:	4f25      	ldr	r7, [pc, #148]	; (80010d4 <__gedf2+0xc4>)
 800103e:	42bd      	cmp	r5, r7
 8001040:	d02d      	beq.n	800109e <__gedf2+0x8e>
 8001042:	2c00      	cmp	r4, #0
 8001044:	d10f      	bne.n	8001066 <__gedf2+0x56>
 8001046:	4330      	orrs	r0, r6
 8001048:	0007      	movs	r7, r0
 800104a:	4681      	mov	r9, r0
 800104c:	4278      	negs	r0, r7
 800104e:	4178      	adcs	r0, r7
 8001050:	b2c0      	uxtb	r0, r0
 8001052:	2d00      	cmp	r5, #0
 8001054:	d117      	bne.n	8001086 <__gedf2+0x76>
 8001056:	465f      	mov	r7, fp
 8001058:	433a      	orrs	r2, r7
 800105a:	d114      	bne.n	8001086 <__gedf2+0x76>
 800105c:	464b      	mov	r3, r9
 800105e:	2000      	movs	r0, #0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <__gedf2+0x6a>
 8001064:	e006      	b.n	8001074 <__gedf2+0x64>
 8001066:	2d00      	cmp	r5, #0
 8001068:	d102      	bne.n	8001070 <__gedf2+0x60>
 800106a:	4658      	mov	r0, fp
 800106c:	4302      	orrs	r2, r0
 800106e:	d001      	beq.n	8001074 <__gedf2+0x64>
 8001070:	4299      	cmp	r1, r3
 8001072:	d018      	beq.n	80010a6 <__gedf2+0x96>
 8001074:	4248      	negs	r0, r1
 8001076:	2101      	movs	r1, #1
 8001078:	4308      	orrs	r0, r1
 800107a:	bc3c      	pop	{r2, r3, r4, r5}
 800107c:	4690      	mov	r8, r2
 800107e:	4699      	mov	r9, r3
 8001080:	46a2      	mov	sl, r4
 8001082:	46ab      	mov	fp, r5
 8001084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001086:	2800      	cmp	r0, #0
 8001088:	d0f2      	beq.n	8001070 <__gedf2+0x60>
 800108a:	2001      	movs	r0, #1
 800108c:	3b01      	subs	r3, #1
 800108e:	4318      	orrs	r0, r3
 8001090:	e7f3      	b.n	800107a <__gedf2+0x6a>
 8001092:	0037      	movs	r7, r6
 8001094:	4307      	orrs	r7, r0
 8001096:	d0d1      	beq.n	800103c <__gedf2+0x2c>
 8001098:	2002      	movs	r0, #2
 800109a:	4240      	negs	r0, r0
 800109c:	e7ed      	b.n	800107a <__gedf2+0x6a>
 800109e:	465f      	mov	r7, fp
 80010a0:	4317      	orrs	r7, r2
 80010a2:	d0ce      	beq.n	8001042 <__gedf2+0x32>
 80010a4:	e7f8      	b.n	8001098 <__gedf2+0x88>
 80010a6:	42ac      	cmp	r4, r5
 80010a8:	dce4      	bgt.n	8001074 <__gedf2+0x64>
 80010aa:	da03      	bge.n	80010b4 <__gedf2+0xa4>
 80010ac:	1e48      	subs	r0, r1, #1
 80010ae:	2101      	movs	r1, #1
 80010b0:	4308      	orrs	r0, r1
 80010b2:	e7e2      	b.n	800107a <__gedf2+0x6a>
 80010b4:	455e      	cmp	r6, fp
 80010b6:	d8dd      	bhi.n	8001074 <__gedf2+0x64>
 80010b8:	d006      	beq.n	80010c8 <__gedf2+0xb8>
 80010ba:	2000      	movs	r0, #0
 80010bc:	455e      	cmp	r6, fp
 80010be:	d2dc      	bcs.n	800107a <__gedf2+0x6a>
 80010c0:	2301      	movs	r3, #1
 80010c2:	1e48      	subs	r0, r1, #1
 80010c4:	4318      	orrs	r0, r3
 80010c6:	e7d8      	b.n	800107a <__gedf2+0x6a>
 80010c8:	45c4      	cmp	ip, r8
 80010ca:	d8d3      	bhi.n	8001074 <__gedf2+0x64>
 80010cc:	2000      	movs	r0, #0
 80010ce:	45c4      	cmp	ip, r8
 80010d0:	d3f6      	bcc.n	80010c0 <__gedf2+0xb0>
 80010d2:	e7d2      	b.n	800107a <__gedf2+0x6a>
 80010d4:	000007ff 	.word	0x000007ff

080010d8 <__ledf2>:
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	464e      	mov	r6, r9
 80010dc:	4645      	mov	r5, r8
 80010de:	46de      	mov	lr, fp
 80010e0:	4657      	mov	r7, sl
 80010e2:	005c      	lsls	r4, r3, #1
 80010e4:	b5e0      	push	{r5, r6, r7, lr}
 80010e6:	031f      	lsls	r7, r3, #12
 80010e8:	0fdb      	lsrs	r3, r3, #31
 80010ea:	4699      	mov	r9, r3
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <__ledf2+0xc0>)
 80010ee:	030e      	lsls	r6, r1, #12
 80010f0:	004d      	lsls	r5, r1, #1
 80010f2:	0fc9      	lsrs	r1, r1, #31
 80010f4:	4684      	mov	ip, r0
 80010f6:	0b36      	lsrs	r6, r6, #12
 80010f8:	0d6d      	lsrs	r5, r5, #21
 80010fa:	468b      	mov	fp, r1
 80010fc:	4690      	mov	r8, r2
 80010fe:	0b3f      	lsrs	r7, r7, #12
 8001100:	0d64      	lsrs	r4, r4, #21
 8001102:	429d      	cmp	r5, r3
 8001104:	d020      	beq.n	8001148 <__ledf2+0x70>
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <__ledf2+0xc0>)
 8001108:	429c      	cmp	r4, r3
 800110a:	d022      	beq.n	8001152 <__ledf2+0x7a>
 800110c:	2d00      	cmp	r5, #0
 800110e:	d112      	bne.n	8001136 <__ledf2+0x5e>
 8001110:	4330      	orrs	r0, r6
 8001112:	4243      	negs	r3, r0
 8001114:	4143      	adcs	r3, r0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2c00      	cmp	r4, #0
 800111a:	d01f      	beq.n	800115c <__ledf2+0x84>
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00c      	beq.n	800113a <__ledf2+0x62>
 8001120:	464b      	mov	r3, r9
 8001122:	2001      	movs	r0, #1
 8001124:	3b01      	subs	r3, #1
 8001126:	4303      	orrs	r3, r0
 8001128:	0018      	movs	r0, r3
 800112a:	bc3c      	pop	{r2, r3, r4, r5}
 800112c:	4690      	mov	r8, r2
 800112e:	4699      	mov	r9, r3
 8001130:	46a2      	mov	sl, r4
 8001132:	46ab      	mov	fp, r5
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001136:	2c00      	cmp	r4, #0
 8001138:	d016      	beq.n	8001168 <__ledf2+0x90>
 800113a:	45cb      	cmp	fp, r9
 800113c:	d017      	beq.n	800116e <__ledf2+0x96>
 800113e:	465b      	mov	r3, fp
 8001140:	4259      	negs	r1, r3
 8001142:	2301      	movs	r3, #1
 8001144:	430b      	orrs	r3, r1
 8001146:	e7ef      	b.n	8001128 <__ledf2+0x50>
 8001148:	0031      	movs	r1, r6
 800114a:	2302      	movs	r3, #2
 800114c:	4301      	orrs	r1, r0
 800114e:	d1eb      	bne.n	8001128 <__ledf2+0x50>
 8001150:	e7d9      	b.n	8001106 <__ledf2+0x2e>
 8001152:	0039      	movs	r1, r7
 8001154:	2302      	movs	r3, #2
 8001156:	4311      	orrs	r1, r2
 8001158:	d1e6      	bne.n	8001128 <__ledf2+0x50>
 800115a:	e7d7      	b.n	800110c <__ledf2+0x34>
 800115c:	433a      	orrs	r2, r7
 800115e:	d1dd      	bne.n	800111c <__ledf2+0x44>
 8001160:	2300      	movs	r3, #0
 8001162:	2800      	cmp	r0, #0
 8001164:	d0e0      	beq.n	8001128 <__ledf2+0x50>
 8001166:	e7ea      	b.n	800113e <__ledf2+0x66>
 8001168:	433a      	orrs	r2, r7
 800116a:	d1e6      	bne.n	800113a <__ledf2+0x62>
 800116c:	e7e7      	b.n	800113e <__ledf2+0x66>
 800116e:	42a5      	cmp	r5, r4
 8001170:	dce5      	bgt.n	800113e <__ledf2+0x66>
 8001172:	db05      	blt.n	8001180 <__ledf2+0xa8>
 8001174:	42be      	cmp	r6, r7
 8001176:	d8e2      	bhi.n	800113e <__ledf2+0x66>
 8001178:	d007      	beq.n	800118a <__ledf2+0xb2>
 800117a:	2300      	movs	r3, #0
 800117c:	42be      	cmp	r6, r7
 800117e:	d2d3      	bcs.n	8001128 <__ledf2+0x50>
 8001180:	4659      	mov	r1, fp
 8001182:	2301      	movs	r3, #1
 8001184:	3901      	subs	r1, #1
 8001186:	430b      	orrs	r3, r1
 8001188:	e7ce      	b.n	8001128 <__ledf2+0x50>
 800118a:	45c4      	cmp	ip, r8
 800118c:	d8d7      	bhi.n	800113e <__ledf2+0x66>
 800118e:	2300      	movs	r3, #0
 8001190:	45c4      	cmp	ip, r8
 8001192:	d3f5      	bcc.n	8001180 <__ledf2+0xa8>
 8001194:	e7c8      	b.n	8001128 <__ledf2+0x50>
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	000007ff 	.word	0x000007ff

0800119c <__aeabi_dmul>:
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	4657      	mov	r7, sl
 80011a0:	4645      	mov	r5, r8
 80011a2:	46de      	mov	lr, fp
 80011a4:	464e      	mov	r6, r9
 80011a6:	b5e0      	push	{r5, r6, r7, lr}
 80011a8:	030c      	lsls	r4, r1, #12
 80011aa:	4698      	mov	r8, r3
 80011ac:	004e      	lsls	r6, r1, #1
 80011ae:	0b23      	lsrs	r3, r4, #12
 80011b0:	b087      	sub	sp, #28
 80011b2:	0007      	movs	r7, r0
 80011b4:	4692      	mov	sl, r2
 80011b6:	469b      	mov	fp, r3
 80011b8:	0d76      	lsrs	r6, r6, #21
 80011ba:	0fcd      	lsrs	r5, r1, #31
 80011bc:	2e00      	cmp	r6, #0
 80011be:	d06b      	beq.n	8001298 <__aeabi_dmul+0xfc>
 80011c0:	4b6d      	ldr	r3, [pc, #436]	; (8001378 <__aeabi_dmul+0x1dc>)
 80011c2:	429e      	cmp	r6, r3
 80011c4:	d035      	beq.n	8001232 <__aeabi_dmul+0x96>
 80011c6:	2480      	movs	r4, #128	; 0x80
 80011c8:	465b      	mov	r3, fp
 80011ca:	0f42      	lsrs	r2, r0, #29
 80011cc:	0424      	lsls	r4, r4, #16
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4314      	orrs	r4, r2
 80011d2:	431c      	orrs	r4, r3
 80011d4:	00c3      	lsls	r3, r0, #3
 80011d6:	4699      	mov	r9, r3
 80011d8:	4b68      	ldr	r3, [pc, #416]	; (800137c <__aeabi_dmul+0x1e0>)
 80011da:	46a3      	mov	fp, r4
 80011dc:	469c      	mov	ip, r3
 80011de:	2300      	movs	r3, #0
 80011e0:	2700      	movs	r7, #0
 80011e2:	4466      	add	r6, ip
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	4643      	mov	r3, r8
 80011e8:	031c      	lsls	r4, r3, #12
 80011ea:	005a      	lsls	r2, r3, #1
 80011ec:	0fdb      	lsrs	r3, r3, #31
 80011ee:	4650      	mov	r0, sl
 80011f0:	0b24      	lsrs	r4, r4, #12
 80011f2:	0d52      	lsrs	r2, r2, #21
 80011f4:	4698      	mov	r8, r3
 80011f6:	d100      	bne.n	80011fa <__aeabi_dmul+0x5e>
 80011f8:	e076      	b.n	80012e8 <__aeabi_dmul+0x14c>
 80011fa:	4b5f      	ldr	r3, [pc, #380]	; (8001378 <__aeabi_dmul+0x1dc>)
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d06d      	beq.n	80012dc <__aeabi_dmul+0x140>
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	0f41      	lsrs	r1, r0, #29
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	430b      	orrs	r3, r1
 8001208:	495c      	ldr	r1, [pc, #368]	; (800137c <__aeabi_dmul+0x1e0>)
 800120a:	00e4      	lsls	r4, r4, #3
 800120c:	468c      	mov	ip, r1
 800120e:	431c      	orrs	r4, r3
 8001210:	00c3      	lsls	r3, r0, #3
 8001212:	2000      	movs	r0, #0
 8001214:	4462      	add	r2, ip
 8001216:	4641      	mov	r1, r8
 8001218:	18b6      	adds	r6, r6, r2
 800121a:	4069      	eors	r1, r5
 800121c:	1c72      	adds	r2, r6, #1
 800121e:	9101      	str	r1, [sp, #4]
 8001220:	4694      	mov	ip, r2
 8001222:	4307      	orrs	r7, r0
 8001224:	2f0f      	cmp	r7, #15
 8001226:	d900      	bls.n	800122a <__aeabi_dmul+0x8e>
 8001228:	e0b0      	b.n	800138c <__aeabi_dmul+0x1f0>
 800122a:	4a55      	ldr	r2, [pc, #340]	; (8001380 <__aeabi_dmul+0x1e4>)
 800122c:	00bf      	lsls	r7, r7, #2
 800122e:	59d2      	ldr	r2, [r2, r7]
 8001230:	4697      	mov	pc, r2
 8001232:	465b      	mov	r3, fp
 8001234:	4303      	orrs	r3, r0
 8001236:	4699      	mov	r9, r3
 8001238:	d000      	beq.n	800123c <__aeabi_dmul+0xa0>
 800123a:	e087      	b.n	800134c <__aeabi_dmul+0x1b0>
 800123c:	2300      	movs	r3, #0
 800123e:	469b      	mov	fp, r3
 8001240:	3302      	adds	r3, #2
 8001242:	2708      	movs	r7, #8
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	e7ce      	b.n	80011e6 <__aeabi_dmul+0x4a>
 8001248:	4642      	mov	r2, r8
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	2802      	cmp	r0, #2
 800124e:	d067      	beq.n	8001320 <__aeabi_dmul+0x184>
 8001250:	2803      	cmp	r0, #3
 8001252:	d100      	bne.n	8001256 <__aeabi_dmul+0xba>
 8001254:	e20e      	b.n	8001674 <__aeabi_dmul+0x4d8>
 8001256:	2801      	cmp	r0, #1
 8001258:	d000      	beq.n	800125c <__aeabi_dmul+0xc0>
 800125a:	e162      	b.n	8001522 <__aeabi_dmul+0x386>
 800125c:	2300      	movs	r3, #0
 800125e:	2400      	movs	r4, #0
 8001260:	2200      	movs	r2, #0
 8001262:	4699      	mov	r9, r3
 8001264:	9901      	ldr	r1, [sp, #4]
 8001266:	4001      	ands	r1, r0
 8001268:	b2cd      	uxtb	r5, r1
 800126a:	2100      	movs	r1, #0
 800126c:	0312      	lsls	r2, r2, #12
 800126e:	0d0b      	lsrs	r3, r1, #20
 8001270:	0b12      	lsrs	r2, r2, #12
 8001272:	051b      	lsls	r3, r3, #20
 8001274:	4313      	orrs	r3, r2
 8001276:	4a43      	ldr	r2, [pc, #268]	; (8001384 <__aeabi_dmul+0x1e8>)
 8001278:	0524      	lsls	r4, r4, #20
 800127a:	4013      	ands	r3, r2
 800127c:	431c      	orrs	r4, r3
 800127e:	0064      	lsls	r4, r4, #1
 8001280:	07ed      	lsls	r5, r5, #31
 8001282:	0864      	lsrs	r4, r4, #1
 8001284:	432c      	orrs	r4, r5
 8001286:	4648      	mov	r0, r9
 8001288:	0021      	movs	r1, r4
 800128a:	b007      	add	sp, #28
 800128c:	bc3c      	pop	{r2, r3, r4, r5}
 800128e:	4690      	mov	r8, r2
 8001290:	4699      	mov	r9, r3
 8001292:	46a2      	mov	sl, r4
 8001294:	46ab      	mov	fp, r5
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001298:	4303      	orrs	r3, r0
 800129a:	4699      	mov	r9, r3
 800129c:	d04f      	beq.n	800133e <__aeabi_dmul+0x1a2>
 800129e:	465b      	mov	r3, fp
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dmul+0x10a>
 80012a4:	e189      	b.n	80015ba <__aeabi_dmul+0x41e>
 80012a6:	4658      	mov	r0, fp
 80012a8:	f7fe fff8 	bl	800029c <__clzsi2>
 80012ac:	0003      	movs	r3, r0
 80012ae:	3b0b      	subs	r3, #11
 80012b0:	2b1c      	cmp	r3, #28
 80012b2:	dd00      	ble.n	80012b6 <__aeabi_dmul+0x11a>
 80012b4:	e17a      	b.n	80015ac <__aeabi_dmul+0x410>
 80012b6:	221d      	movs	r2, #29
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	003a      	movs	r2, r7
 80012bc:	0001      	movs	r1, r0
 80012be:	465c      	mov	r4, fp
 80012c0:	40da      	lsrs	r2, r3
 80012c2:	3908      	subs	r1, #8
 80012c4:	408c      	lsls	r4, r1
 80012c6:	0013      	movs	r3, r2
 80012c8:	408f      	lsls	r7, r1
 80012ca:	4323      	orrs	r3, r4
 80012cc:	469b      	mov	fp, r3
 80012ce:	46b9      	mov	r9, r7
 80012d0:	2300      	movs	r3, #0
 80012d2:	4e2d      	ldr	r6, [pc, #180]	; (8001388 <__aeabi_dmul+0x1ec>)
 80012d4:	2700      	movs	r7, #0
 80012d6:	1a36      	subs	r6, r6, r0
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	e784      	b.n	80011e6 <__aeabi_dmul+0x4a>
 80012dc:	4653      	mov	r3, sl
 80012de:	4323      	orrs	r3, r4
 80012e0:	d12a      	bne.n	8001338 <__aeabi_dmul+0x19c>
 80012e2:	2400      	movs	r4, #0
 80012e4:	2002      	movs	r0, #2
 80012e6:	e796      	b.n	8001216 <__aeabi_dmul+0x7a>
 80012e8:	4653      	mov	r3, sl
 80012ea:	4323      	orrs	r3, r4
 80012ec:	d020      	beq.n	8001330 <__aeabi_dmul+0x194>
 80012ee:	2c00      	cmp	r4, #0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_dmul+0x158>
 80012f2:	e157      	b.n	80015a4 <__aeabi_dmul+0x408>
 80012f4:	0020      	movs	r0, r4
 80012f6:	f7fe ffd1 	bl	800029c <__clzsi2>
 80012fa:	0003      	movs	r3, r0
 80012fc:	3b0b      	subs	r3, #11
 80012fe:	2b1c      	cmp	r3, #28
 8001300:	dd00      	ble.n	8001304 <__aeabi_dmul+0x168>
 8001302:	e149      	b.n	8001598 <__aeabi_dmul+0x3fc>
 8001304:	211d      	movs	r1, #29
 8001306:	1acb      	subs	r3, r1, r3
 8001308:	4651      	mov	r1, sl
 800130a:	0002      	movs	r2, r0
 800130c:	40d9      	lsrs	r1, r3
 800130e:	4653      	mov	r3, sl
 8001310:	3a08      	subs	r2, #8
 8001312:	4094      	lsls	r4, r2
 8001314:	4093      	lsls	r3, r2
 8001316:	430c      	orrs	r4, r1
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <__aeabi_dmul+0x1ec>)
 800131a:	1a12      	subs	r2, r2, r0
 800131c:	2000      	movs	r0, #0
 800131e:	e77a      	b.n	8001216 <__aeabi_dmul+0x7a>
 8001320:	2501      	movs	r5, #1
 8001322:	9b01      	ldr	r3, [sp, #4]
 8001324:	4c14      	ldr	r4, [pc, #80]	; (8001378 <__aeabi_dmul+0x1dc>)
 8001326:	401d      	ands	r5, r3
 8001328:	2300      	movs	r3, #0
 800132a:	2200      	movs	r2, #0
 800132c:	4699      	mov	r9, r3
 800132e:	e79c      	b.n	800126a <__aeabi_dmul+0xce>
 8001330:	2400      	movs	r4, #0
 8001332:	2200      	movs	r2, #0
 8001334:	2001      	movs	r0, #1
 8001336:	e76e      	b.n	8001216 <__aeabi_dmul+0x7a>
 8001338:	4653      	mov	r3, sl
 800133a:	2003      	movs	r0, #3
 800133c:	e76b      	b.n	8001216 <__aeabi_dmul+0x7a>
 800133e:	2300      	movs	r3, #0
 8001340:	469b      	mov	fp, r3
 8001342:	3301      	adds	r3, #1
 8001344:	2704      	movs	r7, #4
 8001346:	2600      	movs	r6, #0
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	e74c      	b.n	80011e6 <__aeabi_dmul+0x4a>
 800134c:	2303      	movs	r3, #3
 800134e:	4681      	mov	r9, r0
 8001350:	270c      	movs	r7, #12
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	e747      	b.n	80011e6 <__aeabi_dmul+0x4a>
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	2300      	movs	r3, #0
 800135a:	2500      	movs	r5, #0
 800135c:	0312      	lsls	r2, r2, #12
 800135e:	4699      	mov	r9, r3
 8001360:	4c05      	ldr	r4, [pc, #20]	; (8001378 <__aeabi_dmul+0x1dc>)
 8001362:	e782      	b.n	800126a <__aeabi_dmul+0xce>
 8001364:	465c      	mov	r4, fp
 8001366:	464b      	mov	r3, r9
 8001368:	9802      	ldr	r0, [sp, #8]
 800136a:	e76f      	b.n	800124c <__aeabi_dmul+0xb0>
 800136c:	465c      	mov	r4, fp
 800136e:	464b      	mov	r3, r9
 8001370:	9501      	str	r5, [sp, #4]
 8001372:	9802      	ldr	r0, [sp, #8]
 8001374:	e76a      	b.n	800124c <__aeabi_dmul+0xb0>
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	000007ff 	.word	0x000007ff
 800137c:	fffffc01 	.word	0xfffffc01
 8001380:	08005484 	.word	0x08005484
 8001384:	800fffff 	.word	0x800fffff
 8001388:	fffffc0d 	.word	0xfffffc0d
 800138c:	464a      	mov	r2, r9
 800138e:	4649      	mov	r1, r9
 8001390:	0c17      	lsrs	r7, r2, #16
 8001392:	0c1a      	lsrs	r2, r3, #16
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	0c1b      	lsrs	r3, r3, #16
 8001398:	0408      	lsls	r0, r1, #16
 800139a:	0019      	movs	r1, r3
 800139c:	0c00      	lsrs	r0, r0, #16
 800139e:	4341      	muls	r1, r0
 80013a0:	0015      	movs	r5, r2
 80013a2:	4688      	mov	r8, r1
 80013a4:	0019      	movs	r1, r3
 80013a6:	437d      	muls	r5, r7
 80013a8:	4379      	muls	r1, r7
 80013aa:	9503      	str	r5, [sp, #12]
 80013ac:	4689      	mov	r9, r1
 80013ae:	0029      	movs	r1, r5
 80013b0:	0015      	movs	r5, r2
 80013b2:	4345      	muls	r5, r0
 80013b4:	444d      	add	r5, r9
 80013b6:	9502      	str	r5, [sp, #8]
 80013b8:	4645      	mov	r5, r8
 80013ba:	0c2d      	lsrs	r5, r5, #16
 80013bc:	46aa      	mov	sl, r5
 80013be:	9d02      	ldr	r5, [sp, #8]
 80013c0:	4455      	add	r5, sl
 80013c2:	45a9      	cmp	r9, r5
 80013c4:	d906      	bls.n	80013d4 <__aeabi_dmul+0x238>
 80013c6:	468a      	mov	sl, r1
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	0249      	lsls	r1, r1, #9
 80013cc:	4689      	mov	r9, r1
 80013ce:	44ca      	add	sl, r9
 80013d0:	4651      	mov	r1, sl
 80013d2:	9103      	str	r1, [sp, #12]
 80013d4:	0c29      	lsrs	r1, r5, #16
 80013d6:	9104      	str	r1, [sp, #16]
 80013d8:	4641      	mov	r1, r8
 80013da:	0409      	lsls	r1, r1, #16
 80013dc:	042d      	lsls	r5, r5, #16
 80013de:	0c09      	lsrs	r1, r1, #16
 80013e0:	4688      	mov	r8, r1
 80013e2:	0029      	movs	r1, r5
 80013e4:	0c25      	lsrs	r5, r4, #16
 80013e6:	0424      	lsls	r4, r4, #16
 80013e8:	4441      	add	r1, r8
 80013ea:	0c24      	lsrs	r4, r4, #16
 80013ec:	9105      	str	r1, [sp, #20]
 80013ee:	0021      	movs	r1, r4
 80013f0:	4341      	muls	r1, r0
 80013f2:	4688      	mov	r8, r1
 80013f4:	0021      	movs	r1, r4
 80013f6:	4379      	muls	r1, r7
 80013f8:	468a      	mov	sl, r1
 80013fa:	4368      	muls	r0, r5
 80013fc:	4641      	mov	r1, r8
 80013fe:	4450      	add	r0, sl
 8001400:	4681      	mov	r9, r0
 8001402:	0c08      	lsrs	r0, r1, #16
 8001404:	4448      	add	r0, r9
 8001406:	436f      	muls	r7, r5
 8001408:	4582      	cmp	sl, r0
 800140a:	d903      	bls.n	8001414 <__aeabi_dmul+0x278>
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0249      	lsls	r1, r1, #9
 8001410:	4689      	mov	r9, r1
 8001412:	444f      	add	r7, r9
 8001414:	0c01      	lsrs	r1, r0, #16
 8001416:	4689      	mov	r9, r1
 8001418:	0039      	movs	r1, r7
 800141a:	4449      	add	r1, r9
 800141c:	9102      	str	r1, [sp, #8]
 800141e:	4641      	mov	r1, r8
 8001420:	040f      	lsls	r7, r1, #16
 8001422:	9904      	ldr	r1, [sp, #16]
 8001424:	0c3f      	lsrs	r7, r7, #16
 8001426:	4688      	mov	r8, r1
 8001428:	0400      	lsls	r0, r0, #16
 800142a:	19c0      	adds	r0, r0, r7
 800142c:	4480      	add	r8, r0
 800142e:	4641      	mov	r1, r8
 8001430:	9104      	str	r1, [sp, #16]
 8001432:	4659      	mov	r1, fp
 8001434:	0c0f      	lsrs	r7, r1, #16
 8001436:	0409      	lsls	r1, r1, #16
 8001438:	0c09      	lsrs	r1, r1, #16
 800143a:	4688      	mov	r8, r1
 800143c:	4359      	muls	r1, r3
 800143e:	468a      	mov	sl, r1
 8001440:	0039      	movs	r1, r7
 8001442:	4351      	muls	r1, r2
 8001444:	4689      	mov	r9, r1
 8001446:	4641      	mov	r1, r8
 8001448:	434a      	muls	r2, r1
 800144a:	4651      	mov	r1, sl
 800144c:	0c09      	lsrs	r1, r1, #16
 800144e:	468b      	mov	fp, r1
 8001450:	437b      	muls	r3, r7
 8001452:	18d2      	adds	r2, r2, r3
 8001454:	445a      	add	r2, fp
 8001456:	4293      	cmp	r3, r2
 8001458:	d903      	bls.n	8001462 <__aeabi_dmul+0x2c6>
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	469b      	mov	fp, r3
 8001460:	44d9      	add	r9, fp
 8001462:	4651      	mov	r1, sl
 8001464:	0409      	lsls	r1, r1, #16
 8001466:	0c09      	lsrs	r1, r1, #16
 8001468:	468a      	mov	sl, r1
 800146a:	4641      	mov	r1, r8
 800146c:	4361      	muls	r1, r4
 800146e:	437c      	muls	r4, r7
 8001470:	0c13      	lsrs	r3, r2, #16
 8001472:	0412      	lsls	r2, r2, #16
 8001474:	444b      	add	r3, r9
 8001476:	4452      	add	r2, sl
 8001478:	46a1      	mov	r9, r4
 800147a:	468a      	mov	sl, r1
 800147c:	003c      	movs	r4, r7
 800147e:	4641      	mov	r1, r8
 8001480:	436c      	muls	r4, r5
 8001482:	434d      	muls	r5, r1
 8001484:	4651      	mov	r1, sl
 8001486:	444d      	add	r5, r9
 8001488:	0c0f      	lsrs	r7, r1, #16
 800148a:	197d      	adds	r5, r7, r5
 800148c:	45a9      	cmp	r9, r5
 800148e:	d903      	bls.n	8001498 <__aeabi_dmul+0x2fc>
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0249      	lsls	r1, r1, #9
 8001494:	4688      	mov	r8, r1
 8001496:	4444      	add	r4, r8
 8001498:	9f04      	ldr	r7, [sp, #16]
 800149a:	9903      	ldr	r1, [sp, #12]
 800149c:	46b8      	mov	r8, r7
 800149e:	4441      	add	r1, r8
 80014a0:	468b      	mov	fp, r1
 80014a2:	4583      	cmp	fp, r0
 80014a4:	4180      	sbcs	r0, r0
 80014a6:	4241      	negs	r1, r0
 80014a8:	4688      	mov	r8, r1
 80014aa:	4651      	mov	r1, sl
 80014ac:	0408      	lsls	r0, r1, #16
 80014ae:	042f      	lsls	r7, r5, #16
 80014b0:	0c00      	lsrs	r0, r0, #16
 80014b2:	183f      	adds	r7, r7, r0
 80014b4:	4658      	mov	r0, fp
 80014b6:	9902      	ldr	r1, [sp, #8]
 80014b8:	1810      	adds	r0, r2, r0
 80014ba:	4689      	mov	r9, r1
 80014bc:	4290      	cmp	r0, r2
 80014be:	4192      	sbcs	r2, r2
 80014c0:	444f      	add	r7, r9
 80014c2:	46ba      	mov	sl, r7
 80014c4:	4252      	negs	r2, r2
 80014c6:	4699      	mov	r9, r3
 80014c8:	4693      	mov	fp, r2
 80014ca:	44c2      	add	sl, r8
 80014cc:	44d1      	add	r9, sl
 80014ce:	44cb      	add	fp, r9
 80014d0:	428f      	cmp	r7, r1
 80014d2:	41bf      	sbcs	r7, r7
 80014d4:	45c2      	cmp	sl, r8
 80014d6:	4189      	sbcs	r1, r1
 80014d8:	4599      	cmp	r9, r3
 80014da:	419b      	sbcs	r3, r3
 80014dc:	4593      	cmp	fp, r2
 80014de:	4192      	sbcs	r2, r2
 80014e0:	427f      	negs	r7, r7
 80014e2:	4249      	negs	r1, r1
 80014e4:	0c2d      	lsrs	r5, r5, #16
 80014e6:	4252      	negs	r2, r2
 80014e8:	430f      	orrs	r7, r1
 80014ea:	425b      	negs	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	197f      	adds	r7, r7, r5
 80014f0:	18ff      	adds	r7, r7, r3
 80014f2:	465b      	mov	r3, fp
 80014f4:	193c      	adds	r4, r7, r4
 80014f6:	0ddb      	lsrs	r3, r3, #23
 80014f8:	9a05      	ldr	r2, [sp, #20]
 80014fa:	0264      	lsls	r4, r4, #9
 80014fc:	431c      	orrs	r4, r3
 80014fe:	0243      	lsls	r3, r0, #9
 8001500:	4313      	orrs	r3, r2
 8001502:	1e5d      	subs	r5, r3, #1
 8001504:	41ab      	sbcs	r3, r5
 8001506:	465a      	mov	r2, fp
 8001508:	0dc0      	lsrs	r0, r0, #23
 800150a:	4303      	orrs	r3, r0
 800150c:	0252      	lsls	r2, r2, #9
 800150e:	4313      	orrs	r3, r2
 8001510:	01e2      	lsls	r2, r4, #7
 8001512:	d556      	bpl.n	80015c2 <__aeabi_dmul+0x426>
 8001514:	2001      	movs	r0, #1
 8001516:	085a      	lsrs	r2, r3, #1
 8001518:	4003      	ands	r3, r0
 800151a:	4313      	orrs	r3, r2
 800151c:	07e2      	lsls	r2, r4, #31
 800151e:	4313      	orrs	r3, r2
 8001520:	0864      	lsrs	r4, r4, #1
 8001522:	485a      	ldr	r0, [pc, #360]	; (800168c <__aeabi_dmul+0x4f0>)
 8001524:	4460      	add	r0, ip
 8001526:	2800      	cmp	r0, #0
 8001528:	dd4d      	ble.n	80015c6 <__aeabi_dmul+0x42a>
 800152a:	075a      	lsls	r2, r3, #29
 800152c:	d009      	beq.n	8001542 <__aeabi_dmul+0x3a6>
 800152e:	220f      	movs	r2, #15
 8001530:	401a      	ands	r2, r3
 8001532:	2a04      	cmp	r2, #4
 8001534:	d005      	beq.n	8001542 <__aeabi_dmul+0x3a6>
 8001536:	1d1a      	adds	r2, r3, #4
 8001538:	429a      	cmp	r2, r3
 800153a:	419b      	sbcs	r3, r3
 800153c:	425b      	negs	r3, r3
 800153e:	18e4      	adds	r4, r4, r3
 8001540:	0013      	movs	r3, r2
 8001542:	01e2      	lsls	r2, r4, #7
 8001544:	d504      	bpl.n	8001550 <__aeabi_dmul+0x3b4>
 8001546:	2080      	movs	r0, #128	; 0x80
 8001548:	4a51      	ldr	r2, [pc, #324]	; (8001690 <__aeabi_dmul+0x4f4>)
 800154a:	00c0      	lsls	r0, r0, #3
 800154c:	4014      	ands	r4, r2
 800154e:	4460      	add	r0, ip
 8001550:	4a50      	ldr	r2, [pc, #320]	; (8001694 <__aeabi_dmul+0x4f8>)
 8001552:	4290      	cmp	r0, r2
 8001554:	dd00      	ble.n	8001558 <__aeabi_dmul+0x3bc>
 8001556:	e6e3      	b.n	8001320 <__aeabi_dmul+0x184>
 8001558:	2501      	movs	r5, #1
 800155a:	08db      	lsrs	r3, r3, #3
 800155c:	0762      	lsls	r2, r4, #29
 800155e:	431a      	orrs	r2, r3
 8001560:	0264      	lsls	r4, r4, #9
 8001562:	9b01      	ldr	r3, [sp, #4]
 8001564:	4691      	mov	r9, r2
 8001566:	0b22      	lsrs	r2, r4, #12
 8001568:	0544      	lsls	r4, r0, #21
 800156a:	0d64      	lsrs	r4, r4, #21
 800156c:	401d      	ands	r5, r3
 800156e:	e67c      	b.n	800126a <__aeabi_dmul+0xce>
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	4659      	mov	r1, fp
 8001574:	0312      	lsls	r2, r2, #12
 8001576:	4211      	tst	r1, r2
 8001578:	d008      	beq.n	800158c <__aeabi_dmul+0x3f0>
 800157a:	4214      	tst	r4, r2
 800157c:	d106      	bne.n	800158c <__aeabi_dmul+0x3f0>
 800157e:	4322      	orrs	r2, r4
 8001580:	0312      	lsls	r2, r2, #12
 8001582:	0b12      	lsrs	r2, r2, #12
 8001584:	4645      	mov	r5, r8
 8001586:	4699      	mov	r9, r3
 8001588:	4c43      	ldr	r4, [pc, #268]	; (8001698 <__aeabi_dmul+0x4fc>)
 800158a:	e66e      	b.n	800126a <__aeabi_dmul+0xce>
 800158c:	465b      	mov	r3, fp
 800158e:	431a      	orrs	r2, r3
 8001590:	0312      	lsls	r2, r2, #12
 8001592:	0b12      	lsrs	r2, r2, #12
 8001594:	4c40      	ldr	r4, [pc, #256]	; (8001698 <__aeabi_dmul+0x4fc>)
 8001596:	e668      	b.n	800126a <__aeabi_dmul+0xce>
 8001598:	0003      	movs	r3, r0
 800159a:	4654      	mov	r4, sl
 800159c:	3b28      	subs	r3, #40	; 0x28
 800159e:	409c      	lsls	r4, r3
 80015a0:	2300      	movs	r3, #0
 80015a2:	e6b9      	b.n	8001318 <__aeabi_dmul+0x17c>
 80015a4:	f7fe fe7a 	bl	800029c <__clzsi2>
 80015a8:	3020      	adds	r0, #32
 80015aa:	e6a6      	b.n	80012fa <__aeabi_dmul+0x15e>
 80015ac:	0003      	movs	r3, r0
 80015ae:	3b28      	subs	r3, #40	; 0x28
 80015b0:	409f      	lsls	r7, r3
 80015b2:	2300      	movs	r3, #0
 80015b4:	46bb      	mov	fp, r7
 80015b6:	4699      	mov	r9, r3
 80015b8:	e68a      	b.n	80012d0 <__aeabi_dmul+0x134>
 80015ba:	f7fe fe6f 	bl	800029c <__clzsi2>
 80015be:	3020      	adds	r0, #32
 80015c0:	e674      	b.n	80012ac <__aeabi_dmul+0x110>
 80015c2:	46b4      	mov	ip, r6
 80015c4:	e7ad      	b.n	8001522 <__aeabi_dmul+0x386>
 80015c6:	2501      	movs	r5, #1
 80015c8:	1a2a      	subs	r2, r5, r0
 80015ca:	2a38      	cmp	r2, #56	; 0x38
 80015cc:	dd06      	ble.n	80015dc <__aeabi_dmul+0x440>
 80015ce:	9b01      	ldr	r3, [sp, #4]
 80015d0:	2400      	movs	r4, #0
 80015d2:	401d      	ands	r5, r3
 80015d4:	2300      	movs	r3, #0
 80015d6:	2200      	movs	r2, #0
 80015d8:	4699      	mov	r9, r3
 80015da:	e646      	b.n	800126a <__aeabi_dmul+0xce>
 80015dc:	2a1f      	cmp	r2, #31
 80015de:	dc21      	bgt.n	8001624 <__aeabi_dmul+0x488>
 80015e0:	2520      	movs	r5, #32
 80015e2:	0020      	movs	r0, r4
 80015e4:	1aad      	subs	r5, r5, r2
 80015e6:	001e      	movs	r6, r3
 80015e8:	40ab      	lsls	r3, r5
 80015ea:	40a8      	lsls	r0, r5
 80015ec:	40d6      	lsrs	r6, r2
 80015ee:	1e5d      	subs	r5, r3, #1
 80015f0:	41ab      	sbcs	r3, r5
 80015f2:	4330      	orrs	r0, r6
 80015f4:	4318      	orrs	r0, r3
 80015f6:	40d4      	lsrs	r4, r2
 80015f8:	0743      	lsls	r3, r0, #29
 80015fa:	d009      	beq.n	8001610 <__aeabi_dmul+0x474>
 80015fc:	230f      	movs	r3, #15
 80015fe:	4003      	ands	r3, r0
 8001600:	2b04      	cmp	r3, #4
 8001602:	d005      	beq.n	8001610 <__aeabi_dmul+0x474>
 8001604:	0003      	movs	r3, r0
 8001606:	1d18      	adds	r0, r3, #4
 8001608:	4298      	cmp	r0, r3
 800160a:	419b      	sbcs	r3, r3
 800160c:	425b      	negs	r3, r3
 800160e:	18e4      	adds	r4, r4, r3
 8001610:	0223      	lsls	r3, r4, #8
 8001612:	d521      	bpl.n	8001658 <__aeabi_dmul+0x4bc>
 8001614:	2501      	movs	r5, #1
 8001616:	9b01      	ldr	r3, [sp, #4]
 8001618:	2401      	movs	r4, #1
 800161a:	401d      	ands	r5, r3
 800161c:	2300      	movs	r3, #0
 800161e:	2200      	movs	r2, #0
 8001620:	4699      	mov	r9, r3
 8001622:	e622      	b.n	800126a <__aeabi_dmul+0xce>
 8001624:	251f      	movs	r5, #31
 8001626:	0021      	movs	r1, r4
 8001628:	426d      	negs	r5, r5
 800162a:	1a28      	subs	r0, r5, r0
 800162c:	40c1      	lsrs	r1, r0
 800162e:	0008      	movs	r0, r1
 8001630:	2a20      	cmp	r2, #32
 8001632:	d01d      	beq.n	8001670 <__aeabi_dmul+0x4d4>
 8001634:	355f      	adds	r5, #95	; 0x5f
 8001636:	1aaa      	subs	r2, r5, r2
 8001638:	4094      	lsls	r4, r2
 800163a:	4323      	orrs	r3, r4
 800163c:	1e5c      	subs	r4, r3, #1
 800163e:	41a3      	sbcs	r3, r4
 8001640:	2507      	movs	r5, #7
 8001642:	4303      	orrs	r3, r0
 8001644:	401d      	ands	r5, r3
 8001646:	2200      	movs	r2, #0
 8001648:	2d00      	cmp	r5, #0
 800164a:	d009      	beq.n	8001660 <__aeabi_dmul+0x4c4>
 800164c:	220f      	movs	r2, #15
 800164e:	2400      	movs	r4, #0
 8001650:	401a      	ands	r2, r3
 8001652:	0018      	movs	r0, r3
 8001654:	2a04      	cmp	r2, #4
 8001656:	d1d6      	bne.n	8001606 <__aeabi_dmul+0x46a>
 8001658:	0003      	movs	r3, r0
 800165a:	0765      	lsls	r5, r4, #29
 800165c:	0264      	lsls	r4, r4, #9
 800165e:	0b22      	lsrs	r2, r4, #12
 8001660:	08db      	lsrs	r3, r3, #3
 8001662:	432b      	orrs	r3, r5
 8001664:	2501      	movs	r5, #1
 8001666:	4699      	mov	r9, r3
 8001668:	9b01      	ldr	r3, [sp, #4]
 800166a:	2400      	movs	r4, #0
 800166c:	401d      	ands	r5, r3
 800166e:	e5fc      	b.n	800126a <__aeabi_dmul+0xce>
 8001670:	2400      	movs	r4, #0
 8001672:	e7e2      	b.n	800163a <__aeabi_dmul+0x49e>
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	2501      	movs	r5, #1
 8001678:	0312      	lsls	r2, r2, #12
 800167a:	4322      	orrs	r2, r4
 800167c:	9901      	ldr	r1, [sp, #4]
 800167e:	0312      	lsls	r2, r2, #12
 8001680:	0b12      	lsrs	r2, r2, #12
 8001682:	400d      	ands	r5, r1
 8001684:	4699      	mov	r9, r3
 8001686:	4c04      	ldr	r4, [pc, #16]	; (8001698 <__aeabi_dmul+0x4fc>)
 8001688:	e5ef      	b.n	800126a <__aeabi_dmul+0xce>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	000003ff 	.word	0x000003ff
 8001690:	feffffff 	.word	0xfeffffff
 8001694:	000007fe 	.word	0x000007fe
 8001698:	000007ff 	.word	0x000007ff

0800169c <__aeabi_dsub>:
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	4646      	mov	r6, r8
 80016a0:	46d6      	mov	lr, sl
 80016a2:	464f      	mov	r7, r9
 80016a4:	030c      	lsls	r4, r1, #12
 80016a6:	b5c0      	push	{r6, r7, lr}
 80016a8:	0fcd      	lsrs	r5, r1, #31
 80016aa:	004e      	lsls	r6, r1, #1
 80016ac:	0a61      	lsrs	r1, r4, #9
 80016ae:	0f44      	lsrs	r4, r0, #29
 80016b0:	430c      	orrs	r4, r1
 80016b2:	00c1      	lsls	r1, r0, #3
 80016b4:	0058      	lsls	r0, r3, #1
 80016b6:	0d40      	lsrs	r0, r0, #21
 80016b8:	4684      	mov	ip, r0
 80016ba:	468a      	mov	sl, r1
 80016bc:	000f      	movs	r7, r1
 80016be:	0319      	lsls	r1, r3, #12
 80016c0:	0f50      	lsrs	r0, r2, #29
 80016c2:	0a49      	lsrs	r1, r1, #9
 80016c4:	4301      	orrs	r1, r0
 80016c6:	48c6      	ldr	r0, [pc, #792]	; (80019e0 <__aeabi_dsub+0x344>)
 80016c8:	0d76      	lsrs	r6, r6, #21
 80016ca:	46a8      	mov	r8, r5
 80016cc:	0fdb      	lsrs	r3, r3, #31
 80016ce:	00d2      	lsls	r2, r2, #3
 80016d0:	4584      	cmp	ip, r0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dsub+0x3a>
 80016d4:	e0d8      	b.n	8001888 <__aeabi_dsub+0x1ec>
 80016d6:	2001      	movs	r0, #1
 80016d8:	4043      	eors	r3, r0
 80016da:	42ab      	cmp	r3, r5
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dsub+0x44>
 80016de:	e0a6      	b.n	800182e <__aeabi_dsub+0x192>
 80016e0:	4660      	mov	r0, ip
 80016e2:	1a35      	subs	r5, r6, r0
 80016e4:	2d00      	cmp	r5, #0
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dsub+0x4e>
 80016e8:	e105      	b.n	80018f6 <__aeabi_dsub+0x25a>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d110      	bne.n	8001710 <__aeabi_dsub+0x74>
 80016ee:	000b      	movs	r3, r1
 80016f0:	4313      	orrs	r3, r2
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dsub+0x5a>
 80016f4:	e0d7      	b.n	80018a6 <__aeabi_dsub+0x20a>
 80016f6:	1e6b      	subs	r3, r5, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d000      	beq.n	80016fe <__aeabi_dsub+0x62>
 80016fc:	e14b      	b.n	8001996 <__aeabi_dsub+0x2fa>
 80016fe:	4653      	mov	r3, sl
 8001700:	1a9f      	subs	r7, r3, r2
 8001702:	45ba      	cmp	sl, r7
 8001704:	4180      	sbcs	r0, r0
 8001706:	1a64      	subs	r4, r4, r1
 8001708:	4240      	negs	r0, r0
 800170a:	1a24      	subs	r4, r4, r0
 800170c:	2601      	movs	r6, #1
 800170e:	e01e      	b.n	800174e <__aeabi_dsub+0xb2>
 8001710:	4bb3      	ldr	r3, [pc, #716]	; (80019e0 <__aeabi_dsub+0x344>)
 8001712:	429e      	cmp	r6, r3
 8001714:	d048      	beq.n	80017a8 <__aeabi_dsub+0x10c>
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	4319      	orrs	r1, r3
 800171c:	2d38      	cmp	r5, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dsub+0x86>
 8001720:	e119      	b.n	8001956 <__aeabi_dsub+0x2ba>
 8001722:	2d1f      	cmp	r5, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dsub+0x8c>
 8001726:	e14c      	b.n	80019c2 <__aeabi_dsub+0x326>
 8001728:	2320      	movs	r3, #32
 800172a:	000f      	movs	r7, r1
 800172c:	1b5b      	subs	r3, r3, r5
 800172e:	0010      	movs	r0, r2
 8001730:	409a      	lsls	r2, r3
 8001732:	409f      	lsls	r7, r3
 8001734:	40e8      	lsrs	r0, r5
 8001736:	1e53      	subs	r3, r2, #1
 8001738:	419a      	sbcs	r2, r3
 800173a:	40e9      	lsrs	r1, r5
 800173c:	4307      	orrs	r7, r0
 800173e:	4317      	orrs	r7, r2
 8001740:	4653      	mov	r3, sl
 8001742:	1bdf      	subs	r7, r3, r7
 8001744:	1a61      	subs	r1, r4, r1
 8001746:	45ba      	cmp	sl, r7
 8001748:	41a4      	sbcs	r4, r4
 800174a:	4264      	negs	r4, r4
 800174c:	1b0c      	subs	r4, r1, r4
 800174e:	0223      	lsls	r3, r4, #8
 8001750:	d400      	bmi.n	8001754 <__aeabi_dsub+0xb8>
 8001752:	e0c5      	b.n	80018e0 <__aeabi_dsub+0x244>
 8001754:	0264      	lsls	r4, r4, #9
 8001756:	0a65      	lsrs	r5, r4, #9
 8001758:	2d00      	cmp	r5, #0
 800175a:	d100      	bne.n	800175e <__aeabi_dsub+0xc2>
 800175c:	e0f6      	b.n	800194c <__aeabi_dsub+0x2b0>
 800175e:	0028      	movs	r0, r5
 8001760:	f7fe fd9c 	bl	800029c <__clzsi2>
 8001764:	0003      	movs	r3, r0
 8001766:	3b08      	subs	r3, #8
 8001768:	2b1f      	cmp	r3, #31
 800176a:	dd00      	ble.n	800176e <__aeabi_dsub+0xd2>
 800176c:	e0e9      	b.n	8001942 <__aeabi_dsub+0x2a6>
 800176e:	2220      	movs	r2, #32
 8001770:	003c      	movs	r4, r7
 8001772:	1ad2      	subs	r2, r2, r3
 8001774:	409d      	lsls	r5, r3
 8001776:	40d4      	lsrs	r4, r2
 8001778:	409f      	lsls	r7, r3
 800177a:	4325      	orrs	r5, r4
 800177c:	429e      	cmp	r6, r3
 800177e:	dd00      	ble.n	8001782 <__aeabi_dsub+0xe6>
 8001780:	e0db      	b.n	800193a <__aeabi_dsub+0x29e>
 8001782:	1b9e      	subs	r6, r3, r6
 8001784:	1c73      	adds	r3, r6, #1
 8001786:	2b1f      	cmp	r3, #31
 8001788:	dd00      	ble.n	800178c <__aeabi_dsub+0xf0>
 800178a:	e10a      	b.n	80019a2 <__aeabi_dsub+0x306>
 800178c:	2220      	movs	r2, #32
 800178e:	0038      	movs	r0, r7
 8001790:	1ad2      	subs	r2, r2, r3
 8001792:	0029      	movs	r1, r5
 8001794:	4097      	lsls	r7, r2
 8001796:	002c      	movs	r4, r5
 8001798:	4091      	lsls	r1, r2
 800179a:	40d8      	lsrs	r0, r3
 800179c:	1e7a      	subs	r2, r7, #1
 800179e:	4197      	sbcs	r7, r2
 80017a0:	40dc      	lsrs	r4, r3
 80017a2:	2600      	movs	r6, #0
 80017a4:	4301      	orrs	r1, r0
 80017a6:	430f      	orrs	r7, r1
 80017a8:	077b      	lsls	r3, r7, #29
 80017aa:	d009      	beq.n	80017c0 <__aeabi_dsub+0x124>
 80017ac:	230f      	movs	r3, #15
 80017ae:	403b      	ands	r3, r7
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d005      	beq.n	80017c0 <__aeabi_dsub+0x124>
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	42bb      	cmp	r3, r7
 80017b8:	41bf      	sbcs	r7, r7
 80017ba:	427f      	negs	r7, r7
 80017bc:	19e4      	adds	r4, r4, r7
 80017be:	001f      	movs	r7, r3
 80017c0:	0223      	lsls	r3, r4, #8
 80017c2:	d525      	bpl.n	8001810 <__aeabi_dsub+0x174>
 80017c4:	4b86      	ldr	r3, [pc, #536]	; (80019e0 <__aeabi_dsub+0x344>)
 80017c6:	3601      	adds	r6, #1
 80017c8:	429e      	cmp	r6, r3
 80017ca:	d100      	bne.n	80017ce <__aeabi_dsub+0x132>
 80017cc:	e0af      	b.n	800192e <__aeabi_dsub+0x292>
 80017ce:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <__aeabi_dsub+0x348>)
 80017d0:	2501      	movs	r5, #1
 80017d2:	401c      	ands	r4, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	0762      	lsls	r2, r4, #29
 80017d8:	08ff      	lsrs	r7, r7, #3
 80017da:	0264      	lsls	r4, r4, #9
 80017dc:	0576      	lsls	r6, r6, #21
 80017de:	4317      	orrs	r7, r2
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	0d76      	lsrs	r6, r6, #21
 80017e4:	401d      	ands	r5, r3
 80017e6:	2100      	movs	r1, #0
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	0b23      	lsrs	r3, r4, #12
 80017ec:	0d0c      	lsrs	r4, r1, #20
 80017ee:	4a7e      	ldr	r2, [pc, #504]	; (80019e8 <__aeabi_dsub+0x34c>)
 80017f0:	0524      	lsls	r4, r4, #20
 80017f2:	431c      	orrs	r4, r3
 80017f4:	4014      	ands	r4, r2
 80017f6:	0533      	lsls	r3, r6, #20
 80017f8:	4323      	orrs	r3, r4
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	07ed      	lsls	r5, r5, #31
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	432b      	orrs	r3, r5
 8001802:	0038      	movs	r0, r7
 8001804:	0019      	movs	r1, r3
 8001806:	bc1c      	pop	{r2, r3, r4}
 8001808:	4690      	mov	r8, r2
 800180a:	4699      	mov	r9, r3
 800180c:	46a2      	mov	sl, r4
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001810:	2501      	movs	r5, #1
 8001812:	4643      	mov	r3, r8
 8001814:	0762      	lsls	r2, r4, #29
 8001816:	08ff      	lsrs	r7, r7, #3
 8001818:	4317      	orrs	r7, r2
 800181a:	08e4      	lsrs	r4, r4, #3
 800181c:	401d      	ands	r5, r3
 800181e:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <__aeabi_dsub+0x344>)
 8001820:	429e      	cmp	r6, r3
 8001822:	d036      	beq.n	8001892 <__aeabi_dsub+0x1f6>
 8001824:	0324      	lsls	r4, r4, #12
 8001826:	0576      	lsls	r6, r6, #21
 8001828:	0b24      	lsrs	r4, r4, #12
 800182a:	0d76      	lsrs	r6, r6, #21
 800182c:	e7db      	b.n	80017e6 <__aeabi_dsub+0x14a>
 800182e:	4663      	mov	r3, ip
 8001830:	1af3      	subs	r3, r6, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	dc00      	bgt.n	8001838 <__aeabi_dsub+0x19c>
 8001836:	e094      	b.n	8001962 <__aeabi_dsub+0x2c6>
 8001838:	4660      	mov	r0, ip
 800183a:	2800      	cmp	r0, #0
 800183c:	d035      	beq.n	80018aa <__aeabi_dsub+0x20e>
 800183e:	4868      	ldr	r0, [pc, #416]	; (80019e0 <__aeabi_dsub+0x344>)
 8001840:	4286      	cmp	r6, r0
 8001842:	d0b1      	beq.n	80017a8 <__aeabi_dsub+0x10c>
 8001844:	2780      	movs	r7, #128	; 0x80
 8001846:	043f      	lsls	r7, r7, #16
 8001848:	4339      	orrs	r1, r7
 800184a:	2b38      	cmp	r3, #56	; 0x38
 800184c:	dc00      	bgt.n	8001850 <__aeabi_dsub+0x1b4>
 800184e:	e0fd      	b.n	8001a4c <__aeabi_dsub+0x3b0>
 8001850:	430a      	orrs	r2, r1
 8001852:	0017      	movs	r7, r2
 8001854:	2100      	movs	r1, #0
 8001856:	1e7a      	subs	r2, r7, #1
 8001858:	4197      	sbcs	r7, r2
 800185a:	4457      	add	r7, sl
 800185c:	4557      	cmp	r7, sl
 800185e:	4180      	sbcs	r0, r0
 8001860:	1909      	adds	r1, r1, r4
 8001862:	4244      	negs	r4, r0
 8001864:	190c      	adds	r4, r1, r4
 8001866:	0223      	lsls	r3, r4, #8
 8001868:	d53a      	bpl.n	80018e0 <__aeabi_dsub+0x244>
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <__aeabi_dsub+0x344>)
 800186c:	3601      	adds	r6, #1
 800186e:	429e      	cmp	r6, r3
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x1d8>
 8001872:	e14b      	b.n	8001b0c <__aeabi_dsub+0x470>
 8001874:	2201      	movs	r2, #1
 8001876:	4b5b      	ldr	r3, [pc, #364]	; (80019e4 <__aeabi_dsub+0x348>)
 8001878:	401c      	ands	r4, r3
 800187a:	087b      	lsrs	r3, r7, #1
 800187c:	4017      	ands	r7, r2
 800187e:	431f      	orrs	r7, r3
 8001880:	07e2      	lsls	r2, r4, #31
 8001882:	4317      	orrs	r7, r2
 8001884:	0864      	lsrs	r4, r4, #1
 8001886:	e78f      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001888:	0008      	movs	r0, r1
 800188a:	4310      	orrs	r0, r2
 800188c:	d000      	beq.n	8001890 <__aeabi_dsub+0x1f4>
 800188e:	e724      	b.n	80016da <__aeabi_dsub+0x3e>
 8001890:	e721      	b.n	80016d6 <__aeabi_dsub+0x3a>
 8001892:	0023      	movs	r3, r4
 8001894:	433b      	orrs	r3, r7
 8001896:	d100      	bne.n	800189a <__aeabi_dsub+0x1fe>
 8001898:	e1b9      	b.n	8001c0e <__aeabi_dsub+0x572>
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	0312      	lsls	r2, r2, #12
 800189e:	4314      	orrs	r4, r2
 80018a0:	0324      	lsls	r4, r4, #12
 80018a2:	0b24      	lsrs	r4, r4, #12
 80018a4:	e79f      	b.n	80017e6 <__aeabi_dsub+0x14a>
 80018a6:	002e      	movs	r6, r5
 80018a8:	e77e      	b.n	80017a8 <__aeabi_dsub+0x10c>
 80018aa:	0008      	movs	r0, r1
 80018ac:	4310      	orrs	r0, r2
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dsub+0x216>
 80018b0:	e0ca      	b.n	8001a48 <__aeabi_dsub+0x3ac>
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	4684      	mov	ip, r0
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d000      	beq.n	80018bc <__aeabi_dsub+0x220>
 80018ba:	e0e7      	b.n	8001a8c <__aeabi_dsub+0x3f0>
 80018bc:	4452      	add	r2, sl
 80018be:	4552      	cmp	r2, sl
 80018c0:	4180      	sbcs	r0, r0
 80018c2:	1864      	adds	r4, r4, r1
 80018c4:	4240      	negs	r0, r0
 80018c6:	1824      	adds	r4, r4, r0
 80018c8:	0017      	movs	r7, r2
 80018ca:	2601      	movs	r6, #1
 80018cc:	0223      	lsls	r3, r4, #8
 80018ce:	d507      	bpl.n	80018e0 <__aeabi_dsub+0x244>
 80018d0:	2602      	movs	r6, #2
 80018d2:	e7cf      	b.n	8001874 <__aeabi_dsub+0x1d8>
 80018d4:	4664      	mov	r4, ip
 80018d6:	432c      	orrs	r4, r5
 80018d8:	d100      	bne.n	80018dc <__aeabi_dsub+0x240>
 80018da:	e1b3      	b.n	8001c44 <__aeabi_dsub+0x5a8>
 80018dc:	002c      	movs	r4, r5
 80018de:	4667      	mov	r7, ip
 80018e0:	077b      	lsls	r3, r7, #29
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x24a>
 80018e4:	e762      	b.n	80017ac <__aeabi_dsub+0x110>
 80018e6:	0763      	lsls	r3, r4, #29
 80018e8:	08ff      	lsrs	r7, r7, #3
 80018ea:	431f      	orrs	r7, r3
 80018ec:	2501      	movs	r5, #1
 80018ee:	4643      	mov	r3, r8
 80018f0:	08e4      	lsrs	r4, r4, #3
 80018f2:	401d      	ands	r5, r3
 80018f4:	e793      	b.n	800181e <__aeabi_dsub+0x182>
 80018f6:	2d00      	cmp	r5, #0
 80018f8:	d178      	bne.n	80019ec <__aeabi_dsub+0x350>
 80018fa:	1c75      	adds	r5, r6, #1
 80018fc:	056d      	lsls	r5, r5, #21
 80018fe:	0d6d      	lsrs	r5, r5, #21
 8001900:	2d01      	cmp	r5, #1
 8001902:	dc00      	bgt.n	8001906 <__aeabi_dsub+0x26a>
 8001904:	e0f2      	b.n	8001aec <__aeabi_dsub+0x450>
 8001906:	4650      	mov	r0, sl
 8001908:	1a80      	subs	r0, r0, r2
 800190a:	4582      	cmp	sl, r0
 800190c:	41bf      	sbcs	r7, r7
 800190e:	1a65      	subs	r5, r4, r1
 8001910:	427f      	negs	r7, r7
 8001912:	1bed      	subs	r5, r5, r7
 8001914:	4684      	mov	ip, r0
 8001916:	0228      	lsls	r0, r5, #8
 8001918:	d400      	bmi.n	800191c <__aeabi_dsub+0x280>
 800191a:	e08c      	b.n	8001a36 <__aeabi_dsub+0x39a>
 800191c:	4650      	mov	r0, sl
 800191e:	1a17      	subs	r7, r2, r0
 8001920:	42ba      	cmp	r2, r7
 8001922:	4192      	sbcs	r2, r2
 8001924:	1b0c      	subs	r4, r1, r4
 8001926:	4255      	negs	r5, r2
 8001928:	1b65      	subs	r5, r4, r5
 800192a:	4698      	mov	r8, r3
 800192c:	e714      	b.n	8001758 <__aeabi_dsub+0xbc>
 800192e:	2501      	movs	r5, #1
 8001930:	4643      	mov	r3, r8
 8001932:	2400      	movs	r4, #0
 8001934:	401d      	ands	r5, r3
 8001936:	2700      	movs	r7, #0
 8001938:	e755      	b.n	80017e6 <__aeabi_dsub+0x14a>
 800193a:	4c2a      	ldr	r4, [pc, #168]	; (80019e4 <__aeabi_dsub+0x348>)
 800193c:	1af6      	subs	r6, r6, r3
 800193e:	402c      	ands	r4, r5
 8001940:	e732      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001942:	003d      	movs	r5, r7
 8001944:	3828      	subs	r0, #40	; 0x28
 8001946:	4085      	lsls	r5, r0
 8001948:	2700      	movs	r7, #0
 800194a:	e717      	b.n	800177c <__aeabi_dsub+0xe0>
 800194c:	0038      	movs	r0, r7
 800194e:	f7fe fca5 	bl	800029c <__clzsi2>
 8001952:	3020      	adds	r0, #32
 8001954:	e706      	b.n	8001764 <__aeabi_dsub+0xc8>
 8001956:	430a      	orrs	r2, r1
 8001958:	0017      	movs	r7, r2
 800195a:	2100      	movs	r1, #0
 800195c:	1e7a      	subs	r2, r7, #1
 800195e:	4197      	sbcs	r7, r2
 8001960:	e6ee      	b.n	8001740 <__aeabi_dsub+0xa4>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d000      	beq.n	8001968 <__aeabi_dsub+0x2cc>
 8001966:	e0e5      	b.n	8001b34 <__aeabi_dsub+0x498>
 8001968:	1c73      	adds	r3, r6, #1
 800196a:	469c      	mov	ip, r3
 800196c:	055b      	lsls	r3, r3, #21
 800196e:	0d5b      	lsrs	r3, r3, #21
 8001970:	2b01      	cmp	r3, #1
 8001972:	dc00      	bgt.n	8001976 <__aeabi_dsub+0x2da>
 8001974:	e09f      	b.n	8001ab6 <__aeabi_dsub+0x41a>
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <__aeabi_dsub+0x344>)
 8001978:	459c      	cmp	ip, r3
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0x2e2>
 800197c:	e0c5      	b.n	8001b0a <__aeabi_dsub+0x46e>
 800197e:	4452      	add	r2, sl
 8001980:	4552      	cmp	r2, sl
 8001982:	4180      	sbcs	r0, r0
 8001984:	1864      	adds	r4, r4, r1
 8001986:	4240      	negs	r0, r0
 8001988:	1824      	adds	r4, r4, r0
 800198a:	07e7      	lsls	r7, r4, #31
 800198c:	0852      	lsrs	r2, r2, #1
 800198e:	4317      	orrs	r7, r2
 8001990:	0864      	lsrs	r4, r4, #1
 8001992:	4666      	mov	r6, ip
 8001994:	e708      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001996:	4812      	ldr	r0, [pc, #72]	; (80019e0 <__aeabi_dsub+0x344>)
 8001998:	4285      	cmp	r5, r0
 800199a:	d100      	bne.n	800199e <__aeabi_dsub+0x302>
 800199c:	e085      	b.n	8001aaa <__aeabi_dsub+0x40e>
 800199e:	001d      	movs	r5, r3
 80019a0:	e6bc      	b.n	800171c <__aeabi_dsub+0x80>
 80019a2:	0029      	movs	r1, r5
 80019a4:	3e1f      	subs	r6, #31
 80019a6:	40f1      	lsrs	r1, r6
 80019a8:	2b20      	cmp	r3, #32
 80019aa:	d100      	bne.n	80019ae <__aeabi_dsub+0x312>
 80019ac:	e07f      	b.n	8001aae <__aeabi_dsub+0x412>
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	409d      	lsls	r5, r3
 80019b4:	432f      	orrs	r7, r5
 80019b6:	1e7d      	subs	r5, r7, #1
 80019b8:	41af      	sbcs	r7, r5
 80019ba:	2400      	movs	r4, #0
 80019bc:	430f      	orrs	r7, r1
 80019be:	2600      	movs	r6, #0
 80019c0:	e78e      	b.n	80018e0 <__aeabi_dsub+0x244>
 80019c2:	002b      	movs	r3, r5
 80019c4:	000f      	movs	r7, r1
 80019c6:	3b20      	subs	r3, #32
 80019c8:	40df      	lsrs	r7, r3
 80019ca:	2d20      	cmp	r5, #32
 80019cc:	d071      	beq.n	8001ab2 <__aeabi_dsub+0x416>
 80019ce:	2340      	movs	r3, #64	; 0x40
 80019d0:	1b5d      	subs	r5, r3, r5
 80019d2:	40a9      	lsls	r1, r5
 80019d4:	430a      	orrs	r2, r1
 80019d6:	1e51      	subs	r1, r2, #1
 80019d8:	418a      	sbcs	r2, r1
 80019da:	2100      	movs	r1, #0
 80019dc:	4317      	orrs	r7, r2
 80019de:	e6af      	b.n	8001740 <__aeabi_dsub+0xa4>
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	ff7fffff 	.word	0xff7fffff
 80019e8:	800fffff 	.word	0x800fffff
 80019ec:	2e00      	cmp	r6, #0
 80019ee:	d03e      	beq.n	8001a6e <__aeabi_dsub+0x3d2>
 80019f0:	4eb3      	ldr	r6, [pc, #716]	; (8001cc0 <__aeabi_dsub+0x624>)
 80019f2:	45b4      	cmp	ip, r6
 80019f4:	d045      	beq.n	8001a82 <__aeabi_dsub+0x3e6>
 80019f6:	2680      	movs	r6, #128	; 0x80
 80019f8:	0436      	lsls	r6, r6, #16
 80019fa:	426d      	negs	r5, r5
 80019fc:	4334      	orrs	r4, r6
 80019fe:	2d38      	cmp	r5, #56	; 0x38
 8001a00:	dd00      	ble.n	8001a04 <__aeabi_dsub+0x368>
 8001a02:	e0a8      	b.n	8001b56 <__aeabi_dsub+0x4ba>
 8001a04:	2d1f      	cmp	r5, #31
 8001a06:	dd00      	ble.n	8001a0a <__aeabi_dsub+0x36e>
 8001a08:	e11f      	b.n	8001c4a <__aeabi_dsub+0x5ae>
 8001a0a:	2620      	movs	r6, #32
 8001a0c:	0027      	movs	r7, r4
 8001a0e:	4650      	mov	r0, sl
 8001a10:	1b76      	subs	r6, r6, r5
 8001a12:	40b7      	lsls	r7, r6
 8001a14:	40e8      	lsrs	r0, r5
 8001a16:	4307      	orrs	r7, r0
 8001a18:	4650      	mov	r0, sl
 8001a1a:	40b0      	lsls	r0, r6
 8001a1c:	1e46      	subs	r6, r0, #1
 8001a1e:	41b0      	sbcs	r0, r6
 8001a20:	40ec      	lsrs	r4, r5
 8001a22:	4338      	orrs	r0, r7
 8001a24:	1a17      	subs	r7, r2, r0
 8001a26:	42ba      	cmp	r2, r7
 8001a28:	4192      	sbcs	r2, r2
 8001a2a:	1b0c      	subs	r4, r1, r4
 8001a2c:	4252      	negs	r2, r2
 8001a2e:	1aa4      	subs	r4, r4, r2
 8001a30:	4666      	mov	r6, ip
 8001a32:	4698      	mov	r8, r3
 8001a34:	e68b      	b.n	800174e <__aeabi_dsub+0xb2>
 8001a36:	4664      	mov	r4, ip
 8001a38:	4667      	mov	r7, ip
 8001a3a:	432c      	orrs	r4, r5
 8001a3c:	d000      	beq.n	8001a40 <__aeabi_dsub+0x3a4>
 8001a3e:	e68b      	b.n	8001758 <__aeabi_dsub+0xbc>
 8001a40:	2500      	movs	r5, #0
 8001a42:	2600      	movs	r6, #0
 8001a44:	2700      	movs	r7, #0
 8001a46:	e6ea      	b.n	800181e <__aeabi_dsub+0x182>
 8001a48:	001e      	movs	r6, r3
 8001a4a:	e6ad      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001a4c:	2b1f      	cmp	r3, #31
 8001a4e:	dc60      	bgt.n	8001b12 <__aeabi_dsub+0x476>
 8001a50:	2720      	movs	r7, #32
 8001a52:	1af8      	subs	r0, r7, r3
 8001a54:	000f      	movs	r7, r1
 8001a56:	4684      	mov	ip, r0
 8001a58:	4087      	lsls	r7, r0
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	40d8      	lsrs	r0, r3
 8001a5e:	4307      	orrs	r7, r0
 8001a60:	4660      	mov	r0, ip
 8001a62:	4082      	lsls	r2, r0
 8001a64:	1e50      	subs	r0, r2, #1
 8001a66:	4182      	sbcs	r2, r0
 8001a68:	40d9      	lsrs	r1, r3
 8001a6a:	4317      	orrs	r7, r2
 8001a6c:	e6f5      	b.n	800185a <__aeabi_dsub+0x1be>
 8001a6e:	0026      	movs	r6, r4
 8001a70:	4650      	mov	r0, sl
 8001a72:	4306      	orrs	r6, r0
 8001a74:	d005      	beq.n	8001a82 <__aeabi_dsub+0x3e6>
 8001a76:	43ed      	mvns	r5, r5
 8001a78:	2d00      	cmp	r5, #0
 8001a7a:	d0d3      	beq.n	8001a24 <__aeabi_dsub+0x388>
 8001a7c:	4e90      	ldr	r6, [pc, #576]	; (8001cc0 <__aeabi_dsub+0x624>)
 8001a7e:	45b4      	cmp	ip, r6
 8001a80:	d1bd      	bne.n	80019fe <__aeabi_dsub+0x362>
 8001a82:	000c      	movs	r4, r1
 8001a84:	0017      	movs	r7, r2
 8001a86:	4666      	mov	r6, ip
 8001a88:	4698      	mov	r8, r3
 8001a8a:	e68d      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001a8c:	488c      	ldr	r0, [pc, #560]	; (8001cc0 <__aeabi_dsub+0x624>)
 8001a8e:	4283      	cmp	r3, r0
 8001a90:	d00b      	beq.n	8001aaa <__aeabi_dsub+0x40e>
 8001a92:	4663      	mov	r3, ip
 8001a94:	e6d9      	b.n	800184a <__aeabi_dsub+0x1ae>
 8001a96:	2d00      	cmp	r5, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dsub+0x400>
 8001a9a:	e096      	b.n	8001bca <__aeabi_dsub+0x52e>
 8001a9c:	0008      	movs	r0, r1
 8001a9e:	4310      	orrs	r0, r2
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x408>
 8001aa2:	e0e2      	b.n	8001c6a <__aeabi_dsub+0x5ce>
 8001aa4:	000c      	movs	r4, r1
 8001aa6:	0017      	movs	r7, r2
 8001aa8:	4698      	mov	r8, r3
 8001aaa:	4e85      	ldr	r6, [pc, #532]	; (8001cc0 <__aeabi_dsub+0x624>)
 8001aac:	e67c      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001aae:	2500      	movs	r5, #0
 8001ab0:	e780      	b.n	80019b4 <__aeabi_dsub+0x318>
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e78e      	b.n	80019d4 <__aeabi_dsub+0x338>
 8001ab6:	0023      	movs	r3, r4
 8001ab8:	4650      	mov	r0, sl
 8001aba:	4303      	orrs	r3, r0
 8001abc:	2e00      	cmp	r6, #0
 8001abe:	d000      	beq.n	8001ac2 <__aeabi_dsub+0x426>
 8001ac0:	e0a8      	b.n	8001c14 <__aeabi_dsub+0x578>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x42c>
 8001ac6:	e0de      	b.n	8001c86 <__aeabi_dsub+0x5ea>
 8001ac8:	000b      	movs	r3, r1
 8001aca:	4313      	orrs	r3, r2
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x434>
 8001ace:	e66b      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001ad0:	4452      	add	r2, sl
 8001ad2:	4552      	cmp	r2, sl
 8001ad4:	4180      	sbcs	r0, r0
 8001ad6:	1864      	adds	r4, r4, r1
 8001ad8:	4240      	negs	r0, r0
 8001ada:	1824      	adds	r4, r4, r0
 8001adc:	0017      	movs	r7, r2
 8001ade:	0223      	lsls	r3, r4, #8
 8001ae0:	d400      	bmi.n	8001ae4 <__aeabi_dsub+0x448>
 8001ae2:	e6fd      	b.n	80018e0 <__aeabi_dsub+0x244>
 8001ae4:	4b77      	ldr	r3, [pc, #476]	; (8001cc4 <__aeabi_dsub+0x628>)
 8001ae6:	4666      	mov	r6, ip
 8001ae8:	401c      	ands	r4, r3
 8001aea:	e65d      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001aec:	0025      	movs	r5, r4
 8001aee:	4650      	mov	r0, sl
 8001af0:	4305      	orrs	r5, r0
 8001af2:	2e00      	cmp	r6, #0
 8001af4:	d1cf      	bne.n	8001a96 <__aeabi_dsub+0x3fa>
 8001af6:	2d00      	cmp	r5, #0
 8001af8:	d14f      	bne.n	8001b9a <__aeabi_dsub+0x4fe>
 8001afa:	000c      	movs	r4, r1
 8001afc:	4314      	orrs	r4, r2
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x466>
 8001b00:	e0a0      	b.n	8001c44 <__aeabi_dsub+0x5a8>
 8001b02:	000c      	movs	r4, r1
 8001b04:	0017      	movs	r7, r2
 8001b06:	4698      	mov	r8, r3
 8001b08:	e64e      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001b0a:	4666      	mov	r6, ip
 8001b0c:	2400      	movs	r4, #0
 8001b0e:	2700      	movs	r7, #0
 8001b10:	e685      	b.n	800181e <__aeabi_dsub+0x182>
 8001b12:	001f      	movs	r7, r3
 8001b14:	0008      	movs	r0, r1
 8001b16:	3f20      	subs	r7, #32
 8001b18:	40f8      	lsrs	r0, r7
 8001b1a:	0007      	movs	r7, r0
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x486>
 8001b20:	e08e      	b.n	8001c40 <__aeabi_dsub+0x5a4>
 8001b22:	2040      	movs	r0, #64	; 0x40
 8001b24:	1ac3      	subs	r3, r0, r3
 8001b26:	4099      	lsls	r1, r3
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	1e51      	subs	r1, r2, #1
 8001b2c:	418a      	sbcs	r2, r1
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4317      	orrs	r7, r2
 8001b32:	e692      	b.n	800185a <__aeabi_dsub+0x1be>
 8001b34:	2e00      	cmp	r6, #0
 8001b36:	d114      	bne.n	8001b62 <__aeabi_dsub+0x4c6>
 8001b38:	0026      	movs	r6, r4
 8001b3a:	4650      	mov	r0, sl
 8001b3c:	4306      	orrs	r6, r0
 8001b3e:	d062      	beq.n	8001c06 <__aeabi_dsub+0x56a>
 8001b40:	43db      	mvns	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d15c      	bne.n	8001c00 <__aeabi_dsub+0x564>
 8001b46:	1887      	adds	r7, r0, r2
 8001b48:	4297      	cmp	r7, r2
 8001b4a:	4192      	sbcs	r2, r2
 8001b4c:	1864      	adds	r4, r4, r1
 8001b4e:	4252      	negs	r2, r2
 8001b50:	18a4      	adds	r4, r4, r2
 8001b52:	4666      	mov	r6, ip
 8001b54:	e687      	b.n	8001866 <__aeabi_dsub+0x1ca>
 8001b56:	4650      	mov	r0, sl
 8001b58:	4320      	orrs	r0, r4
 8001b5a:	1e44      	subs	r4, r0, #1
 8001b5c:	41a0      	sbcs	r0, r4
 8001b5e:	2400      	movs	r4, #0
 8001b60:	e760      	b.n	8001a24 <__aeabi_dsub+0x388>
 8001b62:	4e57      	ldr	r6, [pc, #348]	; (8001cc0 <__aeabi_dsub+0x624>)
 8001b64:	45b4      	cmp	ip, r6
 8001b66:	d04e      	beq.n	8001c06 <__aeabi_dsub+0x56a>
 8001b68:	2680      	movs	r6, #128	; 0x80
 8001b6a:	0436      	lsls	r6, r6, #16
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	4334      	orrs	r4, r6
 8001b70:	2b38      	cmp	r3, #56	; 0x38
 8001b72:	dd00      	ble.n	8001b76 <__aeabi_dsub+0x4da>
 8001b74:	e07f      	b.n	8001c76 <__aeabi_dsub+0x5da>
 8001b76:	2b1f      	cmp	r3, #31
 8001b78:	dd00      	ble.n	8001b7c <__aeabi_dsub+0x4e0>
 8001b7a:	e08b      	b.n	8001c94 <__aeabi_dsub+0x5f8>
 8001b7c:	2620      	movs	r6, #32
 8001b7e:	0027      	movs	r7, r4
 8001b80:	4650      	mov	r0, sl
 8001b82:	1af6      	subs	r6, r6, r3
 8001b84:	40b7      	lsls	r7, r6
 8001b86:	40d8      	lsrs	r0, r3
 8001b88:	4307      	orrs	r7, r0
 8001b8a:	4650      	mov	r0, sl
 8001b8c:	40b0      	lsls	r0, r6
 8001b8e:	1e46      	subs	r6, r0, #1
 8001b90:	41b0      	sbcs	r0, r6
 8001b92:	4307      	orrs	r7, r0
 8001b94:	40dc      	lsrs	r4, r3
 8001b96:	18bf      	adds	r7, r7, r2
 8001b98:	e7d6      	b.n	8001b48 <__aeabi_dsub+0x4ac>
 8001b9a:	000d      	movs	r5, r1
 8001b9c:	4315      	orrs	r5, r2
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x506>
 8001ba0:	e602      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001ba2:	4650      	mov	r0, sl
 8001ba4:	1a80      	subs	r0, r0, r2
 8001ba6:	4582      	cmp	sl, r0
 8001ba8:	41bf      	sbcs	r7, r7
 8001baa:	1a65      	subs	r5, r4, r1
 8001bac:	427f      	negs	r7, r7
 8001bae:	1bed      	subs	r5, r5, r7
 8001bb0:	4684      	mov	ip, r0
 8001bb2:	0228      	lsls	r0, r5, #8
 8001bb4:	d400      	bmi.n	8001bb8 <__aeabi_dsub+0x51c>
 8001bb6:	e68d      	b.n	80018d4 <__aeabi_dsub+0x238>
 8001bb8:	4650      	mov	r0, sl
 8001bba:	1a17      	subs	r7, r2, r0
 8001bbc:	42ba      	cmp	r2, r7
 8001bbe:	4192      	sbcs	r2, r2
 8001bc0:	1b0c      	subs	r4, r1, r4
 8001bc2:	4252      	negs	r2, r2
 8001bc4:	1aa4      	subs	r4, r4, r2
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	e5ee      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001bca:	000d      	movs	r5, r1
 8001bcc:	4315      	orrs	r5, r2
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_dsub+0x536>
 8001bd0:	e76b      	b.n	8001aaa <__aeabi_dsub+0x40e>
 8001bd2:	4650      	mov	r0, sl
 8001bd4:	0767      	lsls	r7, r4, #29
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4307      	orrs	r7, r0
 8001bda:	2080      	movs	r0, #128	; 0x80
 8001bdc:	08e4      	lsrs	r4, r4, #3
 8001bde:	0300      	lsls	r0, r0, #12
 8001be0:	4204      	tst	r4, r0
 8001be2:	d007      	beq.n	8001bf4 <__aeabi_dsub+0x558>
 8001be4:	08cd      	lsrs	r5, r1, #3
 8001be6:	4205      	tst	r5, r0
 8001be8:	d104      	bne.n	8001bf4 <__aeabi_dsub+0x558>
 8001bea:	002c      	movs	r4, r5
 8001bec:	4698      	mov	r8, r3
 8001bee:	08d7      	lsrs	r7, r2, #3
 8001bf0:	0749      	lsls	r1, r1, #29
 8001bf2:	430f      	orrs	r7, r1
 8001bf4:	0f7b      	lsrs	r3, r7, #29
 8001bf6:	00e4      	lsls	r4, r4, #3
 8001bf8:	431c      	orrs	r4, r3
 8001bfa:	00ff      	lsls	r7, r7, #3
 8001bfc:	4e30      	ldr	r6, [pc, #192]	; (8001cc0 <__aeabi_dsub+0x624>)
 8001bfe:	e5d3      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001c00:	4e2f      	ldr	r6, [pc, #188]	; (8001cc0 <__aeabi_dsub+0x624>)
 8001c02:	45b4      	cmp	ip, r6
 8001c04:	d1b4      	bne.n	8001b70 <__aeabi_dsub+0x4d4>
 8001c06:	000c      	movs	r4, r1
 8001c08:	0017      	movs	r7, r2
 8001c0a:	4666      	mov	r6, ip
 8001c0c:	e5cc      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001c0e:	2700      	movs	r7, #0
 8001c10:	2400      	movs	r4, #0
 8001c12:	e5e8      	b.n	80017e6 <__aeabi_dsub+0x14a>
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d039      	beq.n	8001c8c <__aeabi_dsub+0x5f0>
 8001c18:	000b      	movs	r3, r1
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x584>
 8001c1e:	e744      	b.n	8001aaa <__aeabi_dsub+0x40e>
 8001c20:	08c0      	lsrs	r0, r0, #3
 8001c22:	0767      	lsls	r7, r4, #29
 8001c24:	4307      	orrs	r7, r0
 8001c26:	2080      	movs	r0, #128	; 0x80
 8001c28:	08e4      	lsrs	r4, r4, #3
 8001c2a:	0300      	lsls	r0, r0, #12
 8001c2c:	4204      	tst	r4, r0
 8001c2e:	d0e1      	beq.n	8001bf4 <__aeabi_dsub+0x558>
 8001c30:	08cb      	lsrs	r3, r1, #3
 8001c32:	4203      	tst	r3, r0
 8001c34:	d1de      	bne.n	8001bf4 <__aeabi_dsub+0x558>
 8001c36:	08d7      	lsrs	r7, r2, #3
 8001c38:	0749      	lsls	r1, r1, #29
 8001c3a:	430f      	orrs	r7, r1
 8001c3c:	001c      	movs	r4, r3
 8001c3e:	e7d9      	b.n	8001bf4 <__aeabi_dsub+0x558>
 8001c40:	2100      	movs	r1, #0
 8001c42:	e771      	b.n	8001b28 <__aeabi_dsub+0x48c>
 8001c44:	2500      	movs	r5, #0
 8001c46:	2700      	movs	r7, #0
 8001c48:	e5e9      	b.n	800181e <__aeabi_dsub+0x182>
 8001c4a:	002e      	movs	r6, r5
 8001c4c:	0027      	movs	r7, r4
 8001c4e:	3e20      	subs	r6, #32
 8001c50:	40f7      	lsrs	r7, r6
 8001c52:	2d20      	cmp	r5, #32
 8001c54:	d02f      	beq.n	8001cb6 <__aeabi_dsub+0x61a>
 8001c56:	2640      	movs	r6, #64	; 0x40
 8001c58:	1b75      	subs	r5, r6, r5
 8001c5a:	40ac      	lsls	r4, r5
 8001c5c:	4650      	mov	r0, sl
 8001c5e:	4320      	orrs	r0, r4
 8001c60:	1e44      	subs	r4, r0, #1
 8001c62:	41a0      	sbcs	r0, r4
 8001c64:	2400      	movs	r4, #0
 8001c66:	4338      	orrs	r0, r7
 8001c68:	e6dc      	b.n	8001a24 <__aeabi_dsub+0x388>
 8001c6a:	2480      	movs	r4, #128	; 0x80
 8001c6c:	2500      	movs	r5, #0
 8001c6e:	0324      	lsls	r4, r4, #12
 8001c70:	4e13      	ldr	r6, [pc, #76]	; (8001cc0 <__aeabi_dsub+0x624>)
 8001c72:	2700      	movs	r7, #0
 8001c74:	e5d3      	b.n	800181e <__aeabi_dsub+0x182>
 8001c76:	4650      	mov	r0, sl
 8001c78:	4320      	orrs	r0, r4
 8001c7a:	0007      	movs	r7, r0
 8001c7c:	1e78      	subs	r0, r7, #1
 8001c7e:	4187      	sbcs	r7, r0
 8001c80:	2400      	movs	r4, #0
 8001c82:	18bf      	adds	r7, r7, r2
 8001c84:	e760      	b.n	8001b48 <__aeabi_dsub+0x4ac>
 8001c86:	000c      	movs	r4, r1
 8001c88:	0017      	movs	r7, r2
 8001c8a:	e58d      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001c8c:	000c      	movs	r4, r1
 8001c8e:	0017      	movs	r7, r2
 8001c90:	4e0b      	ldr	r6, [pc, #44]	; (8001cc0 <__aeabi_dsub+0x624>)
 8001c92:	e589      	b.n	80017a8 <__aeabi_dsub+0x10c>
 8001c94:	001e      	movs	r6, r3
 8001c96:	0027      	movs	r7, r4
 8001c98:	3e20      	subs	r6, #32
 8001c9a:	40f7      	lsrs	r7, r6
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d00c      	beq.n	8001cba <__aeabi_dsub+0x61e>
 8001ca0:	2640      	movs	r6, #64	; 0x40
 8001ca2:	1af3      	subs	r3, r6, r3
 8001ca4:	409c      	lsls	r4, r3
 8001ca6:	4650      	mov	r0, sl
 8001ca8:	4320      	orrs	r0, r4
 8001caa:	1e44      	subs	r4, r0, #1
 8001cac:	41a0      	sbcs	r0, r4
 8001cae:	4307      	orrs	r7, r0
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	18bf      	adds	r7, r7, r2
 8001cb4:	e748      	b.n	8001b48 <__aeabi_dsub+0x4ac>
 8001cb6:	2400      	movs	r4, #0
 8001cb8:	e7d0      	b.n	8001c5c <__aeabi_dsub+0x5c0>
 8001cba:	2400      	movs	r4, #0
 8001cbc:	e7f3      	b.n	8001ca6 <__aeabi_dsub+0x60a>
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	000007ff 	.word	0x000007ff
 8001cc4:	ff7fffff 	.word	0xff7fffff

08001cc8 <__aeabi_d2iz>:
 8001cc8:	b530      	push	{r4, r5, lr}
 8001cca:	4d13      	ldr	r5, [pc, #76]	; (8001d18 <__aeabi_d2iz+0x50>)
 8001ccc:	030a      	lsls	r2, r1, #12
 8001cce:	004b      	lsls	r3, r1, #1
 8001cd0:	0b12      	lsrs	r2, r2, #12
 8001cd2:	0d5b      	lsrs	r3, r3, #21
 8001cd4:	0fc9      	lsrs	r1, r1, #31
 8001cd6:	2400      	movs	r4, #0
 8001cd8:	42ab      	cmp	r3, r5
 8001cda:	dd10      	ble.n	8001cfe <__aeabi_d2iz+0x36>
 8001cdc:	4c0f      	ldr	r4, [pc, #60]	; (8001d1c <__aeabi_d2iz+0x54>)
 8001cde:	42a3      	cmp	r3, r4
 8001ce0:	dc0f      	bgt.n	8001d02 <__aeabi_d2iz+0x3a>
 8001ce2:	2480      	movs	r4, #128	; 0x80
 8001ce4:	4d0e      	ldr	r5, [pc, #56]	; (8001d20 <__aeabi_d2iz+0x58>)
 8001ce6:	0364      	lsls	r4, r4, #13
 8001ce8:	4322      	orrs	r2, r4
 8001cea:	1aed      	subs	r5, r5, r3
 8001cec:	2d1f      	cmp	r5, #31
 8001cee:	dd0b      	ble.n	8001d08 <__aeabi_d2iz+0x40>
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <__aeabi_d2iz+0x5c>)
 8001cf2:	1ac3      	subs	r3, r0, r3
 8001cf4:	40da      	lsrs	r2, r3
 8001cf6:	4254      	negs	r4, r2
 8001cf8:	2900      	cmp	r1, #0
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_d2iz+0x36>
 8001cfc:	0014      	movs	r4, r2
 8001cfe:	0020      	movs	r0, r4
 8001d00:	bd30      	pop	{r4, r5, pc}
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <__aeabi_d2iz+0x60>)
 8001d04:	18cc      	adds	r4, r1, r3
 8001d06:	e7fa      	b.n	8001cfe <__aeabi_d2iz+0x36>
 8001d08:	4c08      	ldr	r4, [pc, #32]	; (8001d2c <__aeabi_d2iz+0x64>)
 8001d0a:	40e8      	lsrs	r0, r5
 8001d0c:	46a4      	mov	ip, r4
 8001d0e:	4463      	add	r3, ip
 8001d10:	409a      	lsls	r2, r3
 8001d12:	4302      	orrs	r2, r0
 8001d14:	e7ef      	b.n	8001cf6 <__aeabi_d2iz+0x2e>
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	000003fe 	.word	0x000003fe
 8001d1c:	0000041d 	.word	0x0000041d
 8001d20:	00000433 	.word	0x00000433
 8001d24:	00000413 	.word	0x00000413
 8001d28:	7fffffff 	.word	0x7fffffff
 8001d2c:	fffffbed 	.word	0xfffffbed

08001d30 <__aeabi_i2d>:
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d030      	beq.n	8001d98 <__aeabi_i2d+0x68>
 8001d36:	17c3      	asrs	r3, r0, #31
 8001d38:	18c4      	adds	r4, r0, r3
 8001d3a:	405c      	eors	r4, r3
 8001d3c:	0fc5      	lsrs	r5, r0, #31
 8001d3e:	0020      	movs	r0, r4
 8001d40:	f7fe faac 	bl	800029c <__clzsi2>
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <__aeabi_i2d+0x74>)
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <__aeabi_i2d+0x78>)
 8001d48:	1a1b      	subs	r3, r3, r0
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	2a1f      	cmp	r2, #31
 8001d4e:	dd18      	ble.n	8001d82 <__aeabi_i2d+0x52>
 8001d50:	4a16      	ldr	r2, [pc, #88]	; (8001dac <__aeabi_i2d+0x7c>)
 8001d52:	1ad2      	subs	r2, r2, r3
 8001d54:	4094      	lsls	r4, r2
 8001d56:	2200      	movs	r2, #0
 8001d58:	0324      	lsls	r4, r4, #12
 8001d5a:	055b      	lsls	r3, r3, #21
 8001d5c:	0b24      	lsrs	r4, r4, #12
 8001d5e:	0d5b      	lsrs	r3, r3, #21
 8001d60:	2100      	movs	r1, #0
 8001d62:	0010      	movs	r0, r2
 8001d64:	0324      	lsls	r4, r4, #12
 8001d66:	0d0a      	lsrs	r2, r1, #20
 8001d68:	0b24      	lsrs	r4, r4, #12
 8001d6a:	0512      	lsls	r2, r2, #20
 8001d6c:	4322      	orrs	r2, r4
 8001d6e:	4c10      	ldr	r4, [pc, #64]	; (8001db0 <__aeabi_i2d+0x80>)
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4022      	ands	r2, r4
 8001d74:	4313      	orrs	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	07ed      	lsls	r5, r5, #31
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	432b      	orrs	r3, r5
 8001d7e:	0019      	movs	r1, r3
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
 8001d82:	0021      	movs	r1, r4
 8001d84:	4091      	lsls	r1, r2
 8001d86:	000a      	movs	r2, r1
 8001d88:	210b      	movs	r1, #11
 8001d8a:	1a08      	subs	r0, r1, r0
 8001d8c:	40c4      	lsrs	r4, r0
 8001d8e:	055b      	lsls	r3, r3, #21
 8001d90:	0324      	lsls	r4, r4, #12
 8001d92:	0b24      	lsrs	r4, r4, #12
 8001d94:	0d5b      	lsrs	r3, r3, #21
 8001d96:	e7e3      	b.n	8001d60 <__aeabi_i2d+0x30>
 8001d98:	2500      	movs	r5, #0
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2400      	movs	r4, #0
 8001d9e:	2200      	movs	r2, #0
 8001da0:	e7de      	b.n	8001d60 <__aeabi_i2d+0x30>
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	0000041e 	.word	0x0000041e
 8001da8:	00000433 	.word	0x00000433
 8001dac:	00000413 	.word	0x00000413
 8001db0:	800fffff 	.word	0x800fffff

08001db4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b510      	push	{r4, lr}
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db6:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <HAL_Init+0x1c>)
 8001db8:	6813      	ldr	r3, [r2, #0]
 8001dba:	2110      	movs	r1, #16
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f002 fdf7 	bl	80049b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc6:	f002 fdd7 	bl	8004978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001dca:	2000      	movs	r0, #0
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40022000 	.word	0x40022000

08001dd4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001dd4:	4a02      	ldr	r2, [pc, #8]	; (8001de0 <HAL_IncTick+0xc>)
 8001dd6:	6813      	ldr	r3, [r2, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	4770      	bx	lr
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	20000e00 	.word	0x20000e00

08001de4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001de4:	4b01      	ldr	r3, [pc, #4]	; (8001dec <HAL_GetTick+0x8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
}
 8001de8:	4770      	bx	lr
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	20000e00 	.word	0x20000e00

08001df0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001df0:	b530      	push	{r4, r5, lr}
 8001df2:	b083      	sub	sp, #12
 8001df4:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dfa:	6802      	ldr	r2, [r0, #0]
 8001dfc:	6891      	ldr	r1, [r2, #8]
 8001dfe:	3303      	adds	r3, #3
 8001e00:	400b      	ands	r3, r1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d011      	beq.n	8001e2a <ADC_Enable+0x3a>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d142      	bne.n	8001e92 <ADC_Enable+0xa2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e0c:	6891      	ldr	r1, [r2, #8]
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <ADC_Enable+0xa8>)
 8001e10:	4219      	tst	r1, r3
 8001e12:	d116      	bne.n	8001e42 <ADC_Enable+0x52>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e14:	6893      	ldr	r3, [r2, #8]
 8001e16:	2101      	movs	r1, #1
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <ADC_Enable+0xac>)
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	491f      	ldr	r1, [pc, #124]	; (8001ea0 <ADC_Enable+0xb0>)
 8001e22:	f7fe f971 	bl	8000108 <__udivsi3>
 8001e26:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001e28:	e018      	b.n	8001e5c <ADC_Enable+0x6c>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	07db      	lsls	r3, r3, #31
 8001e2e:	d404      	bmi.n	8001e3a <ADC_Enable+0x4a>
 8001e30:	68d3      	ldr	r3, [r2, #12]
 8001e32:	041b      	lsls	r3, r3, #16
 8001e34:	d403      	bmi.n	8001e3e <ADC_Enable+0x4e>
 8001e36:	2300      	movs	r3, #0
 8001e38:	e7e6      	b.n	8001e08 <ADC_Enable+0x18>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e7e4      	b.n	8001e08 <ADC_Enable+0x18>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e7e2      	b.n	8001e08 <ADC_Enable+0x18>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e44:	2210      	movs	r2, #16
 8001e46:	4313      	orrs	r3, r2
 8001e48:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e4c:	3a0f      	subs	r2, #15
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8001e52:	2001      	movs	r0, #1
 8001e54:	e01e      	b.n	8001e94 <ADC_Enable+0xa4>
    {
      wait_loop_index--;
 8001e56:	9b01      	ldr	r3, [sp, #4]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001e5c:	9b01      	ldr	r3, [sp, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f9      	bne.n	8001e56 <ADC_Enable+0x66>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e62:	f7ff ffbf 	bl	8001de4 <HAL_GetTick>
 8001e66:	0005      	movs	r5, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	07db      	lsls	r3, r3, #31
 8001e6e:	d40e      	bmi.n	8001e8e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e70:	f7ff ffb8 	bl	8001de4 <HAL_GetTick>
 8001e74:	1b40      	subs	r0, r0, r5
 8001e76:	2802      	cmp	r0, #2
 8001e78:	d9f6      	bls.n	8001e68 <ADC_Enable+0x78>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e84:	3a0f      	subs	r2, #15
 8001e86:	4313      	orrs	r3, r2
 8001e88:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e002      	b.n	8001e94 <ADC_Enable+0xa4>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e8e:	2000      	movs	r0, #0
 8001e90:	e000      	b.n	8001e94 <ADC_Enable+0xa4>
 8001e92:	2000      	movs	r0, #0
}
 8001e94:	b003      	add	sp, #12
 8001e96:	bd30      	pop	{r4, r5, pc}
 8001e98:	80000017 	.word	0x80000017
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	000f4240 	.word	0x000f4240

08001ea4 <HAL_ADC_Init>:
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8001ea8:	d100      	bne.n	8001eac <HAL_ADC_Init+0x8>
 8001eaa:	e0b9      	b.n	8002020 <HAL_ADC_Init+0x17c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d100      	bne.n	8001eb4 <HAL_ADC_Init+0x10>
 8001eb2:	e080      	b.n	8001fb6 <HAL_ADC_Init+0x112>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001eb6:	06db      	lsls	r3, r3, #27
 8001eb8:	d500      	bpl.n	8001ebc <HAL_ADC_Init+0x18>
 8001eba:	e0ab      	b.n	8002014 <HAL_ADC_Init+0x170>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ebc:	6822      	ldr	r2, [r4, #0]
 8001ebe:	6893      	ldr	r3, [r2, #8]
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	400b      	ands	r3, r1
      (tmp_hal_status == HAL_OK)                                &&
 8001ec4:	d000      	beq.n	8001ec8 <HAL_ADC_Init+0x24>
 8001ec6:	e0a5      	b.n	8002014 <HAL_ADC_Init+0x170>
    ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001eca:	4856      	ldr	r0, [pc, #344]	; (8002024 <HAL_ADC_Init+0x180>)
 8001ecc:	4001      	ands	r1, r0
 8001ece:	3006      	adds	r0, #6
 8001ed0:	30ff      	adds	r0, #255	; 0xff
 8001ed2:	4301      	orrs	r1, r0
 8001ed4:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001ed6:	6890      	ldr	r0, [r2, #8]
 8001ed8:	2103      	movs	r1, #3
 8001eda:	4001      	ands	r1, r0
 8001edc:	2901      	cmp	r1, #1
 8001ede:	d070      	beq.n	8001fc2 <HAL_ADC_Init+0x11e>
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2900      	cmp	r1, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_ADC_Init+0x5c>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ee6:	68d1      	ldr	r1, [r2, #12]
 8001ee8:	2018      	movs	r0, #24
 8001eea:	4381      	bics	r1, r0
 8001eec:	68a0      	ldr	r0, [r4, #8]
 8001eee:	4301      	orrs	r1, r0
 8001ef0:	60d1      	str	r1, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001ef2:	6821      	ldr	r1, [r4, #0]
 8001ef4:	690a      	ldr	r2, [r1, #16]
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	0892      	lsrs	r2, r2, #2
 8001efa:	6860      	ldr	r0, [r4, #4]
 8001efc:	4302      	orrs	r2, r0
 8001efe:	610a      	str	r2, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001f00:	6821      	ldr	r1, [r4, #0]
 8001f02:	68ca      	ldr	r2, [r1, #12]
 8001f04:	4848      	ldr	r0, [pc, #288]	; (8002028 <HAL_ADC_Init+0x184>)
 8001f06:	4002      	ands	r2, r0
 8001f08:	60ca      	str	r2, [r1, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001f0a:	69a2      	ldr	r2, [r4, #24]
 8001f0c:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001f0e:	69e1      	ldr	r1, [r4, #28]
 8001f10:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001f12:	430a      	orrs	r2, r1
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001f14:	6a20      	ldr	r0, [r4, #32]
 8001f16:	0341      	lsls	r1, r0, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001f18:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001f1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f1c:	2901      	cmp	r1, #1
 8001f1e:	d05c      	beq.n	8001fda <HAL_ADC_Init+0x136>
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	0149      	lsls	r1, r1, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001f24:	430a      	orrs	r2, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001f26:	68e1      	ldr	r1, [r4, #12]
 8001f28:	430a      	orrs	r2, r1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001f2a:	6921      	ldr	r1, [r4, #16]
 8001f2c:	2902      	cmp	r1, #2
 8001f2e:	d056      	beq.n	8001fde <HAL_ADC_Init+0x13a>
                 hadc->Init.DataAlign                                   |
 8001f30:	4313      	orrs	r3, r2
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001f32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001f34:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001f36:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f3a:	2a01      	cmp	r2, #1
 8001f3c:	d051      	beq.n	8001fe2 <HAL_ADC_Init+0x13e>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001f40:	21c2      	movs	r1, #194	; 0xc2
 8001f42:	31ff      	adds	r1, #255	; 0xff
 8001f44:	428a      	cmp	r2, r1
 8001f46:	d002      	beq.n	8001f4e <HAL_ADC_Init+0xaa>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001f48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001f4e:	6821      	ldr	r1, [r4, #0]
 8001f50:	68ca      	ldr	r2, [r1, #12]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001f56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	0549      	lsls	r1, r1, #21
 8001f5c:	428a      	cmp	r2, r1
 8001f5e:	d00d      	beq.n	8001f7c <HAL_ADC_Init+0xd8>
 8001f60:	2a01      	cmp	r2, #1
 8001f62:	d00b      	beq.n	8001f7c <HAL_ADC_Init+0xd8>
 8001f64:	2a02      	cmp	r2, #2
 8001f66:	d009      	beq.n	8001f7c <HAL_ADC_Init+0xd8>
 8001f68:	2a03      	cmp	r2, #3
 8001f6a:	d007      	beq.n	8001f7c <HAL_ADC_Init+0xd8>
 8001f6c:	2a04      	cmp	r2, #4
 8001f6e:	d005      	beq.n	8001f7c <HAL_ADC_Init+0xd8>
 8001f70:	2a05      	cmp	r2, #5
 8001f72:	d003      	beq.n	8001f7c <HAL_ADC_Init+0xd8>
 8001f74:	2a06      	cmp	r2, #6
 8001f76:	d001      	beq.n	8001f7c <HAL_ADC_Init+0xd8>
 8001f78:	2a07      	cmp	r2, #7
 8001f7a:	d10a      	bne.n	8001f92 <HAL_ADC_Init+0xee>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001f7c:	6820      	ldr	r0, [r4, #0]
 8001f7e:	6941      	ldr	r1, [r0, #20]
 8001f80:	2207      	movs	r2, #7
 8001f82:	4391      	bics	r1, r2
 8001f84:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001f86:	6820      	ldr	r0, [r4, #0]
 8001f88:	6941      	ldr	r1, [r0, #20]
 8001f8a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001f8c:	402a      	ands	r2, r5
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f92:	6822      	ldr	r2, [r4, #0]
 8001f94:	68d2      	ldr	r2, [r2, #12]
 8001f96:	4925      	ldr	r1, [pc, #148]	; (800202c <HAL_ADC_Init+0x188>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d030      	beq.n	8002000 <HAL_ADC_Init+0x15c>
      ADC_STATE_CLR_SET(hadc->State,
 8001f9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fa0:	2212      	movs	r2, #18
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	3a02      	subs	r2, #2
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001faa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fac:	3a0f      	subs	r2, #15
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	e033      	b.n	800201e <HAL_ADC_Init+0x17a>
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb6:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8001fbc:	f002 f868 	bl	8004090 <HAL_ADC_MspInit>
 8001fc0:	e778      	b.n	8001eb4 <HAL_ADC_Init+0x10>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001fc2:	6811      	ldr	r1, [r2, #0]
 8001fc4:	07c9      	lsls	r1, r1, #31
 8001fc6:	d404      	bmi.n	8001fd2 <HAL_ADC_Init+0x12e>
 8001fc8:	68d1      	ldr	r1, [r2, #12]
 8001fca:	0409      	lsls	r1, r1, #16
 8001fcc:	d403      	bmi.n	8001fd6 <HAL_ADC_Init+0x132>
 8001fce:	2100      	movs	r1, #0
 8001fd0:	e787      	b.n	8001ee2 <HAL_ADC_Init+0x3e>
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	e785      	b.n	8001ee2 <HAL_ADC_Init+0x3e>
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	e783      	b.n	8001ee2 <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001fda:	0019      	movs	r1, r3
 8001fdc:	e7a2      	b.n	8001f24 <HAL_ADC_Init+0x80>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e7a6      	b.n	8001f30 <HAL_ADC_Init+0x8c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fe2:	2800      	cmp	r0, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_ADC_Init+0x14a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001fe6:	2280      	movs	r2, #128	; 0x80
 8001fe8:	0252      	lsls	r2, r2, #9
 8001fea:	4313      	orrs	r3, r2
 8001fec:	e7a7      	b.n	8001f3e <HAL_ADC_Init+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001ff8:	391f      	subs	r1, #31
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	64a2      	str	r2, [r4, #72]	; 0x48
 8001ffe:	e79e      	b.n	8001f3e <HAL_ADC_Init+0x9a>
      ADC_CLEAR_ERRORCODE(hadc);
 8002000:	2300      	movs	r3, #0
 8002002:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8002004:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002006:	2203      	movs	r2, #3
 8002008:	4393      	bics	r3, r2
 800200a:	3a02      	subs	r2, #2
 800200c:	4313      	orrs	r3, r2
 800200e:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2000      	movs	r0, #0
 8002012:	e004      	b.n	800201e <HAL_ADC_Init+0x17a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002014:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002016:	2210      	movs	r2, #16
 8002018:	4313      	orrs	r3, r2
 800201a:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800201c:	2001      	movs	r0, #1
}
 800201e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002020:	2001      	movs	r0, #1
 8002022:	e7fc      	b.n	800201e <HAL_ADC_Init+0x17a>
 8002024:	fffffefd 	.word	0xfffffefd
 8002028:	fffe0219 	.word	0xfffe0219
 800202c:	833fffe7 	.word	0x833fffe7

08002030 <HAL_ADC_Start_DMA>:
{
 8002030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002032:	0004      	movs	r4, r0
 8002034:	000e      	movs	r6, r1
 8002036:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002038:	6803      	ldr	r3, [r0, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	075b      	lsls	r3, r3, #29
 800203e:	d502      	bpl.n	8002046 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 8002040:	2502      	movs	r5, #2
}
 8002042:	0028      	movs	r0, r5
 8002044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8002046:	2340      	movs	r3, #64	; 0x40
 8002048:	5cc3      	ldrb	r3, [r0, r3]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d03a      	beq.n	80020c4 <HAL_ADC_Start_DMA+0x94>
 800204e:	2201      	movs	r2, #1
 8002050:	2340      	movs	r3, #64	; 0x40
 8002052:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002054:	69c3      	ldr	r3, [r0, #28]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d032      	beq.n	80020c0 <HAL_ADC_Start_DMA+0x90>
      tmp_hal_status = ADC_Enable(hadc);
 800205a:	f7ff fec9 	bl	8001df0 <ADC_Enable>
 800205e:	0005      	movs	r5, r0
    if (tmp_hal_status == HAL_OK)
 8002060:	2d00      	cmp	r5, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_ADC_Start_DMA+0x12>
      ADC_STATE_CLR_SET(hadc->State,
 8002064:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002066:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <HAL_ADC_Start_DMA+0x98>)
 8002068:	401a      	ands	r2, r3
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4313      	orrs	r3, r2
 8002070:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8002072:	2300      	movs	r3, #0
 8002074:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8002076:	2240      	movs	r2, #64	; 0x40
 8002078:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800207a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <HAL_ADC_Start_DMA+0x9c>)
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_ADC_Start_DMA+0xa0>)
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002086:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002088:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <HAL_ADC_Start_DMA+0xa4>)
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	221c      	movs	r2, #28
 8002090:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002092:	6822      	ldr	r2, [r4, #0]
 8002094:	6853      	ldr	r3, [r2, #4]
 8002096:	2110      	movs	r1, #16
 8002098:	430b      	orrs	r3, r1
 800209a:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800209c:	6822      	ldr	r2, [r4, #0]
 800209e:	68d3      	ldr	r3, [r2, #12]
 80020a0:	390f      	subs	r1, #15
 80020a2:	430b      	orrs	r3, r1
 80020a4:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020a6:	6821      	ldr	r1, [r4, #0]
 80020a8:	3140      	adds	r1, #64	; 0x40
 80020aa:	003b      	movs	r3, r7
 80020ac:	0032      	movs	r2, r6
 80020ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80020b0:	f000 f998 	bl	80023e4 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80020b4:	6822      	ldr	r2, [r4, #0]
 80020b6:	6893      	ldr	r3, [r2, #8]
 80020b8:	2104      	movs	r1, #4
 80020ba:	430b      	orrs	r3, r1
 80020bc:	6093      	str	r3, [r2, #8]
 80020be:	e7c0      	b.n	8002042 <HAL_ADC_Start_DMA+0x12>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2500      	movs	r5, #0
 80020c2:	e7cd      	b.n	8002060 <HAL_ADC_Start_DMA+0x30>
    __HAL_LOCK(hadc);
 80020c4:	2502      	movs	r5, #2
 80020c6:	e7bc      	b.n	8002042 <HAL_ADC_Start_DMA+0x12>
 80020c8:	fffff0fe 	.word	0xfffff0fe
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	0800214f 	.word	0x0800214f
 80020d4:	0800215b 	.word	0x0800215b

080020d8 <HAL_ADC_ConvCpltCallback>:
}
 80020d8:	4770      	bx	lr
	...

080020dc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020dc:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020de:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e2:	2150      	movs	r1, #80	; 0x50
 80020e4:	4211      	tst	r1, r2
 80020e6:	d12b      	bne.n	8002140 <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020e8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	0092      	lsls	r2, r2, #2
 80020ee:	430a      	orrs	r2, r1
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68d0      	ldr	r0, [r2, #12]
 80020f6:	21c0      	movs	r1, #192	; 0xc0
 80020f8:	0109      	lsls	r1, r1, #4
 80020fa:	4208      	tst	r0, r1
 80020fc:	d113      	bne.n	8002126 <ADC_DMAConvCplt+0x4a>
 80020fe:	6a19      	ldr	r1, [r3, #32]
 8002100:	2900      	cmp	r1, #0
 8002102:	d110      	bne.n	8002126 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002104:	6811      	ldr	r1, [r2, #0]
 8002106:	0709      	lsls	r1, r1, #28
 8002108:	d50d      	bpl.n	8002126 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800210a:	6891      	ldr	r1, [r2, #8]
 800210c:	0749      	lsls	r1, r1, #29
 800210e:	d40e      	bmi.n	800212e <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002110:	6851      	ldr	r1, [r2, #4]
 8002112:	200c      	movs	r0, #12
 8002114:	4381      	bics	r1, r0
 8002116:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800211a:	490b      	ldr	r1, [pc, #44]	; (8002148 <ADC_DMAConvCplt+0x6c>)
 800211c:	400a      	ands	r2, r1
 800211e:	3104      	adds	r1, #4
 8002120:	31ff      	adds	r1, #255	; 0xff
 8002122:	430a      	orrs	r2, r1
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8002126:	0018      	movs	r0, r3
 8002128:	f7ff ffd6 	bl	80020d8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800212c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002130:	2120      	movs	r1, #32
 8002132:	430a      	orrs	r2, r1
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002138:	391f      	subs	r1, #31
 800213a:	430a      	orrs	r2, r1
 800213c:	649a      	str	r2, [r3, #72]	; 0x48
 800213e:	e7f2      	b.n	8002126 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4798      	blx	r3
}
 8002146:	e7f1      	b.n	800212c <ADC_DMAConvCplt+0x50>
 8002148:	fffffefe 	.word	0xfffffefe

0800214c <HAL_ADC_ConvHalfCpltCallback>:
}
 800214c:	4770      	bx	lr

0800214e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800214e:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002150:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002152:	f7ff fffb 	bl	800214c <HAL_ADC_ConvHalfCpltCallback>
}
 8002156:	bd10      	pop	{r4, pc}

08002158 <HAL_ADC_ErrorCallback>:
}
 8002158:	4770      	bx	lr

0800215a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800215a:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800215c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800215e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002160:	2240      	movs	r2, #64	; 0x40
 8002162:	4313      	orrs	r3, r2
 8002164:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002166:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002168:	3a3c      	subs	r2, #60	; 0x3c
 800216a:	4313      	orrs	r3, r2
 800216c:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800216e:	f7ff fff3 	bl	8002158 <HAL_ADC_ErrorCallback>
}
 8002172:	bd10      	pop	{r4, pc}

08002174 <HAL_ADC_ConfigChannel>:
{
 8002174:	b530      	push	{r4, r5, lr}
 8002176:	b083      	sub	sp, #12
 8002178:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800217e:	3340      	adds	r3, #64	; 0x40
 8002180:	5cc3      	ldrb	r3, [r0, r3]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d100      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x14>
 8002186:	e08a      	b.n	800229e <HAL_ADC_ConfigChannel+0x12a>
 8002188:	2201      	movs	r2, #1
 800218a:	2340      	movs	r3, #64	; 0x40
 800218c:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800218e:	6803      	ldr	r3, [r0, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	0752      	lsls	r2, r2, #29
 8002194:	d475      	bmi.n	8002282 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8002196:	4a43      	ldr	r2, [pc, #268]	; (80022a4 <HAL_ADC_ConfigChannel+0x130>)
 8002198:	6848      	ldr	r0, [r1, #4]
 800219a:	4290      	cmp	r0, r2
 800219c:	d056      	beq.n	800224c <HAL_ADC_ConfigChannel+0xd8>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800219e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021a0:	2001      	movs	r0, #1
 80021a2:	680d      	ldr	r5, [r1, #0]
 80021a4:	40a8      	lsls	r0, r5
 80021a6:	4302      	orrs	r2, r0
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	0552      	lsls	r2, r2, #21
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01e      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d01c      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d01a      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d018      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d016      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d014      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d012      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
 80021cc:	2b07      	cmp	r3, #7
 80021ce:	d010      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	6950      	ldr	r0, [r2, #20]
 80021d4:	2307      	movs	r3, #7
 80021d6:	4003      	ands	r3, r0
 80021d8:	6888      	ldr	r0, [r1, #8]
 80021da:	4298      	cmp	r0, r3
 80021dc:	d009      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80021de:	6950      	ldr	r0, [r2, #20]
 80021e0:	2307      	movs	r3, #7
 80021e2:	4398      	bics	r0, r3
 80021e4:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80021e6:	6820      	ldr	r0, [r4, #0]
 80021e8:	6942      	ldr	r2, [r0, #20]
 80021ea:	688d      	ldr	r5, [r1, #8]
 80021ec:	402b      	ands	r3, r5
 80021ee:	4313      	orrs	r3, r2
 80021f0:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021f2:	680b      	ldr	r3, [r1, #0]
 80021f4:	001a      	movs	r2, r3
 80021f6:	3a10      	subs	r2, #16
 80021f8:	2a02      	cmp	r2, #2
 80021fa:	d84c      	bhi.n	8002296 <HAL_ADC_ConfigChannel+0x122>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021fc:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <HAL_ADC_ConfigChannel+0x134>)
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	2b10      	cmp	r3, #16
 8002202:	d00e      	beq.n	8002222 <HAL_ADC_ConfigChannel+0xae>
 8002204:	2b11      	cmp	r3, #17
 8002206:	d009      	beq.n	800221c <HAL_ADC_ConfigChannel+0xa8>
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	045b      	lsls	r3, r3, #17
 800220c:	4313      	orrs	r3, r2
 800220e:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <HAL_ADC_ConfigChannel+0x134>)
 8002210:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002212:	680b      	ldr	r3, [r1, #0]
 8002214:	2b10      	cmp	r3, #16
 8002216:	d007      	beq.n	8002228 <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002218:	2000      	movs	r0, #0
 800221a:	e037      	b.n	800228c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	03db      	lsls	r3, r3, #15
 8002220:	e7f4      	b.n	800220c <HAL_ADC_ConfigChannel+0x98>
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	041b      	lsls	r3, r3, #16
 8002226:	e7f1      	b.n	800220c <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002228:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_ADC_ConfigChannel+0x138>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	4920      	ldr	r1, [pc, #128]	; (80022b0 <HAL_ADC_ConfigChannel+0x13c>)
 800222e:	f7fd ff6b 	bl	8000108 <__udivsi3>
 8002232:	0083      	lsls	r3, r0, #2
 8002234:	1818      	adds	r0, r3, r0
 8002236:	0043      	lsls	r3, r0, #1
 8002238:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800223a:	e002      	b.n	8002242 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800223c:	9b01      	ldr	r3, [sp, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002242:	9b01      	ldr	r3, [sp, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f9      	bne.n	800223c <HAL_ADC_ConfigChannel+0xc8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002248:	2000      	movs	r0, #0
 800224a:	e01f      	b.n	800228c <HAL_ADC_ConfigChannel+0x118>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800224c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224e:	2001      	movs	r0, #1
 8002250:	680d      	ldr	r5, [r1, #0]
 8002252:	40a8      	lsls	r0, r5
 8002254:	4382      	bics	r2, r0
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002258:	680b      	ldr	r3, [r1, #0]
 800225a:	001a      	movs	r2, r3
 800225c:	3a10      	subs	r2, #16
 800225e:	2a02      	cmp	r2, #2
 8002260:	d81b      	bhi.n	800229a <HAL_ADC_ConfigChannel+0x126>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002262:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_ADC_ConfigChannel+0x134>)
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	2b10      	cmp	r3, #16
 8002268:	d009      	beq.n	800227e <HAL_ADC_ConfigChannel+0x10a>
 800226a:	2b11      	cmp	r3, #17
 800226c:	d005      	beq.n	800227a <HAL_ADC_ConfigChannel+0x106>
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_ADC_ConfigChannel+0x140>)
 8002270:	4013      	ands	r3, r2
 8002272:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_ADC_ConfigChannel+0x134>)
 8002274:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002276:	2000      	movs	r0, #0
 8002278:	e008      	b.n	800228c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800227a:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_ADC_ConfigChannel+0x144>)
 800227c:	e7f8      	b.n	8002270 <HAL_ADC_ConfigChannel+0xfc>
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_ADC_ConfigChannel+0x148>)
 8002280:	e7f6      	b.n	8002270 <HAL_ADC_ConfigChannel+0xfc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002282:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002284:	2220      	movs	r2, #32
 8002286:	4313      	orrs	r3, r2
 8002288:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800228a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800228c:	2200      	movs	r2, #0
 800228e:	2340      	movs	r3, #64	; 0x40
 8002290:	54e2      	strb	r2, [r4, r3]
}
 8002292:	b003      	add	sp, #12
 8002294:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002296:	2000      	movs	r0, #0
 8002298:	e7f8      	b.n	800228c <HAL_ADC_ConfigChannel+0x118>
 800229a:	2000      	movs	r0, #0
 800229c:	e7f6      	b.n	800228c <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 800229e:	2002      	movs	r0, #2
 80022a0:	e7f7      	b.n	8002292 <HAL_ADC_ConfigChannel+0x11e>
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	00001001 	.word	0x00001001
 80022a8:	40012708 	.word	0x40012708
 80022ac:	20000010 	.word	0x20000010
 80022b0:	000f4240 	.word	0x000f4240
 80022b4:	feffffff 	.word	0xfeffffff
 80022b8:	ffbfffff 	.word	0xffbfffff
 80022bc:	ff7fffff 	.word	0xff7fffff

080022c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c0:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80022c2:	2800      	cmp	r0, #0
 80022c4:	db11      	blt.n	80022ea <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c6:	0883      	lsrs	r3, r0, #2
 80022c8:	4d14      	ldr	r5, [pc, #80]	; (800231c <HAL_NVIC_SetPriority+0x5c>)
 80022ca:	33c0      	adds	r3, #192	; 0xc0
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	595c      	ldr	r4, [r3, r5]
 80022d0:	2203      	movs	r2, #3
 80022d2:	4010      	ands	r0, r2
 80022d4:	00c0      	lsls	r0, r0, #3
 80022d6:	32fc      	adds	r2, #252	; 0xfc
 80022d8:	0016      	movs	r6, r2
 80022da:	4086      	lsls	r6, r0
 80022dc:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022de:	0189      	lsls	r1, r1, #6
 80022e0:	400a      	ands	r2, r1
 80022e2:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022e4:	4322      	orrs	r2, r4
 80022e6:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ea:	b2c0      	uxtb	r0, r0
 80022ec:	230f      	movs	r3, #15
 80022ee:	4003      	ands	r3, r0
 80022f0:	3b08      	subs	r3, #8
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	3306      	adds	r3, #6
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_NVIC_SetPriority+0x60>)
 80022fa:	4694      	mov	ip, r2
 80022fc:	4463      	add	r3, ip
 80022fe:	685d      	ldr	r5, [r3, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	4010      	ands	r0, r2
 8002304:	00c0      	lsls	r0, r0, #3
 8002306:	24ff      	movs	r4, #255	; 0xff
 8002308:	0022      	movs	r2, r4
 800230a:	4082      	lsls	r2, r0
 800230c:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800230e:	0189      	lsls	r1, r1, #6
 8002310:	400c      	ands	r4, r1
 8002312:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002314:	432c      	orrs	r4, r5
 8002316:	605c      	str	r4, [r3, #4]
 8002318:	e7e6      	b.n	80022e8 <HAL_NVIC_SetPriority+0x28>
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	e000e100 	.word	0xe000e100
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002324:	231f      	movs	r3, #31
 8002326:	4018      	ands	r0, r3
 8002328:	3b1e      	subs	r3, #30
 800232a:	4083      	lsls	r3, r0
 800232c:	4a01      	ldr	r2, [pc, #4]	; (8002334 <HAL_NVIC_EnableIRQ+0x10>)
 800232e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002330:	4770      	bx	lr
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	e000e100 	.word	0xe000e100

08002338 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002338:	b570      	push	{r4, r5, r6, lr}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800233a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800233c:	2401      	movs	r4, #1
 800233e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002340:	40b4      	lsls	r4, r6
 8002342:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002344:	6804      	ldr	r4, [r0, #0]
 8002346:	6063      	str	r3, [r4, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002348:	6843      	ldr	r3, [r0, #4]
 800234a:	2b10      	cmp	r3, #16
 800234c:	d004      	beq.n	8002358 <DMA_SetConfig+0x20>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800234e:	6803      	ldr	r3, [r0, #0]
 8002350:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002352:	6803      	ldr	r3, [r0, #0]
 8002354:	60da      	str	r2, [r3, #12]
  }
}
 8002356:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8002358:	6803      	ldr	r3, [r0, #0]
 800235a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800235c:	6803      	ldr	r3, [r0, #0]
 800235e:	60d9      	str	r1, [r3, #12]
 8002360:	e7f9      	b.n	8002356 <DMA_SetConfig+0x1e>
	...

08002364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002364:	b510      	push	{r4, lr}
 8002366:	0004      	movs	r4, r0
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	4a06      	ldr	r2, [pc, #24]	; (8002384 <DMA_CalcBaseAndBitshift+0x20>)
 800236c:	4694      	mov	ip, r2
 800236e:	4463      	add	r3, ip
 8002370:	0018      	movs	r0, r3
 8002372:	2114      	movs	r1, #20
 8002374:	f7fd fec8 	bl	8000108 <__udivsi3>
 8002378:	0080      	lsls	r0, r0, #2
 800237a:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800237c:	4b02      	ldr	r3, [pc, #8]	; (8002388 <DMA_CalcBaseAndBitshift+0x24>)
 800237e:	63e3      	str	r3, [r4, #60]	; 0x3c
#endif
}
 8002380:	bd10      	pop	{r4, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	bffdfff8 	.word	0xbffdfff8
 8002388:	40020000 	.word	0x40020000

0800238c <HAL_DMA_Init>:
{ 
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	1e04      	subs	r4, r0, #0
  if(NULL == hdma)
 8002390:	d024      	beq.n	80023dc <HAL_DMA_Init+0x50>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002392:	2521      	movs	r5, #33	; 0x21
 8002394:	2302      	movs	r3, #2
 8002396:	5543      	strb	r3, [r0, r5]
  tmp = hdma->Instance->CCR;
 8002398:	6801      	ldr	r1, [r0, #0]
 800239a:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800239c:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_DMA_Init+0x54>)
 800239e:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80023a0:	6843      	ldr	r3, [r0, #4]
 80023a2:	6880      	ldr	r0, [r0, #8]
 80023a4:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	68e0      	ldr	r0, [r4, #12]
 80023a8:	4303      	orrs	r3, r0
 80023aa:	6920      	ldr	r0, [r4, #16]
 80023ac:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ae:	6960      	ldr	r0, [r4, #20]
 80023b0:	4303      	orrs	r3, r0
 80023b2:	69a0      	ldr	r0, [r4, #24]
 80023b4:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b6:	69e0      	ldr	r0, [r4, #28]
 80023b8:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 80023ba:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80023bc:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 80023be:	0020      	movs	r0, r4
 80023c0:	f7ff ffd0 	bl	8002364 <DMA_CalcBaseAndBitshift>
  hdma->XferCpltCallback = NULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80023c8:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80023ca:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80023cc:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ce:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80023d0:	2201      	movs	r2, #1
 80023d2:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80023d4:	321f      	adds	r2, #31
 80023d6:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80023d8:	2000      	movs	r0, #0
}  
 80023da:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80023dc:	2001      	movs	r0, #1
 80023de:	e7fc      	b.n	80023da <HAL_DMA_Init+0x4e>
 80023e0:	ffffc00f 	.word	0xffffc00f

080023e4 <HAL_DMA_Start_IT>:
{
 80023e4:	b570      	push	{r4, r5, r6, lr}
 80023e6:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80023e8:	2020      	movs	r0, #32
 80023ea:	5c20      	ldrb	r0, [r4, r0]
 80023ec:	2801      	cmp	r0, #1
 80023ee:	d032      	beq.n	8002456 <HAL_DMA_Start_IT+0x72>
 80023f0:	2501      	movs	r5, #1
 80023f2:	2020      	movs	r0, #32
 80023f4:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 80023f6:	3001      	adds	r0, #1
 80023f8:	5c20      	ldrb	r0, [r4, r0]
 80023fa:	2801      	cmp	r0, #1
 80023fc:	d004      	beq.n	8002408 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 80023fe:	2200      	movs	r2, #0
 8002400:	2320      	movs	r3, #32
 8002402:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8002404:	2002      	movs	r0, #2
} 
 8002406:	bd70      	pop	{r4, r5, r6, pc}
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	3501      	adds	r5, #1
 800240a:	3020      	adds	r0, #32
 800240c:	5425      	strb	r5, [r4, r0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	2000      	movs	r0, #0
 8002410:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002412:	6825      	ldr	r5, [r4, #0]
 8002414:	6828      	ldr	r0, [r5, #0]
 8002416:	2601      	movs	r6, #1
 8002418:	43b0      	bics	r0, r6
 800241a:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800241c:	0020      	movs	r0, r4
 800241e:	f7ff ff8b 	bl	8002338 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8002422:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002428:	6822      	ldr	r2, [r4, #0]
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	210e      	movs	r1, #14
 800242e:	430b      	orrs	r3, r1
 8002430:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002432:	6822      	ldr	r2, [r4, #0]
 8002434:	6813      	ldr	r3, [r2, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	430b      	orrs	r3, r1
 800243a:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800243c:	2000      	movs	r0, #0
 800243e:	e7e2      	b.n	8002406 <HAL_DMA_Start_IT+0x22>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002440:	6822      	ldr	r2, [r4, #0]
 8002442:	6813      	ldr	r3, [r2, #0]
 8002444:	210a      	movs	r1, #10
 8002446:	430b      	orrs	r3, r1
 8002448:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6813      	ldr	r3, [r2, #0]
 800244e:	3906      	subs	r1, #6
 8002450:	438b      	bics	r3, r1
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e7ed      	b.n	8002432 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002456:	2002      	movs	r0, #2
 8002458:	e7d5      	b.n	8002406 <HAL_DMA_Start_IT+0x22>

0800245a <HAL_DMA_IRQHandler>:
{
 800245a:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800245c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800245e:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002460:	6804      	ldr	r4, [r0, #0]
 8002462:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002464:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002466:	2304      	movs	r3, #4
 8002468:	408b      	lsls	r3, r1
 800246a:	4213      	tst	r3, r2
 800246c:	d012      	beq.n	8002494 <HAL_DMA_IRQHandler+0x3a>
 800246e:	076b      	lsls	r3, r5, #29
 8002470:	d510      	bpl.n	8002494 <HAL_DMA_IRQHandler+0x3a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	069b      	lsls	r3, r3, #26
 8002476:	d403      	bmi.n	8002480 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	2204      	movs	r2, #4
 800247c:	4393      	bics	r3, r2
 800247e:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002480:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002482:	2304      	movs	r3, #4
 8002484:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002486:	408b      	lsls	r3, r1
 8002488:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800248a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d000      	beq.n	8002492 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferHalfCpltCallback(hdma);
 8002490:	4798      	blx	r3
}  
 8002492:	bd70      	pop	{r4, r5, r6, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002494:	2302      	movs	r3, #2
 8002496:	408b      	lsls	r3, r1
 8002498:	4213      	tst	r3, r2
 800249a:	d018      	beq.n	80024ce <HAL_DMA_IRQHandler+0x74>
 800249c:	07ab      	lsls	r3, r5, #30
 800249e:	d516      	bpl.n	80024ce <HAL_DMA_IRQHandler+0x74>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	069b      	lsls	r3, r3, #26
 80024a4:	d406      	bmi.n	80024b4 <HAL_DMA_IRQHandler+0x5a>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	220a      	movs	r2, #10
 80024aa:	4393      	bics	r3, r2
 80024ac:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80024ae:	3a09      	subs	r2, #9
 80024b0:	2321      	movs	r3, #33	; 0x21
 80024b2:	54c2      	strb	r2, [r0, r3]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80024b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80024b6:	2302      	movs	r3, #2
 80024b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80024ba:	408b      	lsls	r3, r1
 80024bc:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80024be:	2200      	movs	r2, #0
 80024c0:	2320      	movs	r3, #32
 80024c2:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 80024c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0e3      	beq.n	8002492 <HAL_DMA_IRQHandler+0x38>
  		hdma->XferCpltCallback(hdma);
 80024ca:	4798      	blx	r3
 80024cc:	e7e1      	b.n	8002492 <HAL_DMA_IRQHandler+0x38>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024ce:	2308      	movs	r3, #8
 80024d0:	408b      	lsls	r3, r1
 80024d2:	4213      	tst	r3, r2
 80024d4:	d0dd      	beq.n	8002492 <HAL_DMA_IRQHandler+0x38>
 80024d6:	072b      	lsls	r3, r5, #28
 80024d8:	d5db      	bpl.n	8002492 <HAL_DMA_IRQHandler+0x38>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	220e      	movs	r2, #14
 80024de:	4393      	bics	r3, r2
 80024e0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80024e4:	2301      	movs	r3, #1
 80024e6:	0019      	movs	r1, r3
 80024e8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024ea:	40a1      	lsls	r1, r4
 80024ec:	6051      	str	r1, [r2, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ee:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80024f0:	2221      	movs	r2, #33	; 0x21
 80024f2:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma); 
 80024f4:	2200      	movs	r2, #0
 80024f6:	331f      	adds	r3, #31
 80024f8:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 80024fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0c8      	beq.n	8002492 <HAL_DMA_IRQHandler+0x38>
    	hdma->XferErrorCallback(hdma);
 8002500:	4798      	blx	r3
}  
 8002502:	e7c6      	b.n	8002492 <HAL_DMA_IRQHandler+0x38>

08002504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002506:	46c6      	mov	lr, r8
 8002508:	b500      	push	{lr}
 800250a:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 800250c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800250e:	e07e      	b.n	800260e <HAL_GPIO_Init+0x10a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002510:	08df      	lsrs	r7, r3, #3
 8002512:	3708      	adds	r7, #8
 8002514:	00bf      	lsls	r7, r7, #2
 8002516:	583e      	ldr	r6, [r7, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002518:	2507      	movs	r5, #7
 800251a:	401d      	ands	r5, r3
 800251c:	00ad      	lsls	r5, r5, #2
 800251e:	240f      	movs	r4, #15
 8002520:	40ac      	lsls	r4, r5
 8002522:	43a6      	bics	r6, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002524:	690c      	ldr	r4, [r1, #16]
 8002526:	40ac      	lsls	r4, r5
 8002528:	0025      	movs	r5, r4
 800252a:	4335      	orrs	r5, r6
        GPIOx->AFR[position >> 3U] = temp;
 800252c:	503d      	str	r5, [r7, r0]
 800252e:	e07e      	b.n	800262e <HAL_GPIO_Init+0x12a>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002530:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002532:	4664      	mov	r4, ip
 8002534:	4025      	ands	r5, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002536:	68ce      	ldr	r6, [r1, #12]
 8002538:	40be      	lsls	r6, r7
 800253a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800253c:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253e:	6845      	ldr	r5, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002540:	002c      	movs	r4, r5
 8002542:	4645      	mov	r5, r8
 8002544:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002546:	684d      	ldr	r5, [r1, #4]
 8002548:	092e      	lsrs	r6, r5, #4
 800254a:	2501      	movs	r5, #1
 800254c:	4035      	ands	r5, r6
 800254e:	409d      	lsls	r5, r3
 8002550:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002552:	6044      	str	r4, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002554:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002556:	4665      	mov	r5, ip
 8002558:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800255a:	688d      	ldr	r5, [r1, #8]
 800255c:	40bd      	lsls	r5, r7
 800255e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002560:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002562:	684c      	ldr	r4, [r1, #4]
 8002564:	00e4      	lsls	r4, r4, #3
 8002566:	d551      	bpl.n	800260c <HAL_GPIO_Init+0x108>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4d43      	ldr	r5, [pc, #268]	; (8002678 <HAL_GPIO_Init+0x174>)
 800256a:	69ae      	ldr	r6, [r5, #24]
 800256c:	2401      	movs	r4, #1
 800256e:	4326      	orrs	r6, r4
 8002570:	61ae      	str	r6, [r5, #24]
 8002572:	69ad      	ldr	r5, [r5, #24]
 8002574:	402c      	ands	r4, r5
 8002576:	9401      	str	r4, [sp, #4]
 8002578:	9c01      	ldr	r4, [sp, #4]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800257a:	089c      	lsrs	r4, r3, #2
 800257c:	1ca5      	adds	r5, r4, #2
 800257e:	00ad      	lsls	r5, r5, #2
 8002580:	4e3e      	ldr	r6, [pc, #248]	; (800267c <HAL_GPIO_Init+0x178>)
 8002582:	59ae      	ldr	r6, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002584:	2503      	movs	r5, #3
 8002586:	401d      	ands	r5, r3
 8002588:	00ad      	lsls	r5, r5, #2
 800258a:	270f      	movs	r7, #15
 800258c:	40af      	lsls	r7, r5
 800258e:	43be      	bics	r6, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002590:	2790      	movs	r7, #144	; 0x90
 8002592:	05ff      	lsls	r7, r7, #23
 8002594:	42b8      	cmp	r0, r7
 8002596:	d065      	beq.n	8002664 <HAL_GPIO_Init+0x160>
 8002598:	4f39      	ldr	r7, [pc, #228]	; (8002680 <HAL_GPIO_Init+0x17c>)
 800259a:	42b8      	cmp	r0, r7
 800259c:	d064      	beq.n	8002668 <HAL_GPIO_Init+0x164>
 800259e:	4f39      	ldr	r7, [pc, #228]	; (8002684 <HAL_GPIO_Init+0x180>)
 80025a0:	42b8      	cmp	r0, r7
 80025a2:	d063      	beq.n	800266c <HAL_GPIO_Init+0x168>
 80025a4:	4f38      	ldr	r7, [pc, #224]	; (8002688 <HAL_GPIO_Init+0x184>)
 80025a6:	42b8      	cmp	r0, r7
 80025a8:	d05a      	beq.n	8002660 <HAL_GPIO_Init+0x15c>
 80025aa:	2705      	movs	r7, #5
 80025ac:	40af      	lsls	r7, r5
 80025ae:	003d      	movs	r5, r7
 80025b0:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80025b2:	3402      	adds	r4, #2
 80025b4:	00a4      	lsls	r4, r4, #2
 80025b6:	4e31      	ldr	r6, [pc, #196]	; (800267c <HAL_GPIO_Init+0x178>)
 80025b8:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ba:	4c34      	ldr	r4, [pc, #208]	; (800268c <HAL_GPIO_Init+0x188>)
 80025bc:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025be:	43d4      	mvns	r4, r2
 80025c0:	0026      	movs	r6, r4
 80025c2:	402e      	ands	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025c4:	684f      	ldr	r7, [r1, #4]
 80025c6:	03ff      	lsls	r7, r7, #15
 80025c8:	d501      	bpl.n	80025ce <HAL_GPIO_Init+0xca>
        {
          SET_BIT(temp, iocurrent); 
 80025ca:	4315      	orrs	r5, r2
 80025cc:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80025ce:	4d2f      	ldr	r5, [pc, #188]	; (800268c <HAL_GPIO_Init+0x188>)
 80025d0:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80025d2:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80025d4:	002e      	movs	r6, r5
 80025d6:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d8:	684f      	ldr	r7, [r1, #4]
 80025da:	03bf      	lsls	r7, r7, #14
 80025dc:	d501      	bpl.n	80025e2 <HAL_GPIO_Init+0xde>
        { 
          SET_BIT(temp, iocurrent); 
 80025de:	4315      	orrs	r5, r2
 80025e0:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80025e2:	4d2a      	ldr	r5, [pc, #168]	; (800268c <HAL_GPIO_Init+0x188>)
 80025e4:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e6:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80025e8:	002e      	movs	r6, r5
 80025ea:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025ec:	684f      	ldr	r7, [r1, #4]
 80025ee:	02ff      	lsls	r7, r7, #11
 80025f0:	d501      	bpl.n	80025f6 <HAL_GPIO_Init+0xf2>
        {
          SET_BIT(temp, iocurrent); 
 80025f2:	4315      	orrs	r5, r2
 80025f4:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80025f6:	4d25      	ldr	r5, [pc, #148]	; (800268c <HAL_GPIO_Init+0x188>)
 80025f8:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80025fa:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80025fc:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025fe:	684e      	ldr	r6, [r1, #4]
 8002600:	02b6      	lsls	r6, r6, #10
 8002602:	d501      	bpl.n	8002608 <HAL_GPIO_Init+0x104>
        {
          SET_BIT(temp, iocurrent); 
 8002604:	432a      	orrs	r2, r5
 8002606:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8002608:	4a20      	ldr	r2, [pc, #128]	; (800268c <HAL_GPIO_Init+0x188>)
 800260a:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 800260c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800260e:	680a      	ldr	r2, [r1, #0]
 8002610:	0014      	movs	r4, r2
 8002612:	40dc      	lsrs	r4, r3
 8002614:	d02c      	beq.n	8002670 <HAL_GPIO_Init+0x16c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002616:	2401      	movs	r4, #1
 8002618:	409c      	lsls	r4, r3
 800261a:	46a0      	mov	r8, r4
 800261c:	4022      	ands	r2, r4
    if(iocurrent)
 800261e:	d0f5      	beq.n	800260c <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002620:	684d      	ldr	r5, [r1, #4]
 8002622:	2d02      	cmp	r5, #2
 8002624:	d100      	bne.n	8002628 <HAL_GPIO_Init+0x124>
 8002626:	e773      	b.n	8002510 <HAL_GPIO_Init+0xc>
 8002628:	2d12      	cmp	r5, #18
 800262a:	d100      	bne.n	800262e <HAL_GPIO_Init+0x12a>
 800262c:	e770      	b.n	8002510 <HAL_GPIO_Init+0xc>
      temp = GPIOx->MODER;
 800262e:	6806      	ldr	r6, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002630:	005f      	lsls	r7, r3, #1
 8002632:	2503      	movs	r5, #3
 8002634:	002c      	movs	r4, r5
 8002636:	40bc      	lsls	r4, r7
 8002638:	43e4      	mvns	r4, r4
 800263a:	46a4      	mov	ip, r4
 800263c:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800263e:	684c      	ldr	r4, [r1, #4]
 8002640:	4025      	ands	r5, r4
 8002642:	40bd      	lsls	r5, r7
 8002644:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8002646:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002648:	684d      	ldr	r5, [r1, #4]
 800264a:	1e6e      	subs	r6, r5, #1
 800264c:	2e01      	cmp	r6, #1
 800264e:	d800      	bhi.n	8002652 <HAL_GPIO_Init+0x14e>
 8002650:	e76e      	b.n	8002530 <HAL_GPIO_Init+0x2c>
 8002652:	2d11      	cmp	r5, #17
 8002654:	d100      	bne.n	8002658 <HAL_GPIO_Init+0x154>
 8002656:	e76b      	b.n	8002530 <HAL_GPIO_Init+0x2c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002658:	2d12      	cmp	r5, #18
 800265a:	d000      	beq.n	800265e <HAL_GPIO_Init+0x15a>
 800265c:	e77a      	b.n	8002554 <HAL_GPIO_Init+0x50>
 800265e:	e767      	b.n	8002530 <HAL_GPIO_Init+0x2c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002660:	2703      	movs	r7, #3
 8002662:	e7a3      	b.n	80025ac <HAL_GPIO_Init+0xa8>
 8002664:	2700      	movs	r7, #0
 8002666:	e7a1      	b.n	80025ac <HAL_GPIO_Init+0xa8>
 8002668:	2701      	movs	r7, #1
 800266a:	e79f      	b.n	80025ac <HAL_GPIO_Init+0xa8>
 800266c:	2702      	movs	r7, #2
 800266e:	e79d      	b.n	80025ac <HAL_GPIO_Init+0xa8>
  } 
}
 8002670:	b002      	add	sp, #8
 8002672:	bc04      	pop	{r2}
 8002674:	4690      	mov	r8, r2
 8002676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	40010000 	.word	0x40010000
 8002680:	48000400 	.word	0x48000400
 8002684:	48000800 	.word	0x48000800
 8002688:	48000c00 	.word	0x48000c00
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002690:	6903      	ldr	r3, [r0, #16]
 8002692:	420b      	tst	r3, r1
 8002694:	d101      	bne.n	800269a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002696:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 8002698:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800269a:	2001      	movs	r0, #1
 800269c:	e7fc      	b.n	8002698 <HAL_GPIO_ReadPin+0x8>

0800269e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800269e:	2a00      	cmp	r2, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026a2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80026a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026a6:	6181      	str	r1, [r0, #24]
 80026a8:	e7fc      	b.n	80026a4 <HAL_GPIO_WritePin+0x6>
	...

080026ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	6803      	ldr	r3, [r0, #0]
 80026b4:	07db      	lsls	r3, r3, #31
 80026b6:	d536      	bpl.n	8002726 <HAL_RCC_OscConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026b8:	4bc1      	ldr	r3, [pc, #772]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	230c      	movs	r3, #12
 80026be:	4013      	ands	r3, r2
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d028      	beq.n	8002716 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026c4:	4bbe      	ldr	r3, [pc, #760]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	230c      	movs	r3, #12
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d01e      	beq.n	800270e <HAL_RCC_OscConfig+0x62>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	6863      	ldr	r3, [r4, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d04b      	beq.n	800276e <HAL_RCC_OscConfig+0xc2>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d150      	bne.n	800277c <HAL_RCC_OscConfig+0xd0>
 80026da:	4bb9      	ldr	r3, [pc, #740]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	49b9      	ldr	r1, [pc, #740]	; (80029c4 <HAL_RCC_OscConfig+0x318>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	49b8      	ldr	r1, [pc, #736]	; (80029c8 <HAL_RCC_OscConfig+0x31c>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	6863      	ldr	r3, [r4, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d05c      	beq.n	80027ac <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7ff fb77 	bl	8001de4 <HAL_GetTick>
 80026f6:	0005      	movs	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f8:	4bb1      	ldr	r3, [pc, #708]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	039b      	lsls	r3, r3, #14
 80026fe:	d412      	bmi.n	8002726 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff fb70 	bl	8001de4 <HAL_GetTick>
 8002704:	1b40      	subs	r0, r0, r5
 8002706:	2864      	cmp	r0, #100	; 0x64
 8002708:	d9f6      	bls.n	80026f8 <HAL_RCC_OscConfig+0x4c>
          {
            return HAL_TIMEOUT;
 800270a:	2003      	movs	r0, #3
 800270c:	e1ea      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800270e:	4bac      	ldr	r3, [pc, #688]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	03db      	lsls	r3, r3, #15
 8002714:	d5dc      	bpl.n	80026d0 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002716:	4baa      	ldr	r3, [pc, #680]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	039b      	lsls	r3, r3, #14
 800271c:	d503      	bpl.n	8002726 <HAL_RCC_OscConfig+0x7a>
 800271e:	6863      	ldr	r3, [r4, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d100      	bne.n	8002726 <HAL_RCC_OscConfig+0x7a>
 8002724:	e1db      	b.n	8002ade <HAL_RCC_OscConfig+0x432>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	079b      	lsls	r3, r3, #30
 800272a:	d562      	bpl.n	80027f2 <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800272c:	4ba4      	ldr	r3, [pc, #656]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	220c      	movs	r2, #12
 8002732:	421a      	tst	r2, r3
 8002734:	d04c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x124>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002736:	4ba2      	ldr	r3, [pc, #648]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	230c      	movs	r3, #12
 800273c:	4013      	ands	r3, r2
 800273e:	2b08      	cmp	r3, #8
 8002740:	d042      	beq.n	80027c8 <HAL_RCC_OscConfig+0x11c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002742:	68e3      	ldr	r3, [r4, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d076      	beq.n	8002836 <HAL_RCC_OscConfig+0x18a>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002748:	4a9d      	ldr	r2, [pc, #628]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	2101      	movs	r1, #1
 800274e:	430b      	orrs	r3, r1
 8002750:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7ff fb47 	bl	8001de4 <HAL_GetTick>
 8002756:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	4b99      	ldr	r3, [pc, #612]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	079b      	lsls	r3, r3, #30
 800275e:	d461      	bmi.n	8002824 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002760:	f7ff fb40 	bl	8001de4 <HAL_GetTick>
 8002764:	1b40      	subs	r0, r0, r5
 8002766:	2802      	cmp	r0, #2
 8002768:	d9f6      	bls.n	8002758 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 800276a:	2003      	movs	r0, #3
 800276c:	e1ba      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276e:	4a94      	ldr	r2, [pc, #592]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002770:	6811      	ldr	r1, [r2, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	025b      	lsls	r3, r3, #9
 8002776:	430b      	orrs	r3, r1
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e7b7      	b.n	80026ec <HAL_RCC_OscConfig+0x40>
 800277c:	2b05      	cmp	r3, #5
 800277e:	d009      	beq.n	8002794 <HAL_RCC_OscConfig+0xe8>
 8002780:	4b8f      	ldr	r3, [pc, #572]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	498f      	ldr	r1, [pc, #572]	; (80029c4 <HAL_RCC_OscConfig+0x318>)
 8002786:	400a      	ands	r2, r1
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	498e      	ldr	r1, [pc, #568]	; (80029c8 <HAL_RCC_OscConfig+0x31c>)
 800278e:	400a      	ands	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e7ab      	b.n	80026ec <HAL_RCC_OscConfig+0x40>
 8002794:	4b8a      	ldr	r3, [pc, #552]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	02d2      	lsls	r2, r2, #11
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	0252      	lsls	r2, r2, #9
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e79f      	b.n	80026ec <HAL_RCC_OscConfig+0x40>
        tickstart = HAL_GetTick();
 80027ac:	f7ff fb1a 	bl	8001de4 <HAL_GetTick>
 80027b0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b83      	ldr	r3, [pc, #524]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	039b      	lsls	r3, r3, #14
 80027b8:	d5b5      	bpl.n	8002726 <HAL_RCC_OscConfig+0x7a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ba:	f7ff fb13 	bl	8001de4 <HAL_GetTick>
 80027be:	1b40      	subs	r0, r0, r5
 80027c0:	2864      	cmp	r0, #100	; 0x64
 80027c2:	d9f6      	bls.n	80027b2 <HAL_RCC_OscConfig+0x106>
            return HAL_TIMEOUT;
 80027c4:	2003      	movs	r0, #3
 80027c6:	e18d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027c8:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	03db      	lsls	r3, r3, #15
 80027ce:	d4b8      	bmi.n	8002742 <HAL_RCC_OscConfig+0x96>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d0:	4b7b      	ldr	r3, [pc, #492]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	079b      	lsls	r3, r3, #30
 80027d6:	d504      	bpl.n	80027e2 <HAL_RCC_OscConfig+0x136>
 80027d8:	68e3      	ldr	r3, [r4, #12]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x136>
        return HAL_ERROR;
 80027de:	2001      	movs	r0, #1
 80027e0:	e180      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4977      	ldr	r1, [pc, #476]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80027e4:	680b      	ldr	r3, [r1, #0]
 80027e6:	22f8      	movs	r2, #248	; 0xf8
 80027e8:	4393      	bics	r3, r2
 80027ea:	6922      	ldr	r2, [r4, #16]
 80027ec:	00d2      	lsls	r2, r2, #3
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	071b      	lsls	r3, r3, #28
 80027f6:	d544      	bpl.n	8002882 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f8:	69e3      	ldr	r3, [r4, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02e      	beq.n	800285c <HAL_RCC_OscConfig+0x1b0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4a70      	ldr	r2, [pc, #448]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002800:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002802:	2101      	movs	r1, #1
 8002804:	430b      	orrs	r3, r1
 8002806:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002808:	f7ff faec 	bl	8001de4 <HAL_GetTick>
 800280c:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b6c      	ldr	r3, [pc, #432]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	079b      	lsls	r3, r3, #30
 8002814:	d435      	bmi.n	8002882 <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002816:	f7ff fae5 	bl	8001de4 <HAL_GetTick>
 800281a:	1b40      	subs	r0, r0, r5
 800281c:	2802      	cmp	r0, #2
 800281e:	d9f6      	bls.n	800280e <HAL_RCC_OscConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002820:	2003      	movs	r0, #3
 8002822:	e15f      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4966      	ldr	r1, [pc, #408]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002826:	680b      	ldr	r3, [r1, #0]
 8002828:	22f8      	movs	r2, #248	; 0xf8
 800282a:	4393      	bics	r3, r2
 800282c:	6922      	ldr	r2, [r4, #16]
 800282e:	00d2      	lsls	r2, r2, #3
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e7dd      	b.n	80027f2 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8002836:	4a62      	ldr	r2, [pc, #392]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	2101      	movs	r1, #1
 800283c:	438b      	bics	r3, r1
 800283e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002840:	f7ff fad0 	bl	8001de4 <HAL_GetTick>
 8002844:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	4b5e      	ldr	r3, [pc, #376]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	079b      	lsls	r3, r3, #30
 800284c:	d5d1      	bpl.n	80027f2 <HAL_RCC_OscConfig+0x146>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284e:	f7ff fac9 	bl	8001de4 <HAL_GetTick>
 8002852:	1b40      	subs	r0, r0, r5
 8002854:	2802      	cmp	r0, #2
 8002856:	d9f6      	bls.n	8002846 <HAL_RCC_OscConfig+0x19a>
            return HAL_TIMEOUT;
 8002858:	2003      	movs	r0, #3
 800285a:	e143      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285c:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800285e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002860:	2101      	movs	r1, #1
 8002862:	438b      	bics	r3, r1
 8002864:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7ff fabd 	bl	8001de4 <HAL_GetTick>
 800286a:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b54      	ldr	r3, [pc, #336]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	079b      	lsls	r3, r3, #30
 8002872:	d506      	bpl.n	8002882 <HAL_RCC_OscConfig+0x1d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002874:	f7ff fab6 	bl	8001de4 <HAL_GetTick>
 8002878:	1b40      	subs	r0, r0, r5
 800287a:	2802      	cmp	r0, #2
 800287c:	d9f6      	bls.n	800286c <HAL_RCC_OscConfig+0x1c0>
        {
          return HAL_TIMEOUT;
 800287e:	2003      	movs	r0, #3
 8002880:	e130      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	075b      	lsls	r3, r3, #29
 8002886:	d575      	bpl.n	8002974 <HAL_RCC_OscConfig+0x2c8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002888:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	d42e      	bmi.n	80028ee <HAL_RCC_OscConfig+0x242>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4a4b      	ldr	r2, [pc, #300]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002892:	69d1      	ldr	r1, [r2, #28]
 8002894:	2080      	movs	r0, #128	; 0x80
 8002896:	0540      	lsls	r0, r0, #21
 8002898:	4301      	orrs	r1, r0
 800289a:	61d1      	str	r1, [r2, #28]
 800289c:	69d3      	ldr	r3, [r2, #28]
 800289e:	4003      	ands	r3, r0
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028a4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b49      	ldr	r3, [pc, #292]	; (80029cc <HAL_RCC_OscConfig+0x320>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	05db      	lsls	r3, r3, #23
 80028ac:	d521      	bpl.n	80028f2 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ae:	68a3      	ldr	r3, [r4, #8]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d032      	beq.n	800291a <HAL_RCC_OscConfig+0x26e>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d136      	bne.n	8002926 <HAL_RCC_OscConfig+0x27a>
 80028b8:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	2101      	movs	r1, #1
 80028be:	438a      	bics	r2, r1
 80028c0:	621a      	str	r2, [r3, #32]
 80028c2:	6a1a      	ldr	r2, [r3, #32]
 80028c4:	3103      	adds	r1, #3
 80028c6:	438a      	bics	r2, r1
 80028c8:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ca:	68a3      	ldr	r3, [r4, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d040      	beq.n	8002952 <HAL_RCC_OscConfig+0x2a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d0:	f7ff fa88 	bl	8001de4 <HAL_GetTick>
 80028d4:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	079b      	lsls	r3, r3, #30
 80028dc:	d448      	bmi.n	8002970 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7ff fa81 	bl	8001de4 <HAL_GetTick>
 80028e2:	1b80      	subs	r0, r0, r6
 80028e4:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_RCC_OscConfig+0x324>)
 80028e6:	4298      	cmp	r0, r3
 80028e8:	d9f5      	bls.n	80028d6 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80028ea:	2003      	movs	r0, #3
 80028ec:	e0fa      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
    FlagStatus       pwrclkchanged = RESET;
 80028ee:	2500      	movs	r5, #0
 80028f0:	e7d9      	b.n	80028a6 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4a36      	ldr	r2, [pc, #216]	; (80029cc <HAL_RCC_OscConfig+0x320>)
 80028f4:	6811      	ldr	r1, [r2, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	430b      	orrs	r3, r1
 80028fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80028fe:	f7ff fa71 	bl	8001de4 <HAL_GetTick>
 8002902:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_RCC_OscConfig+0x320>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	05db      	lsls	r3, r3, #23
 800290a:	d4d0      	bmi.n	80028ae <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800290c:	f7ff fa6a 	bl	8001de4 <HAL_GetTick>
 8002910:	1b80      	subs	r0, r0, r6
 8002912:	2864      	cmp	r0, #100	; 0x64
 8002914:	d9f6      	bls.n	8002904 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002916:	2003      	movs	r0, #3
 8002918:	e0e4      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291a:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800291c:	6a13      	ldr	r3, [r2, #32]
 800291e:	2101      	movs	r1, #1
 8002920:	430b      	orrs	r3, r1
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	e7d1      	b.n	80028ca <HAL_RCC_OscConfig+0x21e>
 8002926:	2b05      	cmp	r3, #5
 8002928:	d009      	beq.n	800293e <HAL_RCC_OscConfig+0x292>
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800292c:	6a1a      	ldr	r2, [r3, #32]
 800292e:	2101      	movs	r1, #1
 8002930:	438a      	bics	r2, r1
 8002932:	621a      	str	r2, [r3, #32]
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	3103      	adds	r1, #3
 8002938:	438a      	bics	r2, r1
 800293a:	621a      	str	r2, [r3, #32]
 800293c:	e7c5      	b.n	80028ca <HAL_RCC_OscConfig+0x21e>
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002940:	6a1a      	ldr	r2, [r3, #32]
 8002942:	2104      	movs	r1, #4
 8002944:	430a      	orrs	r2, r1
 8002946:	621a      	str	r2, [r3, #32]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	3903      	subs	r1, #3
 800294c:	430a      	orrs	r2, r1
 800294e:	621a      	str	r2, [r3, #32]
 8002950:	e7bb      	b.n	80028ca <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7ff fa47 	bl	8001de4 <HAL_GetTick>
 8002956:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	079b      	lsls	r3, r3, #30
 800295e:	d507      	bpl.n	8002970 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7ff fa40 	bl	8001de4 <HAL_GetTick>
 8002964:	1b80      	subs	r0, r0, r6
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCC_OscConfig+0x324>)
 8002968:	4298      	cmp	r0, r3
 800296a:	d9f5      	bls.n	8002958 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800296c:	2003      	movs	r0, #3
 800296e:	e0b9      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002970:	2d01      	cmp	r5, #1
 8002972:	d01e      	beq.n	80029b2 <HAL_RCC_OscConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	06db      	lsls	r3, r3, #27
 8002978:	d55a      	bpl.n	8002a30 <HAL_RCC_OscConfig+0x384>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800297a:	6963      	ldr	r3, [r4, #20]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d02b      	beq.n	80029d8 <HAL_RCC_OscConfig+0x32c>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002980:	3305      	adds	r3, #5
 8002982:	d049      	beq.n	8002a18 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 8002986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002988:	2104      	movs	r1, #4
 800298a:	430a      	orrs	r2, r1
 800298c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800298e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002990:	3903      	subs	r1, #3
 8002992:	438a      	bics	r2, r1
 8002994:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7ff fa25 	bl	8001de4 <HAL_GetTick>
 800299a:	0005      	movs	r5, r0
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	079b      	lsls	r3, r3, #30
 80029a2:	d545      	bpl.n	8002a30 <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029a4:	f7ff fa1e 	bl	8001de4 <HAL_GetTick>
 80029a8:	1b40      	subs	r0, r0, r5
 80029aa:	2802      	cmp	r0, #2
 80029ac:	d9f6      	bls.n	800299c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029ae:	2003      	movs	r0, #3
 80029b0:	e098      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <HAL_RCC_OscConfig+0x314>)
 80029b4:	69d3      	ldr	r3, [r2, #28]
 80029b6:	4907      	ldr	r1, [pc, #28]	; (80029d4 <HAL_RCC_OscConfig+0x328>)
 80029b8:	400b      	ands	r3, r1
 80029ba:	61d3      	str	r3, [r2, #28]
 80029bc:	e7da      	b.n	8002974 <HAL_RCC_OscConfig+0x2c8>
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	40021000 	.word	0x40021000
 80029c4:	fffeffff 	.word	0xfffeffff
 80029c8:	fffbffff 	.word	0xfffbffff
 80029cc:	40007000 	.word	0x40007000
 80029d0:	00001388 	.word	0x00001388
 80029d4:	efffffff 	.word	0xefffffff
      __HAL_RCC_HSI14ADC_DISABLE();
 80029d8:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 80029da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029dc:	2104      	movs	r1, #4
 80029de:	430a      	orrs	r2, r1
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80029e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e4:	3903      	subs	r1, #3
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80029ea:	f7ff f9fb 	bl	8001de4 <HAL_GetTick>
 80029ee:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029f0:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	079b      	lsls	r3, r3, #30
 80029f6:	d406      	bmi.n	8002a06 <HAL_RCC_OscConfig+0x35a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029f8:	f7ff f9f4 	bl	8001de4 <HAL_GetTick>
 80029fc:	1b40      	subs	r0, r0, r5
 80029fe:	2802      	cmp	r0, #2
 8002a00:	d9f6      	bls.n	80029f0 <HAL_RCC_OscConfig+0x344>
          return HAL_TIMEOUT;
 8002a02:	2003      	movs	r0, #3
 8002a04:	e06e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a06:	4939      	ldr	r1, [pc, #228]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002a08:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8002a0a:	22f8      	movs	r2, #248	; 0xf8
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	69a2      	ldr	r2, [r4, #24]
 8002a10:	00d2      	lsls	r2, r2, #3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	634b      	str	r3, [r1, #52]	; 0x34
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0x384>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a18:	4a34      	ldr	r2, [pc, #208]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002a1a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	438b      	bics	r3, r1
 8002a20:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a22:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a24:	31f4      	adds	r1, #244	; 0xf4
 8002a26:	438b      	bics	r3, r1
 8002a28:	69a1      	ldr	r1, [r4, #24]
 8002a2a:	00c9      	lsls	r1, r1, #3
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a30:	6a23      	ldr	r3, [r4, #32]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d055      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x436>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a36:	4a2d      	ldr	r2, [pc, #180]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002a38:	6851      	ldr	r1, [r2, #4]
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	2a08      	cmp	r2, #8
 8002a40:	d052      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x43c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d012      	beq.n	8002a6c <HAL_RCC_OscConfig+0x3c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4a29      	ldr	r2, [pc, #164]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002a48:	6813      	ldr	r3, [r2, #0]
 8002a4a:	4929      	ldr	r1, [pc, #164]	; (8002af0 <HAL_RCC_OscConfig+0x444>)
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7ff f9c8 	bl	8001de4 <HAL_GetTick>
 8002a54:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	019b      	lsls	r3, r3, #6
 8002a5c:	d53d      	bpl.n	8002ada <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7ff f9c1 	bl	8001de4 <HAL_GetTick>
 8002a62:	1b00      	subs	r0, r0, r4
 8002a64:	2802      	cmp	r0, #2
 8002a66:	d9f6      	bls.n	8002a56 <HAL_RCC_OscConfig+0x3aa>
          {
            return HAL_TIMEOUT;
 8002a68:	2003      	movs	r0, #3
 8002a6a:	e03b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_DISABLE();
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	491f      	ldr	r1, [pc, #124]	; (8002af0 <HAL_RCC_OscConfig+0x444>)
 8002a72:	400b      	ands	r3, r1
 8002a74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a76:	f7ff f9b5 	bl	8001de4 <HAL_GetTick>
 8002a7a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	d506      	bpl.n	8002a92 <HAL_RCC_OscConfig+0x3e6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a84:	f7ff f9ae 	bl	8001de4 <HAL_GetTick>
 8002a88:	1b40      	subs	r0, r0, r5
 8002a8a:	2802      	cmp	r0, #2
 8002a8c:	d9f6      	bls.n	8002a7c <HAL_RCC_OscConfig+0x3d0>
            return HAL_TIMEOUT;
 8002a8e:	2003      	movs	r0, #3
 8002a90:	e028      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a92:	4b16      	ldr	r3, [pc, #88]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	210f      	movs	r1, #15
 8002a98:	438a      	bics	r2, r1
 8002a9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4914      	ldr	r1, [pc, #80]	; (8002af4 <HAL_RCC_OscConfig+0x448>)
 8002aa4:	400a      	ands	r2, r1
 8002aa6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002aa8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002aaa:	4301      	orrs	r1, r0
 8002aac:	430a      	orrs	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ab0:	6819      	ldr	r1, [r3, #0]
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0452      	lsls	r2, r2, #17
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002aba:	f7ff f993 	bl	8001de4 <HAL_GetTick>
 8002abe:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_RCC_OscConfig+0x440>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	019b      	lsls	r3, r3, #6
 8002ac6:	d406      	bmi.n	8002ad6 <HAL_RCC_OscConfig+0x42a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7ff f98c 	bl	8001de4 <HAL_GetTick>
 8002acc:	1b00      	subs	r0, r0, r4
 8002ace:	2802      	cmp	r0, #2
 8002ad0:	d9f6      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x414>
            return HAL_TIMEOUT;
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	e006      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e004      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
 8002ada:	2000      	movs	r0, #0
 8002adc:	e002      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
        return HAL_ERROR;
 8002ade:	2001      	movs	r0, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
  return HAL_OK;
 8002ae2:	2000      	movs	r0, #0
}
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
 8002aea:	e7fb      	b.n	8002ae4 <HAL_RCC_OscConfig+0x438>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	feffffff 	.word	0xfeffffff
 8002af4:	ffc2ffff 	.word	0xffc2ffff

08002af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b530      	push	{r4, r5, lr}
 8002afa:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002afc:	aa04      	add	r2, sp, #16
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002b00:	0018      	movs	r0, r3
 8002b02:	c832      	ldmia	r0!, {r1, r4, r5}
 8002b04:	c232      	stmia	r2!, {r1, r4, r5}
 8002b06:	0011      	movs	r1, r2
 8002b08:	6802      	ldr	r2, [r0, #0]
 8002b0a:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002b0c:	466a      	mov	r2, sp
 8002b0e:	3310      	adds	r3, #16
 8002b10:	cb13      	ldmia	r3!, {r0, r1, r4}
 8002b12:	c213      	stmia	r2!, {r0, r1, r4}
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x60>)
 8002b1a:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d113      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b24:	0c91      	lsrs	r1, r2, #18
 8002b26:	3307      	adds	r3, #7
 8002b28:	4019      	ands	r1, r3
 8002b2a:	a804      	add	r0, sp, #16
 8002b2c:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x60>)
 8002b30:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002b32:	400b      	ands	r3, r1
 8002b34:	4669      	mov	r1, sp
 8002b36:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b38:	03d3      	lsls	r3, r2, #15
 8002b3a:	d402      	bmi.n	8002b42 <HAL_RCC_GetSysClockFreq+0x4a>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8002b3c:	4807      	ldr	r0, [pc, #28]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x64>)
 8002b3e:	4360      	muls	r0, r4
 8002b40:	e005      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002b42:	4807      	ldr	r0, [pc, #28]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x68>)
 8002b44:	f7fd fae0 	bl	8000108 <__udivsi3>
 8002b48:	4360      	muls	r0, r4
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002b4c:	4804      	ldr	r0, [pc, #16]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002b4e:	b009      	add	sp, #36	; 0x24
 8002b50:	bd30      	pop	{r4, r5, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	080053e8 	.word	0x080053e8
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	003d0900 	.word	0x003d0900
 8002b60:	007a1200 	.word	0x007a1200

08002b64 <HAL_RCC_ClockConfig>:
{
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	0005      	movs	r5, r0
 8002b68:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002b6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_RCC_ClockConfig+0x13c>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	4013      	ands	r3, r2
 8002b72:	428b      	cmp	r3, r1
 8002b74:	d20b      	bcs.n	8002b8e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	494a      	ldr	r1, [pc, #296]	; (8002ca0 <HAL_RCC_ClockConfig+0x13c>)
 8002b78:	680b      	ldr	r3, [r1, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4393      	bics	r3, r2
 8002b7e:	4323      	orrs	r3, r4
 8002b80:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b82:	680b      	ldr	r3, [r1, #0]
 8002b84:	401a      	ands	r2, r3
 8002b86:	4294      	cmp	r4, r2
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	e085      	b.n	8002c9a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	079b      	lsls	r3, r3, #30
 8002b92:	d506      	bpl.n	8002ba2 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4a43      	ldr	r2, [pc, #268]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002b96:	6853      	ldr	r3, [r2, #4]
 8002b98:	21f0      	movs	r1, #240	; 0xf0
 8002b9a:	438b      	bics	r3, r1
 8002b9c:	68a9      	ldr	r1, [r5, #8]
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	682b      	ldr	r3, [r5, #0]
 8002ba4:	07db      	lsls	r3, r3, #31
 8002ba6:	d54c      	bpl.n	8002c42 <HAL_RCC_ClockConfig+0xde>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba8:	686b      	ldr	r3, [r5, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d021      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x8e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d025      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x9a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	0792      	lsls	r2, r2, #30
 8002bb8:	d400      	bmi.n	8002bbc <HAL_RCC_ClockConfig+0x58>
 8002bba:	e06f      	b.n	8002c9c <HAL_RCC_ClockConfig+0x138>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbc:	4939      	ldr	r1, [pc, #228]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002bbe:	684a      	ldr	r2, [r1, #4]
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	4382      	bics	r2, r0
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002bc8:	f7ff f90c 	bl	8001de4 <HAL_GetTick>
 8002bcc:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	686b      	ldr	r3, [r5, #4]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d01a      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xa6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d026      	beq.n	8002c26 <HAL_RCC_ClockConfig+0xc2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd8:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	220c      	movs	r2, #12
 8002bde:	421a      	tst	r2, r3
 8002be0:	d02f      	beq.n	8002c42 <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be2:	f7ff f8ff 	bl	8001de4 <HAL_GetTick>
 8002be6:	1b80      	subs	r0, r0, r6
 8002be8:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_RCC_ClockConfig+0x144>)
 8002bea:	4298      	cmp	r0, r3
 8002bec:	d9f4      	bls.n	8002bd8 <HAL_RCC_ClockConfig+0x74>
          return HAL_TIMEOUT;
 8002bee:	2003      	movs	r0, #3
 8002bf0:	e053      	b.n	8002c9a <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4a2c      	ldr	r2, [pc, #176]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	0392      	lsls	r2, r2, #14
 8002bf8:	d4e0      	bmi.n	8002bbc <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	e04d      	b.n	8002c9a <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	0192      	lsls	r2, r2, #6
 8002c04:	d4da      	bmi.n	8002bbc <HAL_RCC_ClockConfig+0x58>
        return HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
 8002c08:	e047      	b.n	8002c9a <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	230c      	movs	r3, #12
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d015      	beq.n	8002c42 <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c16:	f7ff f8e5 	bl	8001de4 <HAL_GetTick>
 8002c1a:	1b80      	subs	r0, r0, r6
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <HAL_RCC_ClockConfig+0x144>)
 8002c1e:	4298      	cmp	r0, r3
 8002c20:	d9f3      	bls.n	8002c0a <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 8002c22:	2003      	movs	r0, #3
 8002c24:	e039      	b.n	8002c9a <HAL_RCC_ClockConfig+0x136>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d007      	beq.n	8002c42 <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c32:	f7ff f8d7 	bl	8001de4 <HAL_GetTick>
 8002c36:	1b80      	subs	r0, r0, r6
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_RCC_ClockConfig+0x144>)
 8002c3a:	4298      	cmp	r0, r3
 8002c3c:	d9f3      	bls.n	8002c26 <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 8002c3e:	2003      	movs	r0, #3
 8002c40:	e02b      	b.n	8002c9a <HAL_RCC_ClockConfig+0x136>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_RCC_ClockConfig+0x13c>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	2301      	movs	r3, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	429c      	cmp	r4, r3
 8002c4c:	d20b      	bcs.n	8002c66 <HAL_RCC_ClockConfig+0x102>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4e:	4914      	ldr	r1, [pc, #80]	; (8002ca0 <HAL_RCC_ClockConfig+0x13c>)
 8002c50:	680b      	ldr	r3, [r1, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4393      	bics	r3, r2
 8002c56:	4323      	orrs	r3, r4
 8002c58:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c5a:	680b      	ldr	r3, [r1, #0]
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	4294      	cmp	r4, r2
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
 8002c64:	e019      	b.n	8002c9a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	075b      	lsls	r3, r3, #29
 8002c6a:	d506      	bpl.n	8002c7a <HAL_RCC_ClockConfig+0x116>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002c6e:	6853      	ldr	r3, [r2, #4]
 8002c70:	490e      	ldr	r1, [pc, #56]	; (8002cac <HAL_RCC_ClockConfig+0x148>)
 8002c72:	400b      	ands	r3, r1
 8002c74:	68e9      	ldr	r1, [r5, #12]
 8002c76:	430b      	orrs	r3, r1
 8002c78:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c7a:	f7ff ff3d 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002c7e:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x140>)
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	0912      	lsrs	r2, r2, #4
 8002c84:	230f      	movs	r3, #15
 8002c86:	4013      	ands	r3, r2
 8002c88:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x14c>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	40d8      	lsrs	r0, r3
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x150>)
 8002c90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f001 fe8e 	bl	80049b4 <HAL_InitTick>
  return HAL_OK;
 8002c98:	2000      	movs	r0, #0
}
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	e7fc      	b.n	8002c9a <HAL_RCC_ClockConfig+0x136>
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	00001388 	.word	0x00001388
 8002cac:	fffff8ff 	.word	0xfffff8ff
 8002cb0:	08005504 	.word	0x08005504
 8002cb4:	20000010 	.word	0x20000010

08002cb8 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <HAL_RCC_GetHCLKFreq+0x8>)
 8002cba:	6818      	ldr	r0, [r3, #0]
}
 8002cbc:	4770      	bx	lr
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	20000010 	.word	0x20000010

08002cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002cc6:	f7ff fff7 	bl	8002cb8 <HAL_RCC_GetHCLKFreq>
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	0a12      	lsrs	r2, r2, #8
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	4a02      	ldr	r2, [pc, #8]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	40d8      	lsrs	r0, r3
}    
 8002cda:	bd10      	pop	{r4, pc}
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08005514 	.word	0x08005514

08002ce4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ce4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_GetClockConfig+0x30>)
 8002cec:	685c      	ldr	r4, [r3, #4]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	4022      	ands	r2, r4
 8002cf2:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002cf4:	685c      	ldr	r4, [r3, #4]
 8002cf6:	22f0      	movs	r2, #240	; 0xf0
 8002cf8:	4022      	ands	r2, r4
 8002cfa:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	22e0      	movs	r2, #224	; 0xe0
 8002d00:	00d2      	lsls	r2, r2, #3
 8002d02:	4013      	ands	r3, r2
 8002d04:	60c3      	str	r3, [r0, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_RCC_GetClockConfig+0x34>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
}
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40022000 	.word	0x40022000

08002d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d1c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1e:	6a03      	ldr	r3, [r0, #32]
 8002d20:	2201      	movs	r2, #1
 8002d22:	4393      	bics	r3, r2
 8002d24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d2c:	2573      	movs	r5, #115	; 0x73
 8002d2e:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d30:	680d      	ldr	r5, [r1, #0]
 8002d32:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d34:	2502      	movs	r5, #2
 8002d36:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d38:	688d      	ldr	r5, [r1, #8]
 8002d3a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d3c:	4d15      	ldr	r5, [pc, #84]	; (8002d94 <TIM_OC1_SetConfig+0x78>)
 8002d3e:	42a8      	cmp	r0, r5
 8002d40:	d020      	beq.n	8002d84 <TIM_OC1_SetConfig+0x68>
 8002d42:	4d15      	ldr	r5, [pc, #84]	; (8002d98 <TIM_OC1_SetConfig+0x7c>)
 8002d44:	42a8      	cmp	r0, r5
 8002d46:	d01d      	beq.n	8002d84 <TIM_OC1_SetConfig+0x68>
 8002d48:	4d14      	ldr	r5, [pc, #80]	; (8002d9c <TIM_OC1_SetConfig+0x80>)
 8002d4a:	42a8      	cmp	r0, r5
 8002d4c:	d01a      	beq.n	8002d84 <TIM_OC1_SetConfig+0x68>
 8002d4e:	4d14      	ldr	r5, [pc, #80]	; (8002da0 <TIM_OC1_SetConfig+0x84>)
 8002d50:	42a8      	cmp	r0, r5
 8002d52:	d017      	beq.n	8002d84 <TIM_OC1_SetConfig+0x68>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002d54:	4d0f      	ldr	r5, [pc, #60]	; (8002d94 <TIM_OC1_SetConfig+0x78>)
 8002d56:	42a8      	cmp	r0, r5
 8002d58:	d008      	beq.n	8002d6c <TIM_OC1_SetConfig+0x50>
 8002d5a:	4d0f      	ldr	r5, [pc, #60]	; (8002d98 <TIM_OC1_SetConfig+0x7c>)
 8002d5c:	42a8      	cmp	r0, r5
 8002d5e:	d005      	beq.n	8002d6c <TIM_OC1_SetConfig+0x50>
 8002d60:	4d0e      	ldr	r5, [pc, #56]	; (8002d9c <TIM_OC1_SetConfig+0x80>)
 8002d62:	42a8      	cmp	r0, r5
 8002d64:	d002      	beq.n	8002d6c <TIM_OC1_SetConfig+0x50>
 8002d66:	4d0e      	ldr	r5, [pc, #56]	; (8002da0 <TIM_OC1_SetConfig+0x84>)
 8002d68:	42a8      	cmp	r0, r5
 8002d6a:	d105      	bne.n	8002d78 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d6c:	4d0d      	ldr	r5, [pc, #52]	; (8002da4 <TIM_OC1_SetConfig+0x88>)
 8002d6e:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d70:	694d      	ldr	r5, [r1, #20]
 8002d72:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d74:	698d      	ldr	r5, [r1, #24]
 8002d76:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d78:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d7a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d7c:	684a      	ldr	r2, [r1, #4]
 8002d7e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d80:	6203      	str	r3, [r0, #32]
}
 8002d82:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d84:	2508      	movs	r5, #8
 8002d86:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 8002d88:	68cd      	ldr	r5, [r1, #12]
 8002d8a:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d8c:	2504      	movs	r5, #4
 8002d8e:	43ab      	bics	r3, r5
 8002d90:	e7e0      	b.n	8002d54 <TIM_OC1_SetConfig+0x38>
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40014400 	.word	0x40014400
 8002da0:	40014800 	.word	0x40014800
 8002da4:	fffffcff 	.word	0xfffffcff

08002da8 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002da8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002daa:	6a03      	ldr	r3, [r0, #32]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <TIM_OC3_SetConfig+0x70>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002db2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002db8:	3275      	adds	r2, #117	; 0x75
 8002dba:	32ff      	adds	r2, #255	; 0xff
 8002dbc:	4394      	bics	r4, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dbe:	680a      	ldr	r2, [r1, #0]
 8002dc0:	4314      	orrs	r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dc2:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <TIM_OC3_SetConfig+0x74>)
 8002dc4:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dc6:	688a      	ldr	r2, [r1, #8]
 8002dc8:	0212      	lsls	r2, r2, #8
 8002dca:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <TIM_OC3_SetConfig+0x78>)
 8002dce:	4290      	cmp	r0, r2
 8002dd0:	d019      	beq.n	8002e06 <TIM_OC3_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd2:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <TIM_OC3_SetConfig+0x78>)
 8002dd4:	4290      	cmp	r0, r2
 8002dd6:	d008      	beq.n	8002dea <TIM_OC3_SetConfig+0x42>
 8002dd8:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <TIM_OC3_SetConfig+0x7c>)
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	d005      	beq.n	8002dea <TIM_OC3_SetConfig+0x42>
 8002dde:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <TIM_OC3_SetConfig+0x80>)
 8002de0:	4290      	cmp	r0, r2
 8002de2:	d002      	beq.n	8002dea <TIM_OC3_SetConfig+0x42>
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <TIM_OC3_SetConfig+0x84>)
 8002de6:	4290      	cmp	r0, r2
 8002de8:	d107      	bne.n	8002dfa <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <TIM_OC3_SetConfig+0x88>)
 8002dec:	4015      	ands	r5, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dee:	694a      	ldr	r2, [r1, #20]
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002df4:	698a      	ldr	r2, [r1, #24]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	4315      	orrs	r5, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dfa:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dfc:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dfe:	684a      	ldr	r2, [r1, #4]
 8002e00:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e02:	6203      	str	r3, [r0, #32]
}
 8002e04:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e06:	4a0b      	ldr	r2, [pc, #44]	; (8002e34 <TIM_OC3_SetConfig+0x8c>)
 8002e08:	4013      	ands	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e0a:	68ca      	ldr	r2, [r1, #12]
 8002e0c:	0212      	lsls	r2, r2, #8
 8002e0e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e10:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <TIM_OC3_SetConfig+0x90>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	e7dd      	b.n	8002dd2 <TIM_OC3_SetConfig+0x2a>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	fffffeff 	.word	0xfffffeff
 8002e1c:	fffffdff 	.word	0xfffffdff
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800
 8002e30:	ffffcfff 	.word	0xffffcfff
 8002e34:	fffff7ff 	.word	0xfffff7ff
 8002e38:	fffffbff 	.word	0xfffffbff

08002e3c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e3c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e3e:	6a03      	ldr	r3, [r0, #32]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <TIM_OC4_SetConfig+0x54>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e46:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e48:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e4a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e4c:	4c11      	ldr	r4, [pc, #68]	; (8002e94 <TIM_OC4_SetConfig+0x58>)
 8002e4e:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e50:	680c      	ldr	r4, [r1, #0]
 8002e52:	0224      	lsls	r4, r4, #8
 8002e54:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e56:	4c10      	ldr	r4, [pc, #64]	; (8002e98 <TIM_OC4_SetConfig+0x5c>)
 8002e58:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e5a:	688c      	ldr	r4, [r1, #8]
 8002e5c:	0324      	lsls	r4, r4, #12
 8002e5e:	4323      	orrs	r3, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002e60:	4c0e      	ldr	r4, [pc, #56]	; (8002e9c <TIM_OC4_SetConfig+0x60>)
 8002e62:	42a0      	cmp	r0, r4
 8002e64:	d008      	beq.n	8002e78 <TIM_OC4_SetConfig+0x3c>
 8002e66:	4c0e      	ldr	r4, [pc, #56]	; (8002ea0 <TIM_OC4_SetConfig+0x64>)
 8002e68:	42a0      	cmp	r0, r4
 8002e6a:	d005      	beq.n	8002e78 <TIM_OC4_SetConfig+0x3c>
 8002e6c:	4c0d      	ldr	r4, [pc, #52]	; (8002ea4 <TIM_OC4_SetConfig+0x68>)
 8002e6e:	42a0      	cmp	r0, r4
 8002e70:	d002      	beq.n	8002e78 <TIM_OC4_SetConfig+0x3c>
 8002e72:	4c0d      	ldr	r4, [pc, #52]	; (8002ea8 <TIM_OC4_SetConfig+0x6c>)
 8002e74:	42a0      	cmp	r0, r4
 8002e76:	d104      	bne.n	8002e82 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e78:	4c0c      	ldr	r4, [pc, #48]	; (8002eac <TIM_OC4_SetConfig+0x70>)
 8002e7a:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e7c:	694d      	ldr	r5, [r1, #20]
 8002e7e:	01ad      	lsls	r5, r5, #6
 8002e80:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e82:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e84:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e86:	684a      	ldr	r2, [r1, #4]
 8002e88:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8a:	6203      	str	r3, [r0, #32]
}
 8002e8c:	bd30      	pop	{r4, r5, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	ffffefff 	.word	0xffffefff
 8002e94:	ffff8cff 	.word	0xffff8cff
 8002e98:	ffffdfff 	.word	0xffffdfff
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	40014400 	.word	0x40014400
 8002ea8:	40014800 	.word	0x40014800
 8002eac:	ffffbfff 	.word	0xffffbfff

08002eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb4:	6a04      	ldr	r4, [r0, #32]
 8002eb6:	2501      	movs	r5, #1
 8002eb8:	43ac      	bics	r4, r5
 8002eba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ebc:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ebe:	35ef      	adds	r5, #239	; 0xef
 8002ec0:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec6:	240a      	movs	r4, #10
 8002ec8:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8002eca:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ecc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ece:	6201      	str	r1, [r0, #32]
}
 8002ed0:	bd30      	pop	{r4, r5, pc}
	...

08002ed4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed6:	6a03      	ldr	r3, [r0, #32]
 8002ed8:	2410      	movs	r4, #16
 8002eda:	43a3      	bics	r3, r4
 8002edc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ede:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002ee0:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ee2:	4d05      	ldr	r5, [pc, #20]	; (8002ef8 <TIM_TI2_ConfigInputStage+0x24>)
 8002ee4:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee6:	0312      	lsls	r2, r2, #12
 8002ee8:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eea:	24a0      	movs	r4, #160	; 0xa0
 8002eec:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eee:	0109      	lsls	r1, r1, #4
 8002ef0:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ef4:	6201      	str	r1, [r0, #32]
}
 8002ef6:	bd30      	pop	{r4, r5, pc}
 8002ef8:	ffff0fff 	.word	0xffff0fff

08002efc <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002efc:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002efe:	2270      	movs	r2, #112	; 0x70
 8002f00:	4393      	bics	r3, r2
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002f02:	2207      	movs	r2, #7
 8002f04:	4311      	orrs	r1, r2
 8002f06:	b289      	uxth	r1, r1
 8002f08:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002f0a:	6081      	str	r1, [r0, #8]
}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f0e:	6803      	ldr	r3, [r0, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	2101      	movs	r1, #1
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002f18:	6802      	ldr	r2, [r0, #0]
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	2000      	movs	r0, #0
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_PWM_MspInit>:
}
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_IC_CaptureCallback>:
}
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIM_TriggerCallback>:
}
 8002f2c:	4770      	bx	lr

08002f2e <HAL_TIM_IRQHandler>:
{
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f32:	6803      	ldr	r3, [r0, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	0792      	lsls	r2, r2, #30
 8002f38:	d50f      	bpl.n	8002f5a <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	0792      	lsls	r2, r2, #30
 8002f3e:	d50c      	bpl.n	8002f5a <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f40:	2203      	movs	r2, #3
 8002f42:	4252      	negs	r2, r2
 8002f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f4a:	6803      	ldr	r3, [r0, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	079b      	lsls	r3, r3, #30
 8002f50:	d063      	beq.n	800301a <HAL_TIM_IRQHandler+0xec>
          HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	f7ff ffe9 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	2300      	movs	r3, #0
 8002f58:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	0752      	lsls	r2, r2, #29
 8002f60:	d512      	bpl.n	8002f88 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	0752      	lsls	r2, r2, #29
 8002f66:	d50f      	bpl.n	8002f88 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f68:	2205      	movs	r2, #5
 8002f6a:	4252      	negs	r2, r2
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	23c0      	movs	r3, #192	; 0xc0
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	421a      	tst	r2, r3
 8002f7c:	d053      	beq.n	8003026 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	0020      	movs	r0, r4
 8002f80:	f7ff ffd2 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f84:	2300      	movs	r3, #0
 8002f86:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	0712      	lsls	r2, r2, #28
 8002f8e:	d510      	bpl.n	8002fb2 <HAL_TIM_IRQHandler+0x84>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	0712      	lsls	r2, r2, #28
 8002f94:	d50d      	bpl.n	8002fb2 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f96:	2209      	movs	r2, #9
 8002f98:	4252      	negs	r2, r2
 8002f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	079b      	lsls	r3, r3, #30
 8002fa6:	d045      	beq.n	8003034 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa8:	0020      	movs	r0, r4
 8002faa:	f7ff ffbd 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	06d2      	lsls	r2, r2, #27
 8002fb8:	d512      	bpl.n	8002fe0 <HAL_TIM_IRQHandler+0xb2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	06d2      	lsls	r2, r2, #27
 8002fbe:	d50f      	bpl.n	8002fe0 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc0:	2211      	movs	r2, #17
 8002fc2:	4252      	negs	r2, r2
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	23c0      	movs	r3, #192	; 0xc0
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	421a      	tst	r2, r3
 8002fd4:	d035      	beq.n	8003042 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	0020      	movs	r0, r4
 8002fd8:	f7ff ffa6 	bl	8002f28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fe0:	6823      	ldr	r3, [r4, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	07d2      	lsls	r2, r2, #31
 8002fe6:	d502      	bpl.n	8002fee <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	07d2      	lsls	r2, r2, #31
 8002fec:	d430      	bmi.n	8003050 <HAL_TIM_IRQHandler+0x122>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	0612      	lsls	r2, r2, #24
 8002ff4:	d502      	bpl.n	8002ffc <HAL_TIM_IRQHandler+0xce>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	0612      	lsls	r2, r2, #24
 8002ffa:	d430      	bmi.n	800305e <HAL_TIM_IRQHandler+0x130>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	0652      	lsls	r2, r2, #25
 8003002:	d502      	bpl.n	800300a <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	0652      	lsls	r2, r2, #25
 8003008:	d430      	bmi.n	800306c <HAL_TIM_IRQHandler+0x13e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	0692      	lsls	r2, r2, #26
 8003010:	d502      	bpl.n	8003018 <HAL_TIM_IRQHandler+0xea>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	0692      	lsls	r2, r2, #26
 8003016:	d430      	bmi.n	800307a <HAL_TIM_IRQHandler+0x14c>
}
 8003018:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	f7ff ff84 	bl	8002f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301e:	0020      	movs	r0, r4
 8003020:	f7ff ff83 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003024:	e797      	b.n	8002f56 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	0020      	movs	r0, r4
 8003028:	f7ff ff7d 	bl	8002f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	0020      	movs	r0, r4
 800302e:	f7ff ff7c 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003032:	e7a7      	b.n	8002f84 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003034:	0020      	movs	r0, r4
 8003036:	f7ff ff76 	bl	8002f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303a:	0020      	movs	r0, r4
 800303c:	f7ff ff75 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
 8003040:	e7b5      	b.n	8002fae <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	0020      	movs	r0, r4
 8003044:	f7ff ff6f 	bl	8002f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	0020      	movs	r0, r4
 800304a:	f7ff ff6e 	bl	8002f2a <HAL_TIM_PWM_PulseFinishedCallback>
 800304e:	e7c5      	b.n	8002fdc <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003050:	2202      	movs	r2, #2
 8003052:	4252      	negs	r2, r2
 8003054:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003056:	0020      	movs	r0, r4
 8003058:	f001 fc80 	bl	800495c <HAL_TIM_PeriodElapsedCallback>
 800305c:	e7c7      	b.n	8002fee <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800305e:	2281      	movs	r2, #129	; 0x81
 8003060:	4252      	negs	r2, r2
 8003062:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003064:	0020      	movs	r0, r4
 8003066:	f000 fa4c 	bl	8003502 <HAL_TIMEx_BreakCallback>
 800306a:	e7c7      	b.n	8002ffc <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800306c:	2241      	movs	r2, #65	; 0x41
 800306e:	4252      	negs	r2, r2
 8003070:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003072:	0020      	movs	r0, r4
 8003074:	f7ff ff5a 	bl	8002f2c <HAL_TIM_TriggerCallback>
 8003078:	e7c7      	b.n	800300a <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800307a:	2221      	movs	r2, #33	; 0x21
 800307c:	4252      	negs	r2, r2
 800307e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003080:	0020      	movs	r0, r4
 8003082:	f000 fa3d 	bl	8003500 <HAL_TIMEx_CommutationCallback>
}
 8003086:	e7c7      	b.n	8003018 <HAL_TIM_IRQHandler+0xea>

08003088 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003088:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800308a:	4a21      	ldr	r2, [pc, #132]	; (8003110 <TIM_Base_SetConfig+0x88>)
 800308c:	4290      	cmp	r0, r2
 800308e:	d03a      	beq.n	8003106 <TIM_Base_SetConfig+0x7e>
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	05d2      	lsls	r2, r2, #23
 8003094:	4290      	cmp	r0, r2
 8003096:	d036      	beq.n	8003106 <TIM_Base_SetConfig+0x7e>
 8003098:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <TIM_Base_SetConfig+0x8c>)
 800309a:	4290      	cmp	r0, r2
 800309c:	d033      	beq.n	8003106 <TIM_Base_SetConfig+0x7e>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <TIM_Base_SetConfig+0x88>)
 80030a0:	4290      	cmp	r0, r2
 80030a2:	d012      	beq.n	80030ca <TIM_Base_SetConfig+0x42>
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	05d2      	lsls	r2, r2, #23
 80030a8:	4290      	cmp	r0, r2
 80030aa:	d00e      	beq.n	80030ca <TIM_Base_SetConfig+0x42>
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <TIM_Base_SetConfig+0x8c>)
 80030ae:	4290      	cmp	r0, r2
 80030b0:	d00b      	beq.n	80030ca <TIM_Base_SetConfig+0x42>
 80030b2:	4a19      	ldr	r2, [pc, #100]	; (8003118 <TIM_Base_SetConfig+0x90>)
 80030b4:	4290      	cmp	r0, r2
 80030b6:	d008      	beq.n	80030ca <TIM_Base_SetConfig+0x42>
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <TIM_Base_SetConfig+0x94>)
 80030ba:	4290      	cmp	r0, r2
 80030bc:	d005      	beq.n	80030ca <TIM_Base_SetConfig+0x42>
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <TIM_Base_SetConfig+0x98>)
 80030c0:	4290      	cmp	r0, r2
 80030c2:	d002      	beq.n	80030ca <TIM_Base_SetConfig+0x42>
 80030c4:	4a17      	ldr	r2, [pc, #92]	; (8003124 <TIM_Base_SetConfig+0x9c>)
 80030c6:	4290      	cmp	r0, r2
 80030c8:	d103      	bne.n	80030d2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <TIM_Base_SetConfig+0xa0>)
 80030cc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ce:	68ca      	ldr	r2, [r1, #12]
 80030d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	4393      	bics	r3, r2
 80030d6:	694a      	ldr	r2, [r1, #20]
 80030d8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80030da:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030dc:	688b      	ldr	r3, [r1, #8]
 80030de:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80030e0:	680b      	ldr	r3, [r1, #0]
 80030e2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <TIM_Base_SetConfig+0x88>)
 80030e6:	4298      	cmp	r0, r3
 80030e8:	d008      	beq.n	80030fc <TIM_Base_SetConfig+0x74>
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <TIM_Base_SetConfig+0x94>)
 80030ec:	4298      	cmp	r0, r3
 80030ee:	d005      	beq.n	80030fc <TIM_Base_SetConfig+0x74>
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <TIM_Base_SetConfig+0x98>)
 80030f2:	4298      	cmp	r0, r3
 80030f4:	d002      	beq.n	80030fc <TIM_Base_SetConfig+0x74>
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <TIM_Base_SetConfig+0x9c>)
 80030f8:	4298      	cmp	r0, r3
 80030fa:	d101      	bne.n	8003100 <TIM_Base_SetConfig+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
 80030fc:	690b      	ldr	r3, [r1, #16]
 80030fe:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003100:	2301      	movs	r3, #1
 8003102:	6143      	str	r3, [r0, #20]
}
 8003104:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003106:	2270      	movs	r2, #112	; 0x70
 8003108:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800310a:	684a      	ldr	r2, [r1, #4]
 800310c:	4313      	orrs	r3, r2
 800310e:	e7c6      	b.n	800309e <TIM_Base_SetConfig+0x16>
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40002000 	.word	0x40002000
 800311c:	40014000 	.word	0x40014000
 8003120:	40014400 	.word	0x40014400
 8003124:	40014800 	.word	0x40014800
 8003128:	fffffcff 	.word	0xfffffcff

0800312c <HAL_TIM_Base_Init>:
{
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8003130:	d014      	beq.n	800315c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003132:	233d      	movs	r3, #61	; 0x3d
 8003134:	5cc3      	ldrb	r3, [r0, r3]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800313a:	253d      	movs	r5, #61	; 0x3d
 800313c:	2302      	movs	r3, #2
 800313e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003140:	1d21      	adds	r1, r4, #4
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f7ff ffa0 	bl	8003088 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003148:	2301      	movs	r3, #1
 800314a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800314c:	2000      	movs	r0, #0
}
 800314e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003150:	2200      	movs	r2, #0
 8003152:	333c      	adds	r3, #60	; 0x3c
 8003154:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003156:	f001 fcab 	bl	8004ab0 <HAL_TIM_Base_MspInit>
 800315a:	e7ee      	b.n	800313a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800315c:	2001      	movs	r0, #1
 800315e:	e7f6      	b.n	800314e <HAL_TIM_Base_Init+0x22>

08003160 <HAL_TIM_PWM_Init>:
{
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8003164:	d014      	beq.n	8003190 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003166:	233d      	movs	r3, #61	; 0x3d
 8003168:	5cc3      	ldrb	r3, [r0, r3]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 800316e:	253d      	movs	r5, #61	; 0x3d
 8003170:	2302      	movs	r3, #2
 8003172:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003174:	1d21      	adds	r1, r4, #4
 8003176:	6820      	ldr	r0, [r4, #0]
 8003178:	f7ff ff86 	bl	8003088 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800317c:	2301      	movs	r3, #1
 800317e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003180:	2000      	movs	r0, #0
}
 8003182:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003184:	2200      	movs	r2, #0
 8003186:	333c      	adds	r3, #60	; 0x3c
 8003188:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800318a:	f7ff fecb 	bl	8002f24 <HAL_TIM_PWM_MspInit>
 800318e:	e7ee      	b.n	800316e <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8003190:	2001      	movs	r0, #1
 8003192:	e7f6      	b.n	8003182 <HAL_TIM_PWM_Init+0x22>

08003194 <TIM_OC2_SetConfig>:
{
 8003194:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003196:	6a03      	ldr	r3, [r0, #32]
 8003198:	2210      	movs	r2, #16
 800319a:	4393      	bics	r3, r2
 800319c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800319e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80031a0:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80031a2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a4:	4a17      	ldr	r2, [pc, #92]	; (8003204 <TIM_OC2_SetConfig+0x70>)
 80031a6:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a8:	680a      	ldr	r2, [r1, #0]
 80031aa:	0212      	lsls	r2, r2, #8
 80031ac:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80031ae:	2220      	movs	r2, #32
 80031b0:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031b2:	688a      	ldr	r2, [r1, #8]
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	4313      	orrs	r3, r2
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b8:	4a13      	ldr	r2, [pc, #76]	; (8003208 <TIM_OC2_SetConfig+0x74>)
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d019      	beq.n	80031f2 <TIM_OC2_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80031be:	4a12      	ldr	r2, [pc, #72]	; (8003208 <TIM_OC2_SetConfig+0x74>)
 80031c0:	4290      	cmp	r0, r2
 80031c2:	d008      	beq.n	80031d6 <TIM_OC2_SetConfig+0x42>
 80031c4:	4a11      	ldr	r2, [pc, #68]	; (800320c <TIM_OC2_SetConfig+0x78>)
 80031c6:	4290      	cmp	r0, r2
 80031c8:	d005      	beq.n	80031d6 <TIM_OC2_SetConfig+0x42>
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <TIM_OC2_SetConfig+0x7c>)
 80031cc:	4290      	cmp	r0, r2
 80031ce:	d002      	beq.n	80031d6 <TIM_OC2_SetConfig+0x42>
 80031d0:	4a10      	ldr	r2, [pc, #64]	; (8003214 <TIM_OC2_SetConfig+0x80>)
 80031d2:	4290      	cmp	r0, r2
 80031d4:	d107      	bne.n	80031e6 <TIM_OC2_SetConfig+0x52>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031d6:	4a10      	ldr	r2, [pc, #64]	; (8003218 <TIM_OC2_SetConfig+0x84>)
 80031d8:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031da:	694a      	ldr	r2, [r1, #20]
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031e0:	698a      	ldr	r2, [r1, #24]
 80031e2:	0092      	lsls	r2, r2, #2
 80031e4:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 80031e6:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80031e8:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80031ea:	684a      	ldr	r2, [r1, #4]
 80031ec:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80031ee:	6203      	str	r3, [r0, #32]
}
 80031f0:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	4393      	bics	r3, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f6:	68ca      	ldr	r2, [r1, #12]
 80031f8:	0112      	lsls	r2, r2, #4
 80031fa:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	4393      	bics	r3, r2
 8003200:	e7dd      	b.n	80031be <TIM_OC2_SetConfig+0x2a>
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	ffff8cff 	.word	0xffff8cff
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40014000 	.word	0x40014000
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800
 8003218:	fffff3ff 	.word	0xfffff3ff

0800321c <HAL_TIM_PWM_ConfigChannel>:
{
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	0004      	movs	r4, r0
 8003220:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8003222:	233c      	movs	r3, #60	; 0x3c
 8003224:	5cc3      	ldrb	r3, [r0, r3]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d069      	beq.n	80032fe <HAL_TIM_PWM_ConfigChannel+0xe2>
 800322a:	2101      	movs	r1, #1
 800322c:	233c      	movs	r3, #60	; 0x3c
 800322e:	54c1      	strb	r1, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	3101      	adds	r1, #1
 8003232:	3301      	adds	r3, #1
 8003234:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8003236:	2a04      	cmp	r2, #4
 8003238:	d037      	beq.n	80032aa <HAL_TIM_PWM_ConfigChannel+0x8e>
 800323a:	d919      	bls.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x54>
 800323c:	2a08      	cmp	r2, #8
 800323e:	d04a      	beq.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8003240:	2a0c      	cmp	r2, #12
 8003242:	d12a      	bne.n	800329a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003244:	0029      	movs	r1, r5
 8003246:	6800      	ldr	r0, [r0, #0]
 8003248:	f7ff fdf8 	bl	8002e3c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	69d1      	ldr	r1, [r2, #28]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	430b      	orrs	r3, r1
 8003256:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003258:	6822      	ldr	r2, [r4, #0]
 800325a:	69d3      	ldr	r3, [r2, #28]
 800325c:	4929      	ldr	r1, [pc, #164]	; (8003304 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 800325e:	400b      	ands	r3, r1
 8003260:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003262:	6821      	ldr	r1, [r4, #0]
 8003264:	69cb      	ldr	r3, [r1, #28]
 8003266:	692a      	ldr	r2, [r5, #16]
 8003268:	0212      	lsls	r2, r2, #8
 800326a:	4313      	orrs	r3, r2
 800326c:	61cb      	str	r3, [r1, #28]
    break;
 800326e:	e014      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x7e>
  switch (Channel)
 8003270:	2a00      	cmp	r2, #0
 8003272:	d112      	bne.n	800329a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003274:	0029      	movs	r1, r5
 8003276:	6800      	ldr	r0, [r0, #0]
 8003278:	f7ff fd50 	bl	8002d1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	6993      	ldr	r3, [r2, #24]
 8003280:	2108      	movs	r1, #8
 8003282:	430b      	orrs	r3, r1
 8003284:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	6993      	ldr	r3, [r2, #24]
 800328a:	3904      	subs	r1, #4
 800328c:	438b      	bics	r3, r1
 800328e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003290:	6822      	ldr	r2, [r4, #0]
 8003292:	6993      	ldr	r3, [r2, #24]
 8003294:	6929      	ldr	r1, [r5, #16]
 8003296:	430b      	orrs	r3, r1
 8003298:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800329a:	2201      	movs	r2, #1
 800329c:	233d      	movs	r3, #61	; 0x3d
 800329e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80032a0:	2200      	movs	r2, #0
 80032a2:	3b01      	subs	r3, #1
 80032a4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80032a6:	2000      	movs	r0, #0
}
 80032a8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032aa:	0029      	movs	r1, r5
 80032ac:	6800      	ldr	r0, [r0, #0]
 80032ae:	f7ff ff71 	bl	8003194 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032b2:	6822      	ldr	r2, [r4, #0]
 80032b4:	6991      	ldr	r1, [r2, #24]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	430b      	orrs	r3, r1
 80032bc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	6993      	ldr	r3, [r2, #24]
 80032c2:	4910      	ldr	r1, [pc, #64]	; (8003304 <HAL_TIM_PWM_ConfigChannel+0xe8>)
 80032c4:	400b      	ands	r3, r1
 80032c6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032c8:	6821      	ldr	r1, [r4, #0]
 80032ca:	698b      	ldr	r3, [r1, #24]
 80032cc:	692a      	ldr	r2, [r5, #16]
 80032ce:	0212      	lsls	r2, r2, #8
 80032d0:	4313      	orrs	r3, r2
 80032d2:	618b      	str	r3, [r1, #24]
    break;
 80032d4:	e7e1      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x7e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d6:	0029      	movs	r1, r5
 80032d8:	6800      	ldr	r0, [r0, #0]
 80032da:	f7ff fd65 	bl	8002da8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032de:	6822      	ldr	r2, [r4, #0]
 80032e0:	69d3      	ldr	r3, [r2, #28]
 80032e2:	2108      	movs	r1, #8
 80032e4:	430b      	orrs	r3, r1
 80032e6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032e8:	6822      	ldr	r2, [r4, #0]
 80032ea:	69d3      	ldr	r3, [r2, #28]
 80032ec:	3904      	subs	r1, #4
 80032ee:	438b      	bics	r3, r1
 80032f0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	69d3      	ldr	r3, [r2, #28]
 80032f6:	6929      	ldr	r1, [r5, #16]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	61d3      	str	r3, [r2, #28]
    break;
 80032fc:	e7cd      	b.n	800329a <HAL_TIM_PWM_ConfigChannel+0x7e>
  __HAL_LOCK(htim);
 80032fe:	2002      	movs	r0, #2
 8003300:	e7d2      	b.n	80032a8 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	fffffbff 	.word	0xfffffbff

08003308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003308:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800330a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330c:	4d03      	ldr	r5, [pc, #12]	; (800331c <TIM_ETR_SetConfig+0x14>)
 800330e:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	431a      	orrs	r2, r3
 8003314:	4311      	orrs	r1, r2
 8003316:	4321      	orrs	r1, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003318:	6081      	str	r1, [r0, #8]
}
 800331a:	bd30      	pop	{r4, r5, pc}
 800331c:	ffff00ff 	.word	0xffff00ff

08003320 <HAL_TIM_ConfigClockSource>:
{
 8003320:	b510      	push	{r4, lr}
 8003322:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003324:	233c      	movs	r3, #60	; 0x3c
 8003326:	5cc3      	ldrb	r3, [r0, r3]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d100      	bne.n	800332e <HAL_TIM_ConfigClockSource+0xe>
 800332c:	e07f      	b.n	800342e <HAL_TIM_ConfigClockSource+0x10e>
 800332e:	2201      	movs	r2, #1
 8003330:	233c      	movs	r3, #60	; 0x3c
 8003332:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	3201      	adds	r2, #1
 8003336:	3301      	adds	r3, #1
 8003338:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 800333a:	6802      	ldr	r2, [r0, #0]
 800333c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800333e:	483d      	ldr	r0, [pc, #244]	; (8003434 <HAL_TIM_ConfigClockSource+0x114>)
 8003340:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8003342:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003344:	680b      	ldr	r3, [r1, #0]
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d05d      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0xe6>
 800334a:	d910      	bls.n	800336e <HAL_TIM_ConfigClockSource+0x4e>
 800334c:	2b70      	cmp	r3, #112	; 0x70
 800334e:	d043      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0xb8>
 8003350:	d820      	bhi.n	8003394 <HAL_TIM_ConfigClockSource+0x74>
 8003352:	2b50      	cmp	r3, #80	; 0x50
 8003354:	d04d      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xd2>
 8003356:	2b60      	cmp	r3, #96	; 0x60
 8003358:	d136      	bne.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800335a:	68ca      	ldr	r2, [r1, #12]
 800335c:	6849      	ldr	r1, [r1, #4]
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	f7ff fdb8 	bl	8002ed4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003364:	2160      	movs	r1, #96	; 0x60
 8003366:	6820      	ldr	r0, [r4, #0]
 8003368:	f7ff fdc8 	bl	8002efc <TIM_ITRx_SetConfig>
    break;
 800336c:	e02c      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 800336e:	2b10      	cmp	r3, #16
 8003370:	d053      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xfa>
 8003372:	d908      	bls.n	8003386 <HAL_TIM_ConfigClockSource+0x66>
 8003374:	2b20      	cmp	r3, #32
 8003376:	d055      	beq.n	8003424 <HAL_TIM_ConfigClockSource+0x104>
 8003378:	2b30      	cmp	r3, #48	; 0x30
 800337a:	d125      	bne.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800337c:	2130      	movs	r1, #48	; 0x30
 800337e:	6820      	ldr	r0, [r4, #0]
 8003380:	f7ff fdbc 	bl	8002efc <TIM_ITRx_SetConfig>
    break;
 8003384:	e020      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11e      	bne.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800338a:	2100      	movs	r1, #0
 800338c:	6820      	ldr	r0, [r4, #0]
 800338e:	f7ff fdb5 	bl	8002efc <TIM_ITRx_SetConfig>
    break;
 8003392:	e019      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
  switch (sClockSourceConfig->ClockSource)
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	0152      	lsls	r2, r2, #5
 8003398:	4293      	cmp	r3, r2
 800339a:	d010      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x9e>
 800339c:	2280      	movs	r2, #128	; 0x80
 800339e:	0192      	lsls	r2, r2, #6
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d111      	bne.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 80033a4:	68cb      	ldr	r3, [r1, #12]
 80033a6:	684a      	ldr	r2, [r1, #4]
 80033a8:	6889      	ldr	r1, [r1, #8]
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	f7ff ffac 	bl	8003308 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	6891      	ldr	r1, [r2, #8]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	01db      	lsls	r3, r3, #7
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6093      	str	r3, [r2, #8]
    break;
 80033bc:	e004      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	6893      	ldr	r3, [r2, #8]
 80033c2:	2107      	movs	r1, #7
 80033c4:	438b      	bics	r3, r1
 80033c6:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	2201      	movs	r2, #1
 80033ca:	233d      	movs	r3, #61	; 0x3d
 80033cc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80033ce:	2200      	movs	r2, #0
 80033d0:	3b01      	subs	r3, #1
 80033d2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80033d4:	2000      	movs	r0, #0
}
 80033d6:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 80033d8:	68cb      	ldr	r3, [r1, #12]
 80033da:	684a      	ldr	r2, [r1, #4]
 80033dc:	6889      	ldr	r1, [r1, #8]
 80033de:	6820      	ldr	r0, [r4, #0]
 80033e0:	f7ff ff92 	bl	8003308 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e8:	2177      	movs	r1, #119	; 0x77
 80033ea:	438b      	bics	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ec:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80033ee:	6093      	str	r3, [r2, #8]
    break;
 80033f0:	e7ea      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	68ca      	ldr	r2, [r1, #12]
 80033f4:	6849      	ldr	r1, [r1, #4]
 80033f6:	6820      	ldr	r0, [r4, #0]
 80033f8:	f7ff fd5a 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033fc:	2150      	movs	r1, #80	; 0x50
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	f7ff fd7c 	bl	8002efc <TIM_ITRx_SetConfig>
    break;
 8003404:	e7e0      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003406:	68ca      	ldr	r2, [r1, #12]
 8003408:	6849      	ldr	r1, [r1, #4]
 800340a:	6820      	ldr	r0, [r4, #0]
 800340c:	f7ff fd50 	bl	8002eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	f7ff fd72 	bl	8002efc <TIM_ITRx_SetConfig>
    break;
 8003418:	e7d6      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800341a:	2110      	movs	r1, #16
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	f7ff fd6d 	bl	8002efc <TIM_ITRx_SetConfig>
    break;
 8003422:	e7d1      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003424:	2120      	movs	r1, #32
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	f7ff fd68 	bl	8002efc <TIM_ITRx_SetConfig>
    break;
 800342c:	e7cc      	b.n	80033c8 <HAL_TIM_ConfigClockSource+0xa8>
  __HAL_LOCK(htim);
 800342e:	2002      	movs	r0, #2
 8003430:	e7d1      	b.n	80033d6 <HAL_TIM_ConfigClockSource+0xb6>
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	ffff0088 	.word	0xffff0088

08003438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003438:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800343a:	2401      	movs	r4, #1
 800343c:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800343e:	6a03      	ldr	r3, [r0, #32]
 8003440:	43a3      	bics	r3, r4
 8003442:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003444:	6a03      	ldr	r3, [r0, #32]
 8003446:	408a      	lsls	r2, r1
 8003448:	431a      	orrs	r2, r3
 800344a:	6202      	str	r2, [r0, #32]
}
 800344c:	bd10      	pop	{r4, pc}
	...

08003450 <HAL_TIM_PWM_Start>:
{
 8003450:	b510      	push	{r4, lr}
 8003452:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003454:	2201      	movs	r2, #1
 8003456:	6800      	ldr	r0, [r0, #0]
 8003458:	f7ff ffee 	bl	8003438 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <HAL_TIM_PWM_Start+0x54>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d019      	beq.n	8003498 <HAL_TIM_PWM_Start+0x48>
 8003464:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_TIM_PWM_Start+0x58>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_TIM_PWM_Start+0x4c>
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <HAL_TIM_PWM_Start+0x5c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d017      	beq.n	80034a0 <HAL_TIM_PWM_Start+0x50>
 8003470:	4a0f      	ldr	r2, [pc, #60]	; (80034b0 <HAL_TIM_PWM_Start+0x60>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_TIM_PWM_Start+0x44>
 8003476:	2200      	movs	r2, #0
 8003478:	2a00      	cmp	r2, #0
 800347a:	d004      	beq.n	8003486 <HAL_TIM_PWM_Start+0x36>
    __HAL_TIM_MOE_ENABLE(htim);
 800347c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	0212      	lsls	r2, r2, #8
 8003482:	430a      	orrs	r2, r1
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003486:	6822      	ldr	r2, [r4, #0]
 8003488:	6813      	ldr	r3, [r2, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	430b      	orrs	r3, r1
 800348e:	6013      	str	r3, [r2, #0]
}
 8003490:	2000      	movs	r0, #0
 8003492:	bd10      	pop	{r4, pc}
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003494:	2201      	movs	r2, #1
 8003496:	e7ef      	b.n	8003478 <HAL_TIM_PWM_Start+0x28>
 8003498:	2201      	movs	r2, #1
 800349a:	e7ed      	b.n	8003478 <HAL_TIM_PWM_Start+0x28>
 800349c:	2201      	movs	r2, #1
 800349e:	e7eb      	b.n	8003478 <HAL_TIM_PWM_Start+0x28>
 80034a0:	2201      	movs	r2, #1
 80034a2:	e7e9      	b.n	8003478 <HAL_TIM_PWM_Start+0x28>
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800

080034b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80034b6:	233c      	movs	r3, #60	; 0x3c
 80034b8:	5cc3      	ldrb	r3, [r0, r3]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d01e      	beq.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80034be:	223c      	movs	r2, #60	; 0x3c
 80034c0:	2501      	movs	r5, #1
 80034c2:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	243d      	movs	r4, #61	; 0x3d
 80034c6:	2302      	movs	r3, #2
 80034c8:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80034ca:	6806      	ldr	r6, [r0, #0]
 80034cc:	6873      	ldr	r3, [r6, #4]
 80034ce:	2770      	movs	r7, #112	; 0x70
 80034d0:	43bb      	bics	r3, r7
 80034d2:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80034d4:	6806      	ldr	r6, [r0, #0]
 80034d6:	6873      	ldr	r3, [r6, #4]
 80034d8:	680f      	ldr	r7, [r1, #0]
 80034da:	433b      	orrs	r3, r7
 80034dc:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80034de:	6806      	ldr	r6, [r0, #0]
 80034e0:	68b3      	ldr	r3, [r6, #8]
 80034e2:	2780      	movs	r7, #128	; 0x80
 80034e4:	43bb      	bics	r3, r7
 80034e6:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80034e8:	6806      	ldr	r6, [r0, #0]
 80034ea:	68b3      	ldr	r3, [r6, #8]
 80034ec:	6849      	ldr	r1, [r1, #4]
 80034ee:	430b      	orrs	r3, r1
 80034f0:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80034f2:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80034f4:	2300      	movs	r3, #0
 80034f6:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80034f8:	2000      	movs	r0, #0
}
 80034fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80034fc:	2002      	movs	r0, #2
 80034fe:	e7fc      	b.n	80034fa <HAL_TIMEx_MasterConfigSynchronization+0x46>

08003500 <HAL_TIMEx_CommutationCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003500:	4770      	bx	lr

08003502 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003502:	4770      	bx	lr

08003504 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8003504:	2884      	cmp	r0, #132	; 0x84
 8003506:	d001      	beq.n	800350c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8003508:	3003      	adds	r0, #3
  }
  
  return fpriority;
}
 800350a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800350c:	2000      	movs	r0, #0
  return fpriority;
 800350e:	e7fc      	b.n	800350a <makeFreeRtosPriority+0x6>

08003510 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003510:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8003512:	f000 fb87 	bl	8003c24 <vTaskStartScheduler>
  
  return osOK;
}
 8003516:	2000      	movs	r0, #0
 8003518:	bd10      	pop	{r4, pc}

0800351a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800351a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351c:	b085      	sub	sp, #20
 800351e:	000d      	movs	r5, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003520:	6846      	ldr	r6, [r0, #4]
 8003522:	6807      	ldr	r7, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003524:	6904      	ldr	r4, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003526:	2308      	movs	r3, #8
 8003528:	5ec0      	ldrsh	r0, [r0, r3]
 800352a:	f7ff ffeb 	bl	8003504 <makeFreeRtosPriority>
 800352e:	b2a2      	uxth	r2, r4
 8003530:	ab03      	add	r3, sp, #12
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	9000      	str	r0, [sp, #0]
 8003536:	002b      	movs	r3, r5
 8003538:	0039      	movs	r1, r7
 800353a:	0030      	movs	r0, r6
 800353c:	f000 fb42 	bl	8003bc4 <xTaskCreate>
 8003540:	2801      	cmp	r0, #1
 8003542:	d102      	bne.n	800354a <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003544:	9803      	ldr	r0, [sp, #12]
}
 8003546:	b005      	add	sp, #20
 8003548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 800354a:	2000      	movs	r0, #0
 800354c:	e7fb      	b.n	8003546 <osThreadCreate+0x2c>

0800354e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800354e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003550:	2800      	cmp	r0, #0
 8003552:	d100      	bne.n	8003556 <osDelay+0x8>
 8003554:	3001      	adds	r0, #1
 8003556:	f000 fc9f 	bl	8003e98 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800355a:	2000      	movs	r0, #0
 800355c:	bd10      	pop	{r4, pc}

0800355e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800355e:	0003      	movs	r3, r0
 8003560:	3308      	adds	r3, #8
 8003562:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003564:	2201      	movs	r2, #1
 8003566:	4252      	negs	r2, r2
 8003568:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800356a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800356c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003572:	4770      	bx	lr

08003574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003574:	2300      	movs	r3, #0
 8003576:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003578:	4770      	bx	lr

0800357a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800357a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800357c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003586:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003588:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800358a:	6803      	ldr	r3, [r0, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	6003      	str	r3, [r0, #0]
}
 8003590:	4770      	bx	lr

08003592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003592:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003594:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003596:	1c63      	adds	r3, r4, #1
 8003598:	d002      	beq.n	80035a0 <vListInsert+0xe>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800359a:	0002      	movs	r2, r0
 800359c:	3208      	adds	r2, #8
 800359e:	e002      	b.n	80035a6 <vListInsert+0x14>
		pxIterator = pxList->xListEnd.pxPrevious;
 80035a0:	6902      	ldr	r2, [r0, #16]
 80035a2:	e004      	b.n	80035ae <vListInsert+0x1c>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a4:	001a      	movs	r2, r3
 80035a6:	6853      	ldr	r3, [r2, #4]
 80035a8:	681d      	ldr	r5, [r3, #0]
 80035aa:	42ac      	cmp	r4, r5
 80035ac:	d2fa      	bcs.n	80035a4 <vListInsert+0x12>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035ae:	6853      	ldr	r3, [r2, #4]
 80035b0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035b2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035b4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80035b6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80035ba:	6803      	ldr	r3, [r0, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	6003      	str	r3, [r0, #0]
}
 80035c0:	bd30      	pop	{r4, r5, pc}

080035c2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035c2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035c4:	6842      	ldr	r2, [r0, #4]
 80035c6:	6881      	ldr	r1, [r0, #8]
 80035c8:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035ca:	6882      	ldr	r2, [r0, #8]
 80035cc:	6841      	ldr	r1, [r0, #4]
 80035ce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4290      	cmp	r0, r2
 80035d4:	d005      	beq.n	80035e2 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035d6:	2200      	movs	r2, #0
 80035d8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	1e50      	subs	r0, r2, #1
 80035de:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80035e0:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035e2:	6882      	ldr	r2, [r0, #8]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e7f6      	b.n	80035d6 <uxListRemove+0x14>

080035e8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <prvTaskExitError+0x10>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	d001      	beq.n	80035f4 <prvTaskExitError+0xc>
 80035f0:	b672      	cpsid	i
 80035f2:	e7fe      	b.n	80035f2 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 80035f4:	b672      	cpsid	i
 80035f6:	e7fe      	b.n	80035f6 <prvTaskExitError+0xe>
 80035f8:	20000000 	.word	0x20000000
 80035fc:	00000000 	.word	0x00000000

08003600 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003600:	4a0b      	ldr	r2, [pc, #44]	; (8003630 <pxCurrentTCBConst2>)
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	3020      	adds	r0, #32
 8003608:	f380 8809 	msr	PSP, r0
 800360c:	2002      	movs	r0, #2
 800360e:	f380 8814 	msr	CONTROL, r0
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003618:	46ae      	mov	lr, r5
 800361a:	bc08      	pop	{r3}
 800361c:	bc04      	pop	{r2}
 800361e:	b662      	cpsie	i
 8003620:	4718      	bx	r3
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46c0      	nop			; (mov r8, r8)

08003630 <pxCurrentTCBConst2>:
 8003630:	20000cb4 	.word	0x20000cb4

08003634 <pxPortInitialiseStack>:
{
 8003634:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003636:	1f03      	subs	r3, r0, #4
 8003638:	2480      	movs	r4, #128	; 0x80
 800363a:	0464      	lsls	r4, r4, #17
 800363c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800363e:	3b04      	subs	r3, #4
 8003640:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003642:	3b04      	subs	r3, #4
 8003644:	4902      	ldr	r1, [pc, #8]	; (8003650 <pxPortInitialiseStack+0x1c>)
 8003646:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003648:	3b14      	subs	r3, #20
 800364a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800364c:	3840      	subs	r0, #64	; 0x40
}
 800364e:	bd10      	pop	{r4, pc}
 8003650:	080035e9 	.word	0x080035e9

08003654 <SVC_Handler>:
}
 8003654:	4770      	bx	lr
	...

08003658 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	0552      	lsls	r2, r2, #21
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <vPortYield+0x14>)
 800365e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8003660:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003664:	f3bf 8f6f 	isb	sy
}
 8003668:	4770      	bx	lr
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
 8003670:	b672      	cpsid	i
    uxCriticalNesting++;
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <vPortEnterCritical+0x14>)
 8003674:	6813      	ldr	r3, [r2, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800367a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800367e:	f3bf 8f6f 	isb	sy
}
 8003682:	4770      	bx	lr
 8003684:	20000000 	.word	0x20000000

08003688 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <vPortExitCritical+0x1c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <vPortExitCritical+0xc>
 8003690:	b672      	cpsid	i
 8003692:	e7fe      	b.n	8003692 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8003694:	3b01      	subs	r3, #1
 8003696:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <vPortExitCritical+0x1c>)
 8003698:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800369a:	2b00      	cmp	r3, #0
 800369c:	d100      	bne.n	80036a0 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
 800369e:	b662      	cpsie	i
    }
}
 80036a0:	4770      	bx	lr
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	20000000 	.word	0x20000000

080036a8 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80036a8:	f3ef 8010 	mrs	r0, PRIMASK
 80036ac:	b672      	cpsid	i
 80036ae:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
}
 80036b0:	2000      	movs	r0, #0

080036b2 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
 80036b2:	f380 8810 	msr	PRIMASK, r0
 80036b6:	4770      	bx	lr
	...

080036c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80036c0:	f3ef 8009 	mrs	r0, PSP
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <pxCurrentTCBConst>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	3820      	subs	r0, #32
 80036ca:	6010      	str	r0, [r2, #0]
 80036cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80036ce:	4644      	mov	r4, r8
 80036d0:	464d      	mov	r5, r9
 80036d2:	4656      	mov	r6, sl
 80036d4:	465f      	mov	r7, fp
 80036d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80036d8:	b508      	push	{r3, lr}
 80036da:	b672      	cpsid	i
 80036dc:	f000 fc2c 	bl	8003f38 <vTaskSwitchContext>
 80036e0:	b662      	cpsie	i
 80036e2:	bc0c      	pop	{r2, r3}
 80036e4:	6811      	ldr	r1, [r2, #0]
 80036e6:	6808      	ldr	r0, [r1, #0]
 80036e8:	3010      	adds	r0, #16
 80036ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80036ec:	46a0      	mov	r8, r4
 80036ee:	46a9      	mov	r9, r5
 80036f0:	46b2      	mov	sl, r6
 80036f2:	46bb      	mov	fp, r7
 80036f4:	f380 8809 	msr	PSP, r0
 80036f8:	3820      	subs	r0, #32
 80036fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80036fc:	4718      	bx	r3
 80036fe:	46c0      	nop			; (mov r8, r8)

08003700 <pxCurrentTCBConst>:
 8003700:	20000cb4 	.word	0x20000cb4

08003704 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003704:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003706:	f7ff ffcf 	bl	80036a8 <ulSetInterruptMaskFromISR>
 800370a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800370c:	f000 fac0 	bl	8003c90 <xTaskIncrementTick>
 8003710:	2800      	cmp	r0, #0
 8003712:	d003      	beq.n	800371c <SysTick_Handler+0x18>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	0552      	lsls	r2, r2, #21
 8003718:	4b02      	ldr	r3, [pc, #8]	; (8003724 <SysTick_Handler+0x20>)
 800371a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800371c:	0020      	movs	r0, r4
 800371e:	f7ff ffc8 	bl	80036b2 <vClearInterruptMaskFromISR>
}
 8003722:	bd10      	pop	{r4, pc}
 8003724:	e000ed04 	.word	0xe000ed04

08003728 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003728:	b510      	push	{r4, lr}
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */
	/* Configure SysTick to interrupt at the requested rate. */

	portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <vPortSetupTimerInterrupt+0x1c>)
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	4906      	ldr	r1, [pc, #24]	; (8003748 <vPortSetupTimerInterrupt+0x20>)
 8003730:	f7fc fcea 	bl	8000108 <__udivsi3>
 8003734:	3801      	subs	r0, #1
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <vPortSetupTimerInterrupt+0x24>)
 8003738:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800373a:	2207      	movs	r2, #7
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <vPortSetupTimerInterrupt+0x28>)
 800373e:	601a      	str	r2, [r3, #0]
}
 8003740:	bd10      	pop	{r4, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	20000010 	.word	0x20000010
 8003748:	000002dd 	.word	0x000002dd
 800374c:	e000e014 	.word	0xe000e014
 8003750:	e000e010 	.word	0xe000e010

08003754 <xPortStartScheduler>:
{
 8003754:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <xPortStartScheduler+0x2c>)
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	22ff      	movs	r2, #255	; 0xff
 800375c:	0412      	lsls	r2, r2, #16
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	0612      	lsls	r2, r2, #24
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800376c:	f7ff ffdc 	bl	8003728 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003770:	2200      	movs	r2, #0
 8003772:	4b04      	ldr	r3, [pc, #16]	; (8003784 <xPortStartScheduler+0x30>)
 8003774:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8003776:	f7ff ff43 	bl	8003600 <vPortStartFirstTask>
	prvTaskExitError();
 800377a:	f7ff ff35 	bl	80035e8 <prvTaskExitError>
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	e000ed20 	.word	0xe000ed20
 8003784:	20000000 	.word	0x20000000

08003788 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003788:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800378a:	0753      	lsls	r3, r2, #29
 800378c:	d01f      	beq.n	80037ce <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800378e:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003790:	2307      	movs	r3, #7
 8003792:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003794:	23c0      	movs	r3, #192	; 0xc0
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a5b      	subs	r3, r3, r1
 800379a:	189b      	adds	r3, r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800379c:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800379e:	480e      	ldr	r0, [pc, #56]	; (80037d8 <prvHeapInit+0x50>)
 80037a0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80037a2:	2100      	movs	r1, #0
 80037a4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037a6:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 80037a8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037aa:	2007      	movs	r0, #7
 80037ac:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 80037ae:	480b      	ldr	r0, [pc, #44]	; (80037dc <prvHeapInit+0x54>)
 80037b0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80037b2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80037b4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037b6:	1a99      	subs	r1, r3, r2
 80037b8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037ba:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <prvHeapInit+0x58>)
 80037be:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <prvHeapInit+0x5c>)
 80037c2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	0612      	lsls	r2, r2, #24
 80037c8:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <prvHeapInit+0x60>)
 80037ca:	601a      	str	r2, [r3, #0]
}
 80037cc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037ce:	23c0      	movs	r3, #192	; 0xc0
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	e7e4      	b.n	800379e <prvHeapInit+0x16>
 80037d4:	200000a0 	.word	0x200000a0
 80037d8:	20000cac 	.word	0x20000cac
 80037dc:	2000009c 	.word	0x2000009c
 80037e0:	20000ca8 	.word	0x20000ca8
 80037e4:	20000ca4 	.word	0x20000ca4
 80037e8:	20000ca0 	.word	0x20000ca0

080037ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80037ec:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <prvInsertBlockIntoFreeList+0x4c>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4282      	cmp	r2, r0
 80037f4:	d319      	bcc.n	800382a <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	185c      	adds	r4, r3, r1
 80037fa:	42a0      	cmp	r0, r4
 80037fc:	d103      	bne.n	8003806 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037fe:	6840      	ldr	r0, [r0, #4]
 8003800:	1809      	adds	r1, r1, r0
 8003802:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003804:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003806:	6841      	ldr	r1, [r0, #4]
 8003808:	1844      	adds	r4, r0, r1
 800380a:	42a2      	cmp	r2, r4
 800380c:	d111      	bne.n	8003832 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800380e:	4c0b      	ldr	r4, [pc, #44]	; (800383c <prvInsertBlockIntoFreeList+0x50>)
 8003810:	6824      	ldr	r4, [r4, #0]
 8003812:	42a2      	cmp	r2, r4
 8003814:	d00b      	beq.n	800382e <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003816:	6852      	ldr	r2, [r2, #4]
 8003818:	1889      	adds	r1, r1, r2
 800381a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003822:	4298      	cmp	r0, r3
 8003824:	d000      	beq.n	8003828 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003826:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003828:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800382a:	0013      	movs	r3, r2
 800382c:	e7e0      	b.n	80037f0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800382e:	6004      	str	r4, [r0, #0]
 8003830:	e7f7      	b.n	8003822 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003832:	6002      	str	r2, [r0, #0]
 8003834:	e7f5      	b.n	8003822 <prvInsertBlockIntoFreeList+0x36>
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	20000cac 	.word	0x20000cac
 800383c:	2000009c 	.word	0x2000009c

08003840 <pvPortMalloc>:
{
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8003844:	f000 fa1c 	bl	8003c80 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <pvPortMalloc+0xc4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00f      	beq.n	8003870 <pvPortMalloc+0x30>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003850:	4b2d      	ldr	r3, [pc, #180]	; (8003908 <pvPortMalloc+0xc8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4223      	tst	r3, r4
 8003856:	d14b      	bne.n	80038f0 <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 8003858:	2c00      	cmp	r4, #0
 800385a:	d00c      	beq.n	8003876 <pvPortMalloc+0x36>
				xWantedSize += xHeapStructSize;
 800385c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800385e:	0763      	lsls	r3, r4, #29
 8003860:	d009      	beq.n	8003876 <pvPortMalloc+0x36>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003862:	2307      	movs	r3, #7
 8003864:	439c      	bics	r4, r3
 8003866:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003868:	4223      	tst	r3, r4
 800386a:	d004      	beq.n	8003876 <pvPortMalloc+0x36>
 800386c:	b672      	cpsid	i
 800386e:	e7fe      	b.n	800386e <pvPortMalloc+0x2e>
			prvHeapInit();
 8003870:	f7ff ff8a 	bl	8003788 <prvHeapInit>
 8003874:	e7ec      	b.n	8003850 <pvPortMalloc+0x10>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003876:	2c00      	cmp	r4, #0
 8003878:	d03c      	beq.n	80038f4 <pvPortMalloc+0xb4>
 800387a:	4b24      	ldr	r3, [pc, #144]	; (800390c <pvPortMalloc+0xcc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429c      	cmp	r4, r3
 8003880:	d83a      	bhi.n	80038f8 <pvPortMalloc+0xb8>
				pxBlock = xStart.pxNextFreeBlock;
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <pvPortMalloc+0xd0>)
 8003884:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003886:	e001      	b.n	800388c <pvPortMalloc+0x4c>
					pxPreviousBlock = pxBlock;
 8003888:	002b      	movs	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800388a:	0015      	movs	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800388c:	686a      	ldr	r2, [r5, #4]
 800388e:	4294      	cmp	r4, r2
 8003890:	d902      	bls.n	8003898 <pvPortMalloc+0x58>
 8003892:	682a      	ldr	r2, [r5, #0]
 8003894:	2a00      	cmp	r2, #0
 8003896:	d1f7      	bne.n	8003888 <pvPortMalloc+0x48>
				if( pxBlock != pxEnd )
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <pvPortMalloc+0xc4>)
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	4295      	cmp	r5, r2
 800389e:	d02d      	beq.n	80038fc <pvPortMalloc+0xbc>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038a0:	681e      	ldr	r6, [r3, #0]
 80038a2:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038a4:	682a      	ldr	r2, [r5, #0]
 80038a6:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038a8:	686b      	ldr	r3, [r5, #4]
 80038aa:	1b1b      	subs	r3, r3, r4
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d908      	bls.n	80038c2 <pvPortMalloc+0x82>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038b0:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038b2:	0742      	lsls	r2, r0, #29
 80038b4:	d001      	beq.n	80038ba <pvPortMalloc+0x7a>
 80038b6:	b672      	cpsid	i
 80038b8:	e7fe      	b.n	80038b8 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038ba:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80038bc:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038be:	f7ff ff95 	bl	80037ec <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038c2:	686a      	ldr	r2, [r5, #4]
 80038c4:	4911      	ldr	r1, [pc, #68]	; (800390c <pvPortMalloc+0xcc>)
 80038c6:	680b      	ldr	r3, [r1, #0]
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038cc:	4911      	ldr	r1, [pc, #68]	; (8003914 <pvPortMalloc+0xd4>)
 80038ce:	6809      	ldr	r1, [r1, #0]
 80038d0:	428b      	cmp	r3, r1
 80038d2:	d201      	bcs.n	80038d8 <pvPortMalloc+0x98>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038d4:	490f      	ldr	r1, [pc, #60]	; (8003914 <pvPortMalloc+0xd4>)
 80038d6:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <pvPortMalloc+0xc8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4313      	orrs	r3, r2
 80038de:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80038e4:	f000 fa62 	bl	8003dac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038e8:	0773      	lsls	r3, r6, #29
 80038ea:	d009      	beq.n	8003900 <pvPortMalloc+0xc0>
 80038ec:	b672      	cpsid	i
 80038ee:	e7fe      	b.n	80038ee <pvPortMalloc+0xae>
void *pvReturn = NULL;
 80038f0:	2600      	movs	r6, #0
 80038f2:	e7f7      	b.n	80038e4 <pvPortMalloc+0xa4>
 80038f4:	2600      	movs	r6, #0
 80038f6:	e7f5      	b.n	80038e4 <pvPortMalloc+0xa4>
 80038f8:	2600      	movs	r6, #0
 80038fa:	e7f3      	b.n	80038e4 <pvPortMalloc+0xa4>
 80038fc:	2600      	movs	r6, #0
 80038fe:	e7f1      	b.n	80038e4 <pvPortMalloc+0xa4>
}
 8003900:	0030      	movs	r0, r6
 8003902:	bd70      	pop	{r4, r5, r6, pc}
 8003904:	2000009c 	.word	0x2000009c
 8003908:	20000ca0 	.word	0x20000ca0
 800390c:	20000ca4 	.word	0x20000ca4
 8003910:	20000cac 	.word	0x20000cac
 8003914:	20000ca8 	.word	0x20000ca8

08003918 <vPortFree>:
{
 8003918:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800391a:	2800      	cmp	r0, #0
 800391c:	d020      	beq.n	8003960 <vPortFree+0x48>
		puc -= xHeapStructSize;
 800391e:	0005      	movs	r5, r0
 8003920:	3d08      	subs	r5, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003922:	686b      	ldr	r3, [r5, #4]
 8003924:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <vPortFree+0x4c>)
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	421a      	tst	r2, r3
 800392a:	d101      	bne.n	8003930 <vPortFree+0x18>
 800392c:	b672      	cpsid	i
 800392e:	e7fe      	b.n	800392e <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003930:	0001      	movs	r1, r0
 8003932:	3908      	subs	r1, #8
 8003934:	6809      	ldr	r1, [r1, #0]
 8003936:	2900      	cmp	r1, #0
 8003938:	d001      	beq.n	800393e <vPortFree+0x26>
 800393a:	b672      	cpsid	i
 800393c:	e7fe      	b.n	800393c <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800393e:	3808      	subs	r0, #8
 8003940:	0004      	movs	r4, r0
 8003942:	4393      	bics	r3, r2
 8003944:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8003946:	f000 f99b 	bl	8003c80 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800394a:	6863      	ldr	r3, [r4, #4]
 800394c:	4a06      	ldr	r2, [pc, #24]	; (8003968 <vPortFree+0x50>)
 800394e:	6811      	ldr	r1, [r2, #0]
 8003950:	468c      	mov	ip, r1
 8003952:	4463      	add	r3, ip
 8003954:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003956:	0028      	movs	r0, r5
 8003958:	f7ff ff48 	bl	80037ec <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800395c:	f000 fa26 	bl	8003dac <xTaskResumeAll>
}
 8003960:	bd70      	pop	{r4, r5, r6, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	20000ca0 	.word	0x20000ca0
 8003968:	20000ca4 	.word	0x20000ca4

0800396c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <prvResetNextTaskUnblockTime+0x30>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <prvResetNextTaskUnblockTime+0x20>
 8003976:	3301      	adds	r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <prvResetNextTaskUnblockTime+0x30>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <prvResetNextTaskUnblockTime+0x34>)
 8003988:	601a      	str	r2, [r3, #0]
	}
}
 800398a:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800398c:	2300      	movs	r3, #0
 800398e:	e7f3      	b.n	8003978 <prvResetNextTaskUnblockTime+0xc>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003990:	2201      	movs	r2, #1
 8003992:	4252      	negs	r2, r2
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <prvResetNextTaskUnblockTime+0x34>)
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e7f7      	b.n	800398a <prvResetNextTaskUnblockTime+0x1e>
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	20000cb8 	.word	0x20000cb8
 80039a0:	20000d90 	.word	0x20000d90

080039a4 <prvDeleteTCB>:
	{
 80039a4:	b510      	push	{r4, lr}
 80039a6:	0004      	movs	r4, r0
			vPortFree( pxTCB->pxStack );
 80039a8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80039aa:	f7ff ffb5 	bl	8003918 <vPortFree>
			vPortFree( pxTCB );
 80039ae:	0020      	movs	r0, r4
 80039b0:	f7ff ffb2 	bl	8003918 <vPortFree>
	}
 80039b4:	bd10      	pop	{r4, pc}
	...

080039b8 <prvInitialiseNewTask>:
{
 80039b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ba:	b083      	sub	sp, #12
 80039bc:	9000      	str	r0, [sp, #0]
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	9c08      	ldr	r4, [sp, #32]
 80039c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80039c4:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <prvInitialiseNewTask+0x84>)
 80039c6:	469c      	mov	ip, r3
 80039c8:	4462      	add	r2, ip
 80039ca:	0092      	lsls	r2, r2, #2
 80039cc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80039ce:	469c      	mov	ip, r3
 80039d0:	4462      	add	r2, ip
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80039d2:	2307      	movs	r3, #7
 80039d4:	439a      	bics	r2, r3
 80039d6:	0017      	movs	r7, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d8:	2300      	movs	r3, #0
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	d809      	bhi.n	80039f2 <prvInitialiseNewTask+0x3a>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039de:	18c8      	adds	r0, r1, r3
 80039e0:	7805      	ldrb	r5, [r0, #0]
 80039e2:	18f2      	adds	r2, r6, r3
 80039e4:	3234      	adds	r2, #52	; 0x34
 80039e6:	7015      	strb	r5, [r2, #0]
		if( pcName[ x ] == 0x00 )
 80039e8:	7802      	ldrb	r2, [r0, #0]
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	d001      	beq.n	80039f2 <prvInitialiseNewTask+0x3a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039ee:	3301      	adds	r3, #1
 80039f0:	e7f3      	b.n	80039da <prvInitialiseNewTask+0x22>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80039f2:	2200      	movs	r2, #0
 80039f4:	2343      	movs	r3, #67	; 0x43
 80039f6:	54f2      	strb	r2, [r6, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039f8:	2c06      	cmp	r4, #6
 80039fa:	d900      	bls.n	80039fe <prvInitialiseNewTask+0x46>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039fc:	2406      	movs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 80039fe:	62f4      	str	r4, [r6, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003a00:	6474      	str	r4, [r6, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a02:	2500      	movs	r5, #0
 8003a04:	64b5      	str	r5, [r6, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a06:	1d30      	adds	r0, r6, #4
 8003a08:	f7ff fdb4 	bl	8003574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a0c:	0030      	movs	r0, r6
 8003a0e:	3018      	adds	r0, #24
 8003a10:	f7ff fdb0 	bl	8003574 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a14:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a16:	2307      	movs	r3, #7
 8003a18:	1b1c      	subs	r4, r3, r4
 8003a1a:	61b4      	str	r4, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a1c:	6276      	str	r6, [r6, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8003a1e:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a20:	3349      	adds	r3, #73	; 0x49
 8003a22:	54f5      	strb	r5, [r6, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a24:	9a01      	ldr	r2, [sp, #4]
 8003a26:	9900      	ldr	r1, [sp, #0]
 8003a28:	0038      	movs	r0, r7
 8003a2a:	f7ff fe03 	bl	8003634 <pxPortInitialiseStack>
 8003a2e:	6030      	str	r0, [r6, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d000      	beq.n	8003a38 <prvInitialiseNewTask+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a36:	601e      	str	r6, [r3, #0]
}
 8003a38:	b003      	add	sp, #12
 8003a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a3c:	3fffffff 	.word	0x3fffffff

08003a40 <prvInitialiseTaskLists>:
{
 8003a40:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a42:	2400      	movs	r4, #0
 8003a44:	e007      	b.n	8003a56 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a46:	00a3      	lsls	r3, r4, #2
 8003a48:	191b      	adds	r3, r3, r4
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	480e      	ldr	r0, [pc, #56]	; (8003a88 <prvInitialiseTaskLists+0x48>)
 8003a4e:	1880      	adds	r0, r0, r2
 8003a50:	f7ff fd85 	bl	800355e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a54:	3401      	adds	r4, #1
 8003a56:	2c06      	cmp	r4, #6
 8003a58:	d9f5      	bls.n	8003a46 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8003a5a:	4d0c      	ldr	r5, [pc, #48]	; (8003a8c <prvInitialiseTaskLists+0x4c>)
 8003a5c:	0028      	movs	r0, r5
 8003a5e:	f7ff fd7e 	bl	800355e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a62:	4c0b      	ldr	r4, [pc, #44]	; (8003a90 <prvInitialiseTaskLists+0x50>)
 8003a64:	0020      	movs	r0, r4
 8003a66:	f7ff fd7a 	bl	800355e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a6a:	480a      	ldr	r0, [pc, #40]	; (8003a94 <prvInitialiseTaskLists+0x54>)
 8003a6c:	f7ff fd77 	bl	800355e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003a70:	4809      	ldr	r0, [pc, #36]	; (8003a98 <prvInitialiseTaskLists+0x58>)
 8003a72:	f7ff fd74 	bl	800355e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003a76:	4809      	ldr	r0, [pc, #36]	; (8003a9c <prvInitialiseTaskLists+0x5c>)
 8003a78:	f7ff fd71 	bl	800355e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <prvInitialiseTaskLists+0x60>)
 8003a7e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <prvInitialiseTaskLists+0x64>)
 8003a82:	601c      	str	r4, [r3, #0]
}
 8003a84:	bd70      	pop	{r4, r5, r6, pc}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	20000cc0 	.word	0x20000cc0
 8003a8c:	20000d64 	.word	0x20000d64
 8003a90:	20000d78 	.word	0x20000d78
 8003a94:	20000d98 	.word	0x20000d98
 8003a98:	20000dc4 	.word	0x20000dc4
 8003a9c:	20000db0 	.word	0x20000db0
 8003aa0:	20000cb8 	.word	0x20000cb8
 8003aa4:	20000cbc 	.word	0x20000cbc

08003aa8 <prvAddNewTaskToReadyList>:
{
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 8003aac:	f7ff fde0 	bl	8003670 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <prvAddNewTaskToReadyList+0x88>)
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ab8:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <prvAddNewTaskToReadyList+0x8c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02b      	beq.n	8003b18 <prvAddNewTaskToReadyList+0x70>
			if( xSchedulerRunning == pdFALSE )
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <prvAddNewTaskToReadyList+0x90>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <prvAddNewTaskToReadyList+0x30>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ac8:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <prvAddNewTaskToReadyList+0x8c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d801      	bhi.n	8003ad8 <prvAddNewTaskToReadyList+0x30>
					pxCurrentTCB = pxNewTCB;
 8003ad4:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <prvAddNewTaskToReadyList+0x8c>)
 8003ad6:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <prvAddNewTaskToReadyList+0x94>)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <prvAddNewTaskToReadyList+0x98>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d901      	bls.n	8003aee <prvAddNewTaskToReadyList+0x46>
 8003aea:	4b15      	ldr	r3, [pc, #84]	; (8003b40 <prvAddNewTaskToReadyList+0x98>)
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	1d21      	adds	r1, r4, #4
 8003af0:	0093      	lsls	r3, r2, #2
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	4813      	ldr	r0, [pc, #76]	; (8003b44 <prvAddNewTaskToReadyList+0x9c>)
 8003af8:	1880      	adds	r0, r0, r2
 8003afa:	f7ff fd3e 	bl	800357a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003afe:	f7ff fdc3 	bl	8003688 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <prvAddNewTaskToReadyList+0x90>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <prvAddNewTaskToReadyList+0x6e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <prvAddNewTaskToReadyList+0x8c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d308      	bcc.n	8003b28 <prvAddNewTaskToReadyList+0x80>
}
 8003b16:	bd10      	pop	{r4, pc}
			pxCurrentTCB = pxNewTCB;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <prvAddNewTaskToReadyList+0x8c>)
 8003b1a:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b1c:	6813      	ldr	r3, [r2, #0]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d1da      	bne.n	8003ad8 <prvAddNewTaskToReadyList+0x30>
				prvInitialiseTaskLists();
 8003b22:	f7ff ff8d 	bl	8003a40 <prvInitialiseTaskLists>
 8003b26:	e7d7      	b.n	8003ad8 <prvAddNewTaskToReadyList+0x30>
			taskYIELD_IF_USING_PREEMPTION();
 8003b28:	f7ff fd96 	bl	8003658 <vPortYield>
}
 8003b2c:	e7f3      	b.n	8003b16 <prvAddNewTaskToReadyList+0x6e>
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	20000d4c 	.word	0x20000d4c
 8003b34:	20000cb4 	.word	0x20000cb4
 8003b38:	20000dac 	.word	0x20000dac
 8003b3c:	20000d5c 	.word	0x20000d5c
 8003b40:	20000d60 	.word	0x20000d60
 8003b44:	20000cc0 	.word	0x20000cc0

08003b48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	0004      	movs	r4, r0
 8003b4c:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b4e:	4b17      	ldr	r3, [pc, #92]	; (8003bac <prvAddCurrentTaskToDelayedList+0x64>)
 8003b50:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	3004      	adds	r0, #4
 8003b58:	f7ff fd33 	bl	80035c2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b5c:	1c63      	adds	r3, r4, #1
 8003b5e:	d013      	beq.n	8003b88 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b60:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d816      	bhi.n	8003b9a <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	3104      	adds	r1, #4
 8003b76:	f7ff fd0c 	bl	8003592 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0x70>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	429c      	cmp	r4, r3
 8003b80:	d212      	bcs.n	8003ba8 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0x70>)
 8003b84:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b86:	e00f      	b.n	8003ba8 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b88:	2d00      	cmp	r5, #0
 8003b8a:	d0e9      	beq.n	8003b60 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	3104      	adds	r1, #4
 8003b92:	480a      	ldr	r0, [pc, #40]	; (8003bbc <prvAddCurrentTaskToDelayedList+0x74>)
 8003b94:	f7ff fcf1 	bl	800357a <vListInsertEnd>
 8003b98:	e006      	b.n	8003ba8 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <prvAddCurrentTaskToDelayedList+0x78>)
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0x68>)
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	3104      	adds	r1, #4
 8003ba4:	f7ff fcf5 	bl	8003592 <vListInsert>
}
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	20000dd8 	.word	0x20000dd8
 8003bb0:	20000cb4 	.word	0x20000cb4
 8003bb4:	20000cb8 	.word	0x20000cb8
 8003bb8:	20000d90 	.word	0x20000d90
 8003bbc:	20000db0 	.word	0x20000db0
 8003bc0:	20000cbc 	.word	0x20000cbc

08003bc4 <xTaskCreate>:
	{
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	9004      	str	r0, [sp, #16]
 8003bca:	9105      	str	r1, [sp, #20]
 8003bcc:	0014      	movs	r4, r2
 8003bce:	001f      	movs	r7, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd0:	0090      	lsls	r0, r2, #2
 8003bd2:	f7ff fe35 	bl	8003840 <pvPortMalloc>
 8003bd6:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 8003bd8:	d01e      	beq.n	8003c18 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003bda:	2054      	movs	r0, #84	; 0x54
 8003bdc:	f7ff fe30 	bl	8003840 <pvPortMalloc>
 8003be0:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 8003be2:	d015      	beq.n	8003c10 <xTaskCreate+0x4c>
					pxNewTCB->pxStack = pxStack;
 8003be4:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8003be6:	2d00      	cmp	r5, #0
 8003be8:	d018      	beq.n	8003c1c <xTaskCreate+0x58>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bea:	2300      	movs	r3, #0
 8003bec:	9303      	str	r3, [sp, #12]
 8003bee:	9502      	str	r5, [sp, #8]
 8003bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	0022      	movs	r2, r4
 8003bfc:	9905      	ldr	r1, [sp, #20]
 8003bfe:	9804      	ldr	r0, [sp, #16]
 8003c00:	f7ff feda 	bl	80039b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c04:	0028      	movs	r0, r5
 8003c06:	f7ff ff4f 	bl	8003aa8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c0a:	2001      	movs	r0, #1
	}
 8003c0c:	b007      	add	sp, #28
 8003c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 8003c10:	0030      	movs	r0, r6
 8003c12:	f7ff fe81 	bl	8003918 <vPortFree>
 8003c16:	e7e6      	b.n	8003be6 <xTaskCreate+0x22>
				pxNewTCB = NULL;
 8003c18:	2500      	movs	r5, #0
 8003c1a:	e7e4      	b.n	8003be6 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	4240      	negs	r0, r0
		return xReturn;
 8003c20:	e7f4      	b.n	8003c0c <xTaskCreate+0x48>
	...

08003c24 <vTaskStartScheduler>:
{
 8003c24:	b500      	push	{lr}
 8003c26:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <vTaskStartScheduler+0x44>)
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	490e      	ldr	r1, [pc, #56]	; (8003c6c <vTaskStartScheduler+0x48>)
 8003c34:	480e      	ldr	r0, [pc, #56]	; (8003c70 <vTaskStartScheduler+0x4c>)
 8003c36:	f7ff ffc5 	bl	8003bc4 <xTaskCreate>
	if( xReturn == pdPASS )
 8003c3a:	2801      	cmp	r0, #1
 8003c3c:	d003      	beq.n	8003c46 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d00f      	beq.n	8003c62 <vTaskStartScheduler+0x3e>
}
 8003c42:	b003      	add	sp, #12
 8003c44:	bd00      	pop	{pc}
		portDISABLE_INTERRUPTS();
 8003c46:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c48:	2201      	movs	r2, #1
 8003c4a:	4252      	negs	r2, r2
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <vTaskStartScheduler+0x50>)
 8003c4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c50:	3202      	adds	r2, #2
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <vTaskStartScheduler+0x54>)
 8003c54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c56:	2200      	movs	r2, #0
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <vTaskStartScheduler+0x58>)
 8003c5a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003c5c:	f7ff fd7a 	bl	8003754 <xPortStartScheduler>
 8003c60:	e7ef      	b.n	8003c42 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c62:	b672      	cpsid	i
 8003c64:	e7fe      	b.n	8003c64 <vTaskStartScheduler+0x40>
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	20000d8c 	.word	0x20000d8c
 8003c6c:	080054c4 	.word	0x080054c4
 8003c70:	08003f21 	.word	0x08003f21
 8003c74:	20000d90 	.word	0x20000d90
 8003c78:	20000dac 	.word	0x20000dac
 8003c7c:	20000dd8 	.word	0x20000dd8

08003c80 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003c80:	4a02      	ldr	r2, [pc, #8]	; (8003c8c <vTaskSuspendAll+0xc>)
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	4770      	bx	lr
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	20000d58 	.word	0x20000d58

08003c90 <xTaskIncrementTick>:
{
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <xTaskIncrementTick+0xf0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d166      	bne.n	8003d68 <xTaskIncrementTick+0xd8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003c9a:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <xTaskIncrementTick+0xf4>)
 8003c9c:	681d      	ldr	r5, [r3, #0]
 8003c9e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8003ca0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	d112      	bne.n	8003ccc <xTaskIncrementTick+0x3c>
			taskSWITCH_DELAYED_LISTS();
 8003ca6:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <xTaskIncrementTick+0xf8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <xTaskIncrementTick+0x24>
 8003cb0:	b672      	cpsid	i
 8003cb2:	e7fe      	b.n	8003cb2 <xTaskIncrementTick+0x22>
 8003cb4:	4a34      	ldr	r2, [pc, #208]	; (8003d88 <xTaskIncrementTick+0xf8>)
 8003cb6:	6811      	ldr	r1, [r2, #0]
 8003cb8:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <xTaskIncrementTick+0xfc>)
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	6010      	str	r0, [r2, #0]
 8003cbe:	6019      	str	r1, [r3, #0]
 8003cc0:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <xTaskIncrementTick+0x100>)
 8003cc2:	6813      	ldr	r3, [r2, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	f7ff fe50 	bl	800396c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <xTaskIncrementTick+0x104>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	429d      	cmp	r5, r3
 8003cd2:	d23d      	bcs.n	8003d50 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8003cd4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cd6:	4b30      	ldr	r3, [pc, #192]	; (8003d98 <xTaskIncrementTick+0x108>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	0093      	lsls	r3, r2, #2
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	009a      	lsls	r2, r3, #2
 8003ce2:	4b2e      	ldr	r3, [pc, #184]	; (8003d9c <xTaskIncrementTick+0x10c>)
 8003ce4:	58d3      	ldr	r3, [r2, r3]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d943      	bls.n	8003d72 <xTaskIncrementTick+0xe2>
				xSwitchRequired = pdTRUE;
 8003cea:	2401      	movs	r4, #1
 8003cec:	e041      	b.n	8003d72 <xTaskIncrementTick+0xe2>
							xSwitchRequired = pdTRUE;
 8003cee:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <xTaskIncrementTick+0xf8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d02c      	beq.n	8003d54 <xTaskIncrementTick+0xc4>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d12b      	bne.n	8003d58 <xTaskIncrementTick+0xc8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d00:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <xTaskIncrementTick+0xf8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d08:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003d0a:	429d      	cmp	r5, r3
 8003d0c:	d329      	bcc.n	8003d62 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d0e:	1d37      	adds	r7, r6, #4
 8003d10:	0038      	movs	r0, r7
 8003d12:	f7ff fc56 	bl	80035c2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d16:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d1c:	0030      	movs	r0, r6
 8003d1e:	3018      	adds	r0, #24
 8003d20:	f7ff fc4f 	bl	80035c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d24:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <xTaskIncrementTick+0x110>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d901      	bls.n	8003d32 <xTaskIncrementTick+0xa2>
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <xTaskIncrementTick+0x110>)
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	0093      	lsls	r3, r2, #2
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	009a      	lsls	r2, r3, #2
 8003d38:	4818      	ldr	r0, [pc, #96]	; (8003d9c <xTaskIncrementTick+0x10c>)
 8003d3a:	1880      	adds	r0, r0, r2
 8003d3c:	0039      	movs	r1, r7
 8003d3e:	f7ff fc1c 	bl	800357a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d42:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003d44:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <xTaskIncrementTick+0x108>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d2cf      	bcs.n	8003cee <xTaskIncrementTick+0x5e>
 8003d4e:	e7cf      	b.n	8003cf0 <xTaskIncrementTick+0x60>
 8003d50:	2400      	movs	r4, #0
 8003d52:	e7cd      	b.n	8003cf0 <xTaskIncrementTick+0x60>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d54:	3301      	adds	r3, #1
 8003d56:	e7d1      	b.n	8003cfc <xTaskIncrementTick+0x6c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d58:	2201      	movs	r2, #1
 8003d5a:	4252      	negs	r2, r2
 8003d5c:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <xTaskIncrementTick+0x104>)
 8003d5e:	601a      	str	r2, [r3, #0]
					break;
 8003d60:	e7b9      	b.n	8003cd6 <xTaskIncrementTick+0x46>
						xNextTaskUnblockTime = xItemValue;
 8003d62:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <xTaskIncrementTick+0x104>)
 8003d64:	6013      	str	r3, [r2, #0]
						break;
 8003d66:	e7b6      	b.n	8003cd6 <xTaskIncrementTick+0x46>
		++uxPendedTicks;
 8003d68:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <xTaskIncrementTick+0x114>)
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003d70:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <xTaskIncrementTick+0x118>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d000      	beq.n	8003d7c <xTaskIncrementTick+0xec>
			xSwitchRequired = pdTRUE;
 8003d7a:	2401      	movs	r4, #1
}
 8003d7c:	0020      	movs	r0, r4
 8003d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d80:	20000d58 	.word	0x20000d58
 8003d84:	20000dd8 	.word	0x20000dd8
 8003d88:	20000cb8 	.word	0x20000cb8
 8003d8c:	20000cbc 	.word	0x20000cbc
 8003d90:	20000d94 	.word	0x20000d94
 8003d94:	20000d90 	.word	0x20000d90
 8003d98:	20000cb4 	.word	0x20000cb4
 8003d9c:	20000cc0 	.word	0x20000cc0
 8003da0:	20000d60 	.word	0x20000d60
 8003da4:	20000d54 	.word	0x20000d54
 8003da8:	20000ddc 	.word	0x20000ddc

08003dac <xTaskResumeAll>:
{
 8003dac:	b570      	push	{r4, r5, r6, lr}
	configASSERT( uxSchedulerSuspended );
 8003dae:	4b32      	ldr	r3, [pc, #200]	; (8003e78 <xTaskResumeAll+0xcc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <xTaskResumeAll+0xe>
 8003db6:	b672      	cpsid	i
 8003db8:	e7fe      	b.n	8003db8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8003dba:	f7ff fc59 	bl	8003670 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <xTaskResumeAll+0xcc>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	3a01      	subs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d150      	bne.n	8003e6e <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <xTaskResumeAll+0xd0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <xTaskResumeAll+0x32>
BaseType_t xAlreadyYielded = pdFALSE;
 8003dd4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003dd6:	f7ff fc57 	bl	8003688 <vPortExitCritical>
}
 8003dda:	0020      	movs	r0, r4
 8003ddc:	bd70      	pop	{r4, r5, r6, pc}
 8003dde:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <xTaskResumeAll+0xd4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d023      	beq.n	8003e30 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <xTaskResumeAll+0xd4>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dee:	0020      	movs	r0, r4
 8003df0:	3018      	adds	r0, #24
 8003df2:	f7ff fbe6 	bl	80035c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df6:	1d25      	adds	r5, r4, #4
 8003df8:	0028      	movs	r0, r5
 8003dfa:	f7ff fbe2 	bl	80035c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e00:	4b20      	ldr	r3, [pc, #128]	; (8003e84 <xTaskResumeAll+0xd8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d901      	bls.n	8003e0c <xTaskResumeAll+0x60>
 8003e08:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <xTaskResumeAll+0xd8>)
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	0093      	lsls	r3, r2, #2
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	009a      	lsls	r2, r3, #2
 8003e12:	481d      	ldr	r0, [pc, #116]	; (8003e88 <xTaskResumeAll+0xdc>)
 8003e14:	1880      	adds	r0, r0, r2
 8003e16:	0029      	movs	r1, r5
 8003e18:	f7ff fbaf 	bl	800357a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <xTaskResumeAll+0xe0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d3db      	bcc.n	8003de0 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8003e28:	2201      	movs	r2, #1
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <xTaskResumeAll+0xe4>)
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e7d7      	b.n	8003de0 <xTaskResumeAll+0x34>
				if( pxTCB != NULL )
 8003e30:	2c00      	cmp	r4, #0
 8003e32:	d001      	beq.n	8003e38 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8003e34:	f7ff fd9a 	bl	800396c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e38:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <xTaskResumeAll+0xe8>)
 8003e3a:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e3c:	2c00      	cmp	r4, #0
 8003e3e:	d10a      	bne.n	8003e56 <xTaskResumeAll+0xaa>
				if( xYieldPending != pdFALSE )
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <xTaskResumeAll+0xe4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d014      	beq.n	8003e72 <xTaskResumeAll+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 8003e48:	f7ff fc06 	bl	8003658 <vPortYield>
						xAlreadyYielded = pdTRUE;
 8003e4c:	2401      	movs	r4, #1
 8003e4e:	e7c2      	b.n	8003dd6 <xTaskResumeAll+0x2a>
							--uxPendedCounts;
 8003e50:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e52:	2c00      	cmp	r4, #0
 8003e54:	d007      	beq.n	8003e66 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
 8003e56:	f7ff ff1b 	bl	8003c90 <xTaskIncrementTick>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d0f8      	beq.n	8003e50 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <xTaskResumeAll+0xe4>)
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e7f4      	b.n	8003e50 <xTaskResumeAll+0xa4>
						uxPendedTicks = 0;
 8003e66:	2200      	movs	r2, #0
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <xTaskResumeAll+0xe8>)
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e7e8      	b.n	8003e40 <xTaskResumeAll+0x94>
BaseType_t xAlreadyYielded = pdFALSE;
 8003e6e:	2400      	movs	r4, #0
 8003e70:	e7b1      	b.n	8003dd6 <xTaskResumeAll+0x2a>
 8003e72:	2400      	movs	r4, #0
 8003e74:	e7af      	b.n	8003dd6 <xTaskResumeAll+0x2a>
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	20000d58 	.word	0x20000d58
 8003e7c:	20000d4c 	.word	0x20000d4c
 8003e80:	20000d98 	.word	0x20000d98
 8003e84:	20000d60 	.word	0x20000d60
 8003e88:	20000cc0 	.word	0x20000cc0
 8003e8c:	20000cb4 	.word	0x20000cb4
 8003e90:	20000ddc 	.word	0x20000ddc
 8003e94:	20000d54 	.word	0x20000d54

08003e98 <vTaskDelay>:
	{
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e9c:	d00e      	beq.n	8003ebc <vTaskDelay+0x24>
			configASSERT( uxSchedulerSuspended == 0 );
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <vTaskDelay+0x30>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <vTaskDelay+0x12>
 8003ea6:	b672      	cpsid	i
 8003ea8:	e7fe      	b.n	8003ea8 <vTaskDelay+0x10>
			vTaskSuspendAll();
 8003eaa:	f7ff fee9 	bl	8003c80 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003eae:	2100      	movs	r1, #0
 8003eb0:	0020      	movs	r0, r4
 8003eb2:	f7ff fe49 	bl	8003b48 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003eb6:	f7ff ff79 	bl	8003dac <xTaskResumeAll>
 8003eba:	e000      	b.n	8003ebe <vTaskDelay+0x26>
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ebc:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d101      	bne.n	8003ec6 <vTaskDelay+0x2e>
			portYIELD_WITHIN_API();
 8003ec2:	f7ff fbc9 	bl	8003658 <vPortYield>
	}
 8003ec6:	bd10      	pop	{r4, pc}
 8003ec8:	20000d58 	.word	0x20000d58

08003ecc <prvCheckTasksWaitingTermination>:
{
 8003ecc:	b510      	push	{r4, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <prvCheckTasksWaitingTermination+0x48>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01d      	beq.n	8003f12 <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 8003ed6:	f7ff fed3 	bl	8003c80 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <prvCheckTasksWaitingTermination+0x4c>)
 8003edc:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 8003ede:	f7ff ff65 	bl	8003dac <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003ee2:	2c00      	cmp	r4, #0
 8003ee4:	d0f3      	beq.n	8003ece <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 8003ee6:	f7ff fbc3 	bl	8003670 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <prvCheckTasksWaitingTermination+0x4c>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ef0:	1d20      	adds	r0, r4, #4
 8003ef2:	f7ff fb66 	bl	80035c2 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <prvCheckTasksWaitingTermination+0x50>)
 8003ef8:	6813      	ldr	r3, [r2, #0]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003efe:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <prvCheckTasksWaitingTermination+0x48>)
 8003f00:	6813      	ldr	r3, [r2, #0]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 8003f06:	f7ff fbbf 	bl	8003688 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 8003f0a:	0020      	movs	r0, r4
 8003f0c:	f7ff fd4a 	bl	80039a4 <prvDeleteTCB>
 8003f10:	e7dd      	b.n	8003ece <prvCheckTasksWaitingTermination+0x2>
}
 8003f12:	bd10      	pop	{r4, pc}
 8003f14:	20000d50 	.word	0x20000d50
 8003f18:	20000dc4 	.word	0x20000dc4
 8003f1c:	20000d4c 	.word	0x20000d4c

08003f20 <prvIdleTask>:
{
 8003f20:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 8003f22:	f7ff ffd3 	bl	8003ecc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f26:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <prvIdleTask+0x14>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d9f9      	bls.n	8003f22 <prvIdleTask+0x2>
				taskYIELD();
 8003f2e:	f7ff fb93 	bl	8003658 <vPortYield>
 8003f32:	e7f6      	b.n	8003f22 <prvIdleTask+0x2>
 8003f34:	20000cc0 	.word	0x20000cc0

08003f38 <vTaskSwitchContext>:
{
 8003f38:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <vTaskSwitchContext+0x78>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10f      	bne.n	8003f62 <vTaskSwitchContext+0x2a>
		xYieldPending = pdFALSE;
 8003f42:	2200      	movs	r2, #0
 8003f44:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <vTaskSwitchContext+0x7c>)
 8003f46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <vTaskSwitchContext+0x80>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	009a      	lsls	r2, r3, #2
 8003f4e:	18d2      	adds	r2, r2, r3
 8003f50:	0091      	lsls	r1, r2, #2
 8003f52:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <vTaskSwitchContext+0x84>)
 8003f54:	588a      	ldr	r2, [r1, r2]
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	d109      	bne.n	8003f6e <vTaskSwitchContext+0x36>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <vTaskSwitchContext+0x32>
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	e7f4      	b.n	8003f4c <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 8003f62:	2201      	movs	r2, #1
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <vTaskSwitchContext+0x7c>)
 8003f66:	601a      	str	r2, [r3, #0]
}
 8003f68:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f6a:	b672      	cpsid	i
 8003f6c:	e7fe      	b.n	8003f6c <vTaskSwitchContext+0x34>
 8003f6e:	4813      	ldr	r0, [pc, #76]	; (8003fbc <vTaskSwitchContext+0x84>)
 8003f70:	009a      	lsls	r2, r3, #2
 8003f72:	1841      	adds	r1, r0, r1
 8003f74:	684c      	ldr	r4, [r1, #4]
 8003f76:	6864      	ldr	r4, [r4, #4]
 8003f78:	604c      	str	r4, [r1, #4]
 8003f7a:	18d2      	adds	r2, r2, r3
 8003f7c:	0091      	lsls	r1, r2, #2
 8003f7e:	3108      	adds	r1, #8
 8003f80:	1840      	adds	r0, r0, r1
 8003f82:	4284      	cmp	r4, r0
 8003f84:	d00b      	beq.n	8003f9e <vTaskSwitchContext+0x66>
 8003f86:	009a      	lsls	r2, r3, #2
 8003f88:	18d2      	adds	r2, r2, r3
 8003f8a:	0091      	lsls	r1, r2, #2
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <vTaskSwitchContext+0x84>)
 8003f8e:	1852      	adds	r2, r2, r1
 8003f90:	6852      	ldr	r2, [r2, #4]
 8003f92:	68d1      	ldr	r1, [r2, #12]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <vTaskSwitchContext+0x88>)
 8003f96:	6011      	str	r1, [r2, #0]
 8003f98:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <vTaskSwitchContext+0x80>)
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	e7e4      	b.n	8003f68 <vTaskSwitchContext+0x30>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f9e:	6860      	ldr	r0, [r4, #4]
 8003fa0:	009a      	lsls	r2, r3, #2
 8003fa2:	18d2      	adds	r2, r2, r3
 8003fa4:	0091      	lsls	r1, r2, #2
 8003fa6:	4a05      	ldr	r2, [pc, #20]	; (8003fbc <vTaskSwitchContext+0x84>)
 8003fa8:	1852      	adds	r2, r2, r1
 8003faa:	6050      	str	r0, [r2, #4]
 8003fac:	e7eb      	b.n	8003f86 <vTaskSwitchContext+0x4e>
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	20000d58 	.word	0x20000d58
 8003fb4:	20000ddc 	.word	0x20000ddc
 8003fb8:	20000d60 	.word	0x20000d60
 8003fbc:	20000cc0 	.word	0x20000cc0
 8003fc0:	20000cb4 	.word	0x20000cb4

08003fc4 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003fc4:	b500      	push	{lr}
 8003fc6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8003fc8:	220c      	movs	r2, #12
 8003fca:	2100      	movs	r1, #0
 8003fcc:	a801      	add	r0, sp, #4
 8003fce:	f000 fe8b 	bl	8004ce8 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003fd2:	482d      	ldr	r0, [pc, #180]	; (8004088 <MX_ADC_Init+0xc4>)
 8003fd4:	4b2d      	ldr	r3, [pc, #180]	; (800408c <MX_ADC_Init+0xc8>)
 8003fd6:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003fdc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fde:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	6102      	str	r2, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003fe4:	2108      	movs	r1, #8
 8003fe6:	6141      	str	r1, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003fe8:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003fea:	61c3      	str	r3, [r0, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003fec:	6202      	str	r2, [r0, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003fee:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ff0:	21c2      	movs	r1, #194	; 0xc2
 8003ff2:	31ff      	adds	r1, #255	; 0xff
 8003ff4:	6281      	str	r1, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ff6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003ff8:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003ffa:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003ffc:	f7fd ff52 	bl	8001ea4 <HAL_ADC_Init>
 8004000:	2800      	cmp	r0, #0
 8004002:	d12e      	bne.n	8004062 <MX_ADC_Init+0x9e>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004004:	2301      	movs	r3, #1
 8004006:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	015b      	lsls	r3, r3, #5
 800400c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 800400e:	2302      	movs	r3, #2
 8004010:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004012:	a901      	add	r1, sp, #4
 8004014:	481c      	ldr	r0, [pc, #112]	; (8004088 <MX_ADC_Init+0xc4>)
 8004016:	f7fe f8ad 	bl	8002174 <HAL_ADC_ConfigChannel>
 800401a:	2800      	cmp	r0, #0
 800401c:	d124      	bne.n	8004068 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800401e:	2302      	movs	r3, #2
 8004020:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004022:	a901      	add	r1, sp, #4
 8004024:	4818      	ldr	r0, [pc, #96]	; (8004088 <MX_ADC_Init+0xc4>)
 8004026:	f7fe f8a5 	bl	8002174 <HAL_ADC_ConfigChannel>
 800402a:	2800      	cmp	r0, #0
 800402c:	d11f      	bne.n	800406e <MX_ADC_Init+0xaa>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800402e:	2303      	movs	r3, #3
 8004030:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004032:	a901      	add	r1, sp, #4
 8004034:	4814      	ldr	r0, [pc, #80]	; (8004088 <MX_ADC_Init+0xc4>)
 8004036:	f7fe f89d 	bl	8002174 <HAL_ADC_ConfigChannel>
 800403a:	2800      	cmp	r0, #0
 800403c:	d11a      	bne.n	8004074 <MX_ADC_Init+0xb0>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800403e:	2304      	movs	r3, #4
 8004040:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004042:	a901      	add	r1, sp, #4
 8004044:	4810      	ldr	r0, [pc, #64]	; (8004088 <MX_ADC_Init+0xc4>)
 8004046:	f7fe f895 	bl	8002174 <HAL_ADC_ConfigChannel>
 800404a:	2800      	cmp	r0, #0
 800404c:	d115      	bne.n	800407a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800404e:	2305      	movs	r3, #5
 8004050:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004052:	a901      	add	r1, sp, #4
 8004054:	480c      	ldr	r0, [pc, #48]	; (8004088 <MX_ADC_Init+0xc4>)
 8004056:	f7fe f88d 	bl	8002174 <HAL_ADC_ConfigChannel>
 800405a:	2800      	cmp	r0, #0
 800405c:	d110      	bne.n	8004080 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
  }

}
 800405e:	b005      	add	sp, #20
 8004060:	bd00      	pop	{pc}
    Error_Handler();
 8004062:	f000 fc87 	bl	8004974 <Error_Handler>
 8004066:	e7cd      	b.n	8004004 <MX_ADC_Init+0x40>
    Error_Handler();
 8004068:	f000 fc84 	bl	8004974 <Error_Handler>
 800406c:	e7d7      	b.n	800401e <MX_ADC_Init+0x5a>
    Error_Handler();
 800406e:	f000 fc81 	bl	8004974 <Error_Handler>
 8004072:	e7dc      	b.n	800402e <MX_ADC_Init+0x6a>
    Error_Handler();
 8004074:	f000 fc7e 	bl	8004974 <Error_Handler>
 8004078:	e7e1      	b.n	800403e <MX_ADC_Init+0x7a>
    Error_Handler();
 800407a:	f000 fc7b 	bl	8004974 <Error_Handler>
 800407e:	e7e6      	b.n	800404e <MX_ADC_Init+0x8a>
    Error_Handler();
 8004080:	f000 fc78 	bl	8004974 <Error_Handler>
}
 8004084:	e7eb      	b.n	800405e <MX_ADC_Init+0x9a>
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000e5c 	.word	0x20000e5c
 800408c:	40012400 	.word	0x40012400

08004090 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004090:	b530      	push	{r4, r5, lr}
 8004092:	b089      	sub	sp, #36	; 0x24
 8004094:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004096:	2214      	movs	r2, #20
 8004098:	2100      	movs	r1, #0
 800409a:	a803      	add	r0, sp, #12
 800409c:	f000 fe24 	bl	8004ce8 <memset>
  if(adcHandle->Instance==ADC1)
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_ADC_MspInit+0x88>)
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80040a8:	b009      	add	sp, #36	; 0x24
 80040aa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_ADC_MspInit+0x8c>)
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	2580      	movs	r5, #128	; 0x80
 80040b2:	00ad      	lsls	r5, r5, #2
 80040b4:	432a      	orrs	r2, r5
 80040b6:	619a      	str	r2, [r3, #24]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	402a      	ands	r2, r5
 80040bc:	9201      	str	r2, [sp, #4]
 80040be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	2180      	movs	r1, #128	; 0x80
 80040c4:	0289      	lsls	r1, r1, #10
 80040c6:	430a      	orrs	r2, r1
 80040c8:	615a      	str	r2, [r3, #20]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	400b      	ands	r3, r1
 80040ce:	9302      	str	r3, [sp, #8]
 80040d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = HV1_Pin|HV2_Pin|PILOT_ADC_Pin|IMEAS_L1_Pin 
 80040d2:	233e      	movs	r3, #62	; 0x3e
 80040d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040d6:	3b3b      	subs	r3, #59	; 0x3b
 80040d8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040da:	a903      	add	r1, sp, #12
 80040dc:	2090      	movs	r0, #144	; 0x90
 80040de:	05c0      	lsls	r0, r0, #23
 80040e0:	f7fe fa10 	bl	8002504 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80040e4:	480e      	ldr	r0, [pc, #56]	; (8004120 <HAL_ADC_MspInit+0x90>)
 80040e6:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <HAL_ADC_MspInit+0x94>)
 80040e8:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040ea:	2300      	movs	r3, #0
 80040ec:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ee:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80040f0:	2280      	movs	r2, #128	; 0x80
 80040f2:	60c2      	str	r2, [r0, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040f4:	6105      	str	r5, [r0, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040f6:	2280      	movs	r2, #128	; 0x80
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	6142      	str	r2, [r0, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80040fc:	2220      	movs	r2, #32
 80040fe:	6182      	str	r2, [r0, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004100:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004102:	f7fe f943 	bl	800238c <HAL_DMA_Init>
 8004106:	2800      	cmp	r0, #0
 8004108:	d103      	bne.n	8004112 <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <HAL_ADC_MspInit+0x90>)
 800410c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800410e:	625c      	str	r4, [r3, #36]	; 0x24
}
 8004110:	e7ca      	b.n	80040a8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8004112:	f000 fc2f 	bl	8004974 <Error_Handler>
 8004116:	e7f8      	b.n	800410a <HAL_ADC_MspInit+0x7a>
 8004118:	40012400 	.word	0x40012400
 800411c:	40021000 	.word	0x40021000
 8004120:	20000e18 	.word	0x20000e18
 8004124:	40020008 	.word	0x40020008

08004128 <adc_Start>:
  }
} 

/* USER CODE BEGIN 1 */

void adc_Start(void){
 8004128:	b510      	push	{r4, lr}
	HAL_ADC_Start_DMA(&hadc, Buffer, NB_ADC_CHANNELS);
 800412a:	2205      	movs	r2, #5
 800412c:	4902      	ldr	r1, [pc, #8]	; (8004138 <adc_Start+0x10>)
 800412e:	4803      	ldr	r0, [pc, #12]	; (800413c <adc_Start+0x14>)
 8004130:	f7fd ff7e 	bl	8002030 <HAL_ADC_Start_DMA>
}
 8004134:	bd10      	pop	{r4, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	20000e04 	.word	0x20000e04
 800413c:	20000e5c 	.word	0x20000e5c

08004140 <read_pilot_voltage>:


uint16_t read_pilot_voltage(void){
	uint32_t c;
	uint16_t mv;
	c = Buffer[2];
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <read_pilot_voltage+0x10>)
 8004142:	689b      	ldr	r3, [r3, #8]
	mv = ((uint32_t)c * 3000) / 4096;
 8004144:	4803      	ldr	r0, [pc, #12]	; (8004154 <read_pilot_voltage+0x14>)
 8004146:	4358      	muls	r0, r3
 8004148:	0b00      	lsrs	r0, r0, #12
 800414a:	b280      	uxth	r0, r0
	return mv;

}
 800414c:	4770      	bx	lr
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	20000e04 	.word	0x20000e04
 8004154:	00000bb8 	.word	0x00000bb8

08004158 <read_line1_voltage>:

uint16_t read_line1_voltage(void){
	uint32_t c;
	uint16_t mv;
	c = Buffer[0];
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <read_line1_voltage+0x10>)
 800415a:	681b      	ldr	r3, [r3, #0]
	mv = ((uint32_t)c * 3000) / 4096;
 800415c:	4803      	ldr	r0, [pc, #12]	; (800416c <read_line1_voltage+0x14>)
 800415e:	4358      	muls	r0, r3
 8004160:	0b00      	lsrs	r0, r0, #12
 8004162:	b280      	uxth	r0, r0
	return mv;
}
 8004164:	4770      	bx	lr
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20000e04 	.word	0x20000e04
 800416c:	00000bb8 	.word	0x00000bb8

08004170 <read_line2_voltage>:

uint16_t read_line2_voltage(void){
	uint32_t c;
	uint16_t mv;
	c = Buffer[1];
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <read_line2_voltage+0x10>)
 8004172:	685b      	ldr	r3, [r3, #4]
	mv = ((uint32_t)c * 3000) / 4096;
 8004174:	4803      	ldr	r0, [pc, #12]	; (8004184 <read_line2_voltage+0x14>)
 8004176:	4358      	muls	r0, r3
 8004178:	0b00      	lsrs	r0, r0, #12
 800417a:	b280      	uxth	r0, r0
	return mv;
}
 800417c:	4770      	bx	lr
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	20000e04 	.word	0x20000e04
 8004184:	00000bb8 	.word	0x00000bb8

08004188 <read_current>:

uint16_t read_current(void){
	uint32_t c;
	uint16_t mv;
	c = Buffer[3];
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <read_current+0x10>)
 800418a:	68db      	ldr	r3, [r3, #12]
	mv = ((uint32_t)c * 3000) / 4096;
 800418c:	4803      	ldr	r0, [pc, #12]	; (800419c <read_current+0x14>)
 800418e:	4358      	muls	r0, r3
 8004190:	0b00      	lsrs	r0, r0, #12
 8004192:	b280      	uxth	r0, r0
	return mv;
}
 8004194:	4770      	bx	lr
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	20000e04 	.word	0x20000e04
 800419c:	00000bb8 	.word	0x00000bb8

080041a0 <read_gfi>:

uint16_t read_gfi(void){
	uint32_t c;
	uint16_t mv;
	c = Buffer[4];
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <read_gfi+0x10>)
 80041a2:	691b      	ldr	r3, [r3, #16]
	mv = ((uint32_t)c * 3000) / 4096;
 80041a4:	4803      	ldr	r0, [pc, #12]	; (80041b4 <read_gfi+0x14>)
 80041a6:	4358      	muls	r0, r3
 80041a8:	0b00      	lsrs	r0, r0, #12
 80041aa:	b280      	uxth	r0, r0
	return mv;
}
 80041ac:	4770      	bx	lr
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	20000e04 	.word	0x20000e04
 80041b4:	00000bb8 	.word	0x00000bb8

080041b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80041b8:	b500      	push	{lr}
 80041ba:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80041bc:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <MX_DMA_Init+0x2c>)
 80041be:	6951      	ldr	r1, [r2, #20]
 80041c0:	2301      	movs	r3, #1
 80041c2:	4319      	orrs	r1, r3
 80041c4:	6151      	str	r1, [r2, #20]
 80041c6:	6952      	ldr	r2, [r2, #20]
 80041c8:	4013      	ands	r3, r2
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2103      	movs	r1, #3
 80041d2:	2009      	movs	r0, #9
 80041d4:	f7fe f874 	bl	80022c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80041d8:	2009      	movs	r0, #9
 80041da:	f7fe f8a3 	bl	8002324 <HAL_NVIC_EnableIRQ>

}
 80041de:	b003      	add	sp, #12
 80041e0:	bd00      	pop	{pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	40021000 	.word	0x40021000

080041e8 <cmpfunc>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
int cmpfunc (const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
 80041e8:	6800      	ldr	r0, [r0, #0]
 80041ea:	680b      	ldr	r3, [r1, #0]
 80041ec:	1ac0      	subs	r0, r0, r3
}
 80041ee:	4770      	bx	lr

080041f0 <StartCheckTask>:
{
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	b0c1      	sub	sp, #260	; 0x104
  for(int i = 0; i < ADC_BUFFER_SIZE; i++){
 80041f4:	2300      	movs	r3, #0
 80041f6:	e00a      	b.n	800420e <StartCheckTask+0x1e>
	  line1[i] = 0;
 80041f8:	005a      	lsls	r2, r3, #1
 80041fa:	2100      	movs	r1, #0
 80041fc:	4668      	mov	r0, sp
 80041fe:	5211      	strh	r1, [r2, r0]
	  line2[i] = 0;
 8004200:	a810      	add	r0, sp, #64	; 0x40
 8004202:	5211      	strh	r1, [r2, r0]
	  gfi[i] = 0;
 8004204:	a830      	add	r0, sp, #192	; 0xc0
 8004206:	5211      	strh	r1, [r2, r0]
	  current[i] = 0;
 8004208:	a820      	add	r0, sp, #128	; 0x80
 800420a:	5211      	strh	r1, [r2, r0]
  for(int i = 0; i < ADC_BUFFER_SIZE; i++){
 800420c:	3301      	adds	r3, #1
 800420e:	2b1f      	cmp	r3, #31
 8004210:	d9f2      	bls.n	80041f8 <StartCheckTask+0x8>
 8004212:	2600      	movs	r6, #0
 8004214:	e045      	b.n	80042a2 <StartCheckTask+0xb2>
	for(int i = 0; i < ADC_BUFFER_SIZE; i++){
 8004216:	3301      	adds	r3, #1
 8004218:	2b1f      	cmp	r3, #31
 800421a:	d818      	bhi.n	800424e <StartCheckTask+0x5e>
		if(line1[i] > peak1) {
 800421c:	005a      	lsls	r2, r3, #1
 800421e:	4668      	mov	r0, sp
 8004220:	5a12      	ldrh	r2, [r2, r0]
 8004222:	4291      	cmp	r1, r2
 8004224:	d200      	bcs.n	8004228 <StartCheckTask+0x38>
			peak1 = line1[i];
 8004226:	0011      	movs	r1, r2
		if(line2[i] > peak2) {
 8004228:	005a      	lsls	r2, r3, #1
 800422a:	a810      	add	r0, sp, #64	; 0x40
 800422c:	5a12      	ldrh	r2, [r2, r0]
 800422e:	4297      	cmp	r7, r2
 8004230:	d200      	bcs.n	8004234 <StartCheckTask+0x44>
			peak2 = line2[i];
 8004232:	0017      	movs	r7, r2
		if(current[i] > peak_current) {
 8004234:	005a      	lsls	r2, r3, #1
 8004236:	a820      	add	r0, sp, #128	; 0x80
 8004238:	5a12      	ldrh	r2, [r2, r0]
 800423a:	4294      	cmp	r4, r2
 800423c:	d200      	bcs.n	8004240 <StartCheckTask+0x50>
			peak_current = current[i];
 800423e:	0014      	movs	r4, r2
		if(gfi[i] > peak_gfi) {
 8004240:	005a      	lsls	r2, r3, #1
 8004242:	a830      	add	r0, sp, #192	; 0xc0
 8004244:	5a12      	ldrh	r2, [r2, r0]
 8004246:	4295      	cmp	r5, r2
 8004248:	d2e5      	bcs.n	8004216 <StartCheckTask+0x26>
			peak_gfi = gfi[i];
 800424a:	0015      	movs	r5, r2
 800424c:	e7e3      	b.n	8004216 <StartCheckTask+0x26>
	peak1 = (peak1 > 700) ? peak1 - 500 : 0;
 800424e:	23af      	movs	r3, #175	; 0xaf
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4299      	cmp	r1, r3
 8004254:	d942      	bls.n	80042dc <StartCheckTask+0xec>
 8004256:	39f5      	subs	r1, #245	; 0xf5
 8004258:	39ff      	subs	r1, #255	; 0xff
 800425a:	b288      	uxth	r0, r1
	peak2 = (peak2 > 700) ? peak2 - 500 : 0;
 800425c:	23af      	movs	r3, #175	; 0xaf
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	429f      	cmp	r7, r3
 8004262:	d93d      	bls.n	80042e0 <StartCheckTask+0xf0>
 8004264:	3ff5      	subs	r7, #245	; 0xf5
 8004266:	3fff      	subs	r7, #255	; 0xff
 8004268:	b2bf      	uxth	r7, r7
	v_line_rms = (double)(peak1 + peak2) / 5.67;
 800426a:	19c0      	adds	r0, r0, r7
 800426c:	f7fd fd60 	bl	8001d30 <__aeabi_i2d>
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <StartCheckTask+0xf4>)
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <StartCheckTask+0xf8>)
 8004274:	f7fc fb5e 	bl	8000934 <__aeabi_ddiv>
 8004278:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <StartCheckTask+0xfc>)
 800427a:	6018      	str	r0, [r3, #0]
 800427c:	6059      	str	r1, [r3, #4]
	GFILevel = peak_gfi;
 800427e:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <StartCheckTask+0x100>)
 8004280:	801d      	strh	r5, [r3, #0]
	MeasuredCurrent =  exp((peak_current + 466.94) / 837.41);
 8004282:	0020      	movs	r0, r4
 8004284:	f7fd fd54 	bl	8001d30 <__aeabi_i2d>
 8004288:	4a1a      	ldr	r2, [pc, #104]	; (80042f4 <StartCheckTask+0x104>)
 800428a:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <StartCheckTask+0x108>)
 800428c:	f7fc f842 	bl	8000314 <__aeabi_dadd>
 8004290:	4a1a      	ldr	r2, [pc, #104]	; (80042fc <StartCheckTask+0x10c>)
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <StartCheckTask+0x110>)
 8004294:	f7fc fb4e 	bl	8000934 <__aeabi_ddiv>
 8004298:	f000 fea8 	bl	8004fec <exp>
 800429c:	4b19      	ldr	r3, [pc, #100]	; (8004304 <StartCheckTask+0x114>)
 800429e:	6018      	str	r0, [r3, #0]
 80042a0:	6059      	str	r1, [r3, #4]
    osDelay(2);
 80042a2:	2002      	movs	r0, #2
 80042a4:	f7ff f953 	bl	800354e <osDelay>
    line1[sample_ctr % ADC_BUFFER_SIZE] = read_line1_voltage();
 80042a8:	241f      	movs	r4, #31
 80042aa:	4034      	ands	r4, r6
 80042ac:	f7ff ff54 	bl	8004158 <read_line1_voltage>
 80042b0:	0064      	lsls	r4, r4, #1
 80042b2:	466b      	mov	r3, sp
 80042b4:	52e0      	strh	r0, [r4, r3]
	line2[sample_ctr % ADC_BUFFER_SIZE] = read_line2_voltage();
 80042b6:	f7ff ff5b 	bl	8004170 <read_line2_voltage>
 80042ba:	ab10      	add	r3, sp, #64	; 0x40
 80042bc:	52e0      	strh	r0, [r4, r3]
	current[sample_ctr % ADC_BUFFER_SIZE] = read_current();
 80042be:	f7ff ff63 	bl	8004188 <read_current>
 80042c2:	ab20      	add	r3, sp, #128	; 0x80
 80042c4:	52e0      	strh	r0, [r4, r3]
	gfi[sample_ctr % ADC_BUFFER_SIZE] = read_gfi();
 80042c6:	f7ff ff6b 	bl	80041a0 <read_gfi>
 80042ca:	ab30      	add	r3, sp, #192	; 0xc0
 80042cc:	52e0      	strh	r0, [r4, r3]
	sample_ctr++;
 80042ce:	3601      	adds	r6, #1
	for(int i = 0; i < ADC_BUFFER_SIZE; i++){
 80042d0:	2300      	movs	r3, #0
	peak_gfi = 0;
 80042d2:	2500      	movs	r5, #0
	peak_current = 0;
 80042d4:	2400      	movs	r4, #0
	peak2 = 0;
 80042d6:	2700      	movs	r7, #0
	peak1 = 0;
 80042d8:	2100      	movs	r1, #0
	for(int i = 0; i < ADC_BUFFER_SIZE; i++){
 80042da:	e79d      	b.n	8004218 <StartCheckTask+0x28>
	peak1 = (peak1 > 700) ? peak1 - 500 : 0;
 80042dc:	2000      	movs	r0, #0
 80042de:	e7bd      	b.n	800425c <StartCheckTask+0x6c>
	peak2 = (peak2 > 700) ? peak2 - 500 : 0;
 80042e0:	2700      	movs	r7, #0
 80042e2:	e7c2      	b.n	800426a <StartCheckTask+0x7a>
 80042e4:	7ae147ae 	.word	0x7ae147ae
 80042e8:	4016ae14 	.word	0x4016ae14
 80042ec:	20000df8 	.word	0x20000df8
 80042f0:	20000de0 	.word	0x20000de0
 80042f4:	3d70a3d7 	.word	0x3d70a3d7
 80042f8:	407d2f0a 	.word	0x407d2f0a
 80042fc:	ae147ae1 	.word	0xae147ae1
 8004300:	408a2b47 	.word	0x408a2b47
 8004304:	20000de8 	.word	0x20000de8

08004308 <StartTaskPilot>:
{
 8004308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800430a:	46c6      	mov	lr, r8
 800430c:	b500      	push	{lr}
 800430e:	b090      	sub	sp, #64	; 0x40
  for(int i = 0; i < BUFFER_SIZE; i++){
 8004310:	2300      	movs	r3, #0
 8004312:	e004      	b.n	800431e <StartTaskPilot+0x16>
	  samples[i] = 3000;
 8004314:	009a      	lsls	r2, r3, #2
 8004316:	492a      	ldr	r1, [pc, #168]	; (80043c0 <StartTaskPilot+0xb8>)
 8004318:	4668      	mov	r0, sp
 800431a:	5011      	str	r1, [r2, r0]
  for(int i = 0; i < BUFFER_SIZE; i++){
 800431c:	3301      	adds	r3, #1
 800431e:	2b0f      	cmp	r3, #15
 8004320:	d9f8      	bls.n	8004314 <StartTaskPilot+0xc>
 8004322:	2700      	movs	r7, #0
 8004324:	2500      	movs	r5, #0
 8004326:	26ff      	movs	r6, #255	; 0xff
 8004328:	2400      	movs	r4, #0
 800432a:	e01a      	b.n	8004362 <StartTaskPilot+0x5a>
			sum += samples[i];
 800432c:	0099      	lsls	r1, r3, #2
 800432e:	466a      	mov	r2, sp
 8004330:	5889      	ldr	r1, [r1, r2]
 8004332:	1864      	adds	r4, r4, r1
		for(int i = BUFFER_SIZE /2; i < BUFFER_SIZE; i++){
 8004334:	3301      	adds	r3, #1
 8004336:	2b0f      	cmp	r3, #15
 8004338:	d9f8      	bls.n	800432c <StartTaskPilot+0x24>
		filtered = sum / (BUFFER_SIZE /2);
 800433a:	08e4      	lsrs	r4, r4, #3
		samples[samplectr++ % BUFFER_SIZE] = pilot_voltage;
 800433c:	4647      	mov	r7, r8
	if(filtered > 1600 && filtered < 2000 && time_elapsed > STATE_MIN_DELAY){
 800433e:	0022      	movs	r2, r4
 8004340:	21c7      	movs	r1, #199	; 0xc7
 8004342:	0049      	lsls	r1, r1, #1
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <StartTaskPilot+0xbc>)
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	428b      	cmp	r3, r1
 800434a:	d824      	bhi.n	8004396 <StartTaskPilot+0x8e>
 800434c:	2d37      	cmp	r5, #55	; 0x37
 800434e:	d922      	bls.n	8004396 <StartTaskPilot+0x8e>
		PilotState = PILOT_READY;
 8004350:	2202      	movs	r2, #2
 8004352:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <StartTaskPilot+0xc0>)
 8004354:	701a      	strb	r2, [r3, #0]
	if(PilotState != old_state) {
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <StartTaskPilot+0xc0>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	429e      	cmp	r6, r3
 800435c:	d000      	beq.n	8004360 <StartTaskPilot+0x58>
		time_elapsed = 0;
 800435e:	2500      	movs	r5, #0
 8004360:	001e      	movs	r6, r3
	osDelay(SAMPLE_PERIOD);
 8004362:	2009      	movs	r0, #9
 8004364:	f7ff f8f3 	bl	800354e <osDelay>
	time_elapsed++;
 8004368:	3501      	adds	r5, #1
	pilot_voltage = (int)read_pilot_voltage();
 800436a:	f7ff fee9 	bl	8004140 <read_pilot_voltage>
	if(pilot_voltage > 1400){
 800436e:	23af      	movs	r3, #175	; 0xaf
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	4298      	cmp	r0, r3
 8004374:	dde3      	ble.n	800433e <StartTaskPilot+0x36>
		samples[samplectr++ % BUFFER_SIZE] = pilot_voltage;
 8004376:	1c7b      	adds	r3, r7, #1
 8004378:	4698      	mov	r8, r3
 800437a:	230f      	movs	r3, #15
 800437c:	403b      	ands	r3, r7
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	466a      	mov	r2, sp
 8004382:	5098      	str	r0, [r3, r2]
		qsort(samples, BUFFER_SIZE, sizeof(int), cmpfunc);
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <StartTaskPilot+0xc4>)
 8004386:	2204      	movs	r2, #4
 8004388:	2110      	movs	r1, #16
 800438a:	4668      	mov	r0, sp
 800438c:	f000 fcea 	bl	8004d64 <qsort>
		for(int i = BUFFER_SIZE /2; i < BUFFER_SIZE; i++){
 8004390:	2308      	movs	r3, #8
		sum = 0;
 8004392:	2400      	movs	r4, #0
		for(int i = BUFFER_SIZE /2; i < BUFFER_SIZE; i++){
 8004394:	e7cf      	b.n	8004336 <StartTaskPilot+0x2e>
	} else if(filtered >= 2100 && filtered < 2250 && time_elapsed > STATE_MIN_DELAY){
 8004396:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <StartTaskPilot+0xc8>)
 8004398:	469c      	mov	ip, r3
 800439a:	4462      	add	r2, ip
 800439c:	2a95      	cmp	r2, #149	; 0x95
 800439e:	d805      	bhi.n	80043ac <StartTaskPilot+0xa4>
 80043a0:	2d37      	cmp	r5, #55	; 0x37
 80043a2:	d903      	bls.n	80043ac <StartTaskPilot+0xa4>
		PilotState = PILOT_VEHICLE_PRESENT;
 80043a4:	2201      	movs	r2, #1
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <StartTaskPilot+0xc0>)
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e7d4      	b.n	8004356 <StartTaskPilot+0x4e>
	} else if(filtered >= 2350 && time_elapsed > STATE_MIN_DELAY) {
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <StartTaskPilot+0xcc>)
 80043ae:	429c      	cmp	r4, r3
 80043b0:	ddd1      	ble.n	8004356 <StartTaskPilot+0x4e>
 80043b2:	2d37      	cmp	r5, #55	; 0x37
 80043b4:	d9cf      	bls.n	8004356 <StartTaskPilot+0x4e>
		PilotState = PILOT_VEHICLE_NOT_DETECTED;
 80043b6:	2200      	movs	r2, #0
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <StartTaskPilot+0xc0>)
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e7cb      	b.n	8004356 <StartTaskPilot+0x4e>
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	00000bb8 	.word	0x00000bb8
 80043c4:	fffff9bf 	.word	0xfffff9bf
 80043c8:	20000df0 	.word	0x20000df0
 80043cc:	080041e9 	.word	0x080041e9
 80043d0:	fffff7cc 	.word	0xfffff7cc
 80043d4:	0000092d 	.word	0x0000092d

080043d8 <StartTaskMainTask>:
{
 80043d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043da:	46de      	mov	lr, fp
 80043dc:	4657      	mov	r7, sl
 80043de:	464e      	mov	r6, r9
 80043e0:	4645      	mov	r5, r8
 80043e2:	b5e0      	push	{r5, r6, r7, lr}
  adc_Start();
 80043e4:	f7ff fea0 	bl	8004128 <adc_Start>
  uint16_t code = read_dip_switch();
 80043e8:	f000 fa4e 	bl	8004888 <read_dip_switch>
  if(code >= 15){
 80043ec:	280e      	cmp	r0, #14
 80043ee:	d918      	bls.n	8004422 <StartTaskMainTask+0x4a>
	  EVSECurrent = 28.0;
 80043f0:	2000      	movs	r0, #0
 80043f2:	49aa      	ldr	r1, [pc, #680]	; (800469c <StartTaskMainTask+0x2c4>)
 80043f4:	4baa      	ldr	r3, [pc, #680]	; (80046a0 <StartTaskMainTask+0x2c8>)
 80043f6:	6018      	str	r0, [r3, #0]
 80043f8:	6059      	str	r1, [r3, #4]
  set_indicator(LED_POWER, TRUE);
 80043fa:	2101      	movs	r1, #1
 80043fc:	2002      	movs	r0, #2
 80043fe:	f000 fa0d 	bl	800481c <set_indicator>
  set_contactor(FALSE);
 8004402:	2000      	movs	r0, #0
 8004404:	f000 f9f6 	bl	80047f4 <set_contactor>
  set_pwm(FALSE, 0.0);
 8004408:	2200      	movs	r2, #0
 800440a:	2300      	movs	r3, #0
 800440c:	2000      	movs	r0, #0
 800440e:	f000 fbe7 	bl	8004be0 <set_pwm>
  uint32_t gfi_persistance = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	4699      	mov	r9, r3
  uint32_t fault_persistance = 0;
 8004416:	4698      	mov	r8, r3
  BOOLEAN blinker_green = FALSE;
 8004418:	469b      	mov	fp, r3
  BOOLEAN blinker_blue = FALSE;
 800441a:	469a      	mov	sl, r3
  uint8_t state = IDLE;
 800441c:	2500      	movs	r5, #0
  uint16_t freectr = 0;
 800441e:	2400      	movs	r4, #0
 8004420:	e02c      	b.n	800447c <StartTaskMainTask+0xa4>
	  EVSECurrent = (code + 1) * 3.2;
 8004422:	3001      	adds	r0, #1
 8004424:	f7fd fc84 	bl	8001d30 <__aeabi_i2d>
 8004428:	4a9e      	ldr	r2, [pc, #632]	; (80046a4 <StartTaskMainTask+0x2cc>)
 800442a:	4b9f      	ldr	r3, [pc, #636]	; (80046a8 <StartTaskMainTask+0x2d0>)
 800442c:	f7fc feb6 	bl	800119c <__aeabi_dmul>
 8004430:	4b9b      	ldr	r3, [pc, #620]	; (80046a0 <StartTaskMainTask+0x2c8>)
 8004432:	6018      	str	r0, [r3, #0]
 8004434:	6059      	str	r1, [r3, #4]
 8004436:	e7e0      	b.n	80043fa <StartTaskMainTask+0x22>
			state = FAULT;
 8004438:	2503      	movs	r5, #3
 800443a:	e01f      	b.n	800447c <StartTaskMainTask+0xa4>
			state = FAULT;
 800443c:	2503      	movs	r5, #3
 800443e:	e01d      	b.n	800447c <StartTaskMainTask+0xa4>
    		fault_persistance = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	4698      	mov	r8, r3
    		state = CHARGING;
 8004444:	2502      	movs	r5, #2
 8004446:	e019      	b.n	800447c <StartTaskMainTask+0xa4>
			state = FAULT;
 8004448:	2503      	movs	r5, #3
 800444a:	e017      	b.n	800447c <StartTaskMainTask+0xa4>
    		state = PRESENT;
 800444c:	2501      	movs	r5, #1
 800444e:	e015      	b.n	800447c <StartTaskMainTask+0xa4>
		set_indicator(LED_DISCO_BLUE, blinker_blue = !blinker_blue);
 8004450:	4653      	mov	r3, sl
 8004452:	425a      	negs	r2, r3
 8004454:	4153      	adcs	r3, r2
 8004456:	b2db      	uxtb	r3, r3
 8004458:	469a      	mov	sl, r3
 800445a:	0019      	movs	r1, r3
 800445c:	2000      	movs	r0, #0
 800445e:	f000 f9dd 	bl	800481c <set_indicator>
 8004462:	e017      	b.n	8004494 <StartTaskMainTask+0xbc>
		gfi_persistance = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	4699      	mov	r9, r3
    switch(state){
 8004468:	2d01      	cmp	r5, #1
 800446a:	d05b      	beq.n	8004524 <StartTaskMainTask+0x14c>
 800446c:	2d00      	cmp	r5, #0
 800446e:	d020      	beq.n	80044b2 <StartTaskMainTask+0xda>
 8004470:	2d02      	cmp	r5, #2
 8004472:	d100      	bne.n	8004476 <StartTaskMainTask+0x9e>
 8004474:	e09b      	b.n	80045ae <StartTaskMainTask+0x1d6>
 8004476:	2d03      	cmp	r5, #3
 8004478:	d100      	bne.n	800447c <StartTaskMainTask+0xa4>
 800447a:	e0f6      	b.n	800466a <StartTaskMainTask+0x292>
	osDelay(MAIN_TASK_PERIOD);
 800447c:	2014      	movs	r0, #20
 800447e:	f7ff f866 	bl	800354e <osDelay>
	freectr++;
 8004482:	3401      	adds	r4, #1
 8004484:	b2a4      	uxth	r4, r4
	if(freectr % 10 == 0){
 8004486:	210a      	movs	r1, #10
 8004488:	0020      	movs	r0, r4
 800448a:	f7fb fec3 	bl	8000214 <__aeabi_uidivmod>
 800448e:	b289      	uxth	r1, r1
 8004490:	2900      	cmp	r1, #0
 8004492:	d0dd      	beq.n	8004450 <StartTaskMainTask+0x78>
	if(GFILevel > 300){
 8004494:	4b85      	ldr	r3, [pc, #532]	; (80046ac <StartTaskMainTask+0x2d4>)
 8004496:	881a      	ldrh	r2, [r3, #0]
 8004498:	2396      	movs	r3, #150	; 0x96
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	429a      	cmp	r2, r3
 800449e:	d9e1      	bls.n	8004464 <StartTaskMainTask+0x8c>
		if(gfi_persistance < FAULT_PERSISTANCE_DELAY){
 80044a0:	464b      	mov	r3, r9
 80044a2:	2b18      	cmp	r3, #24
 80044a4:	d803      	bhi.n	80044ae <StartTaskMainTask+0xd6>
			gfi_persistance++;
 80044a6:	2301      	movs	r3, #1
 80044a8:	469c      	mov	ip, r3
 80044aa:	44e1      	add	r9, ip
 80044ac:	e7dc      	b.n	8004468 <StartTaskMainTask+0x90>
			state = FAULT;
 80044ae:	2503      	movs	r5, #3
 80044b0:	e7da      	b.n	8004468 <StartTaskMainTask+0x90>
    	set_indicator(LED_DISCO_GREEN, FALSE);
 80044b2:	2100      	movs	r1, #0
 80044b4:	2001      	movs	r0, #1
 80044b6:	f000 f9b1 	bl	800481c <set_indicator>
    	set_contactor(FALSE);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f000 f99a 	bl	80047f4 <set_contactor>
    	set_indicator(LED_READY, TRUE);
 80044c0:	2101      	movs	r1, #1
 80044c2:	2003      	movs	r0, #3
 80044c4:	f000 f9aa 	bl	800481c <set_indicator>
    	set_indicator(LED_CONNECTED, FALSE);
 80044c8:	2100      	movs	r1, #0
 80044ca:	2004      	movs	r0, #4
 80044cc:	f000 f9a6 	bl	800481c <set_indicator>
		set_indicator(LED_CHARGING, FALSE);
 80044d0:	2100      	movs	r1, #0
 80044d2:	2005      	movs	r0, #5
 80044d4:	f000 f9a2 	bl	800481c <set_indicator>
		set_indicator(LED_FAULT, FALSE);
 80044d8:	2100      	movs	r1, #0
 80044da:	2006      	movs	r0, #6
 80044dc:	f000 f99e 	bl	800481c <set_indicator>
		if(v_line_rms > 80.0){
 80044e0:	4b73      	ldr	r3, [pc, #460]	; (80046b0 <StartTaskMainTask+0x2d8>)
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	4b72      	ldr	r3, [pc, #456]	; (80046b4 <StartTaskMainTask+0x2dc>)
 80044ea:	f7fb fec3 	bl	8000274 <__aeabi_dcmpgt>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d015      	beq.n	800451e <StartTaskMainTask+0x146>
			fault_persistance++;
 80044f2:	2301      	movs	r3, #1
 80044f4:	469c      	mov	ip, r3
 80044f6:	44e0      	add	r8, ip
		if(fault_persistance > FAULT_PERSISTANCE_DELAY){
 80044f8:	4643      	mov	r3, r8
 80044fa:	2b19      	cmp	r3, #25
 80044fc:	d89c      	bhi.n	8004438 <StartTaskMainTask+0x60>
		} else if(PilotState == PILOT_VEHICLE_PRESENT || PilotState == PILOT_READY){
 80044fe:	4b6e      	ldr	r3, [pc, #440]	; (80046b8 <StartTaskMainTask+0x2e0>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	3b01      	subs	r3, #1
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d8b8      	bhi.n	800447c <StartTaskMainTask+0xa4>
    		set_pwm(TRUE, EVSECurrent);
 800450a:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <StartTaskMainTask+0x2c8>)
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2001      	movs	r0, #1
 8004512:	f000 fb65 	bl	8004be0 <set_pwm>
			fault_persistance = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	4698      	mov	r8, r3
    		state = PRESENT;
 800451a:	2501      	movs	r5, #1
 800451c:	e7ae      	b.n	800447c <StartTaskMainTask+0xa4>
			fault_persistance = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	4698      	mov	r8, r3
 8004522:	e7e9      	b.n	80044f8 <StartTaskMainTask+0x120>
    	set_indicator(LED_DISCO_GREEN, TRUE);
 8004524:	2101      	movs	r1, #1
 8004526:	2001      	movs	r0, #1
 8004528:	f000 f978 	bl	800481c <set_indicator>
    	set_contactor(TRUE);
 800452c:	2001      	movs	r0, #1
 800452e:	f000 f961 	bl	80047f4 <set_contactor>
    	set_indicator(LED_READY, TRUE);
 8004532:	2101      	movs	r1, #1
 8004534:	2003      	movs	r0, #3
 8004536:	f000 f971 	bl	800481c <set_indicator>
    	set_indicator(LED_CONNECTED, TRUE);
 800453a:	2101      	movs	r1, #1
 800453c:	2004      	movs	r0, #4
 800453e:	f000 f96d 	bl	800481c <set_indicator>
		set_indicator(LED_CHARGING, FALSE);
 8004542:	2100      	movs	r1, #0
 8004544:	2005      	movs	r0, #5
 8004546:	f000 f969 	bl	800481c <set_indicator>
		set_indicator(LED_FAULT, FALSE);
 800454a:	2100      	movs	r1, #0
 800454c:	2006      	movs	r0, #6
 800454e:	f000 f965 	bl	800481c <set_indicator>
		if(v_line_rms < 90.0 || v_line_rms > 300.00){
 8004552:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <StartTaskMainTask+0x2d8>)
 8004554:	681e      	ldr	r6, [r3, #0]
 8004556:	685f      	ldr	r7, [r3, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	4b58      	ldr	r3, [pc, #352]	; (80046bc <StartTaskMainTask+0x2e4>)
 800455c:	0030      	movs	r0, r6
 800455e:	0039      	movs	r1, r7
 8004560:	f7fb fe74 	bl	800024c <__aeabi_dcmplt>
 8004564:	2800      	cmp	r0, #0
 8004566:	d107      	bne.n	8004578 <StartTaskMainTask+0x1a0>
 8004568:	2200      	movs	r2, #0
 800456a:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <StartTaskMainTask+0x2e8>)
 800456c:	0030      	movs	r0, r6
 800456e:	0039      	movs	r1, r7
 8004570:	f7fb fe80 	bl	8000274 <__aeabi_dcmpgt>
 8004574:	2800      	cmp	r0, #0
 8004576:	d017      	beq.n	80045a8 <StartTaskMainTask+0x1d0>
			fault_persistance++;
 8004578:	2301      	movs	r3, #1
 800457a:	469c      	mov	ip, r3
 800457c:	44e0      	add	r8, ip
		if(fault_persistance > FAULT_PERSISTANCE_DELAY){
 800457e:	4643      	mov	r3, r8
 8004580:	2b19      	cmp	r3, #25
 8004582:	d900      	bls.n	8004586 <StartTaskMainTask+0x1ae>
 8004584:	e75a      	b.n	800443c <StartTaskMainTask+0x64>
		} else if(PilotState == PILOT_READY){
 8004586:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <StartTaskMainTask+0x2e0>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d100      	bne.n	8004590 <StartTaskMainTask+0x1b8>
 800458e:	e757      	b.n	8004440 <StartTaskMainTask+0x68>
    	} else if(PilotState == PILOT_VEHICLE_NOT_DETECTED){
 8004590:	2b00      	cmp	r3, #0
 8004592:	d000      	beq.n	8004596 <StartTaskMainTask+0x1be>
 8004594:	e772      	b.n	800447c <StartTaskMainTask+0xa4>
    		set_pwm(FALSE, 0.0);
 8004596:	2200      	movs	r2, #0
 8004598:	2300      	movs	r3, #0
 800459a:	2000      	movs	r0, #0
 800459c:	f000 fb20 	bl	8004be0 <set_pwm>
    		fault_persistance = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	4698      	mov	r8, r3
    		state = IDLE;
 80045a4:	2500      	movs	r5, #0
 80045a6:	e769      	b.n	800447c <StartTaskMainTask+0xa4>
			fault_persistance = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	4698      	mov	r8, r3
 80045ac:	e7e7      	b.n	800457e <StartTaskMainTask+0x1a6>
    	if(freectr % 20 == 0){
 80045ae:	2114      	movs	r1, #20
 80045b0:	0020      	movs	r0, r4
 80045b2:	f7fb fe2f 	bl	8000214 <__aeabi_uidivmod>
 80045b6:	b289      	uxth	r1, r1
 80045b8:	2900      	cmp	r1, #0
 80045ba:	d049      	beq.n	8004650 <StartTaskMainTask+0x278>
    	set_contactor(TRUE);
 80045bc:	2001      	movs	r0, #1
 80045be:	f000 f919 	bl	80047f4 <set_contactor>
    	set_indicator(LED_READY, TRUE);
 80045c2:	2101      	movs	r1, #1
 80045c4:	2003      	movs	r0, #3
 80045c6:	f000 f929 	bl	800481c <set_indicator>
    	set_indicator(LED_CONNECTED, TRUE);
 80045ca:	2101      	movs	r1, #1
 80045cc:	2004      	movs	r0, #4
 80045ce:	f000 f925 	bl	800481c <set_indicator>
		set_indicator(LED_CHARGING, TRUE);
 80045d2:	2101      	movs	r1, #1
 80045d4:	2005      	movs	r0, #5
 80045d6:	f000 f921 	bl	800481c <set_indicator>
		set_indicator(LED_FAULT, FALSE);
 80045da:	2100      	movs	r1, #0
 80045dc:	2006      	movs	r0, #6
 80045de:	f000 f91d 	bl	800481c <set_indicator>
		if(v_line_rms < 90.0 || v_line_rms > 300.00 || MeasuredCurrent > EVSECurrent * 1.25){
 80045e2:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <StartTaskMainTask+0x2d8>)
 80045e4:	681e      	ldr	r6, [r3, #0]
 80045e6:	685f      	ldr	r7, [r3, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	4b34      	ldr	r3, [pc, #208]	; (80046bc <StartTaskMainTask+0x2e4>)
 80045ec:	0030      	movs	r0, r6
 80045ee:	0039      	movs	r1, r7
 80045f0:	f7fb fe2c 	bl	800024c <__aeabi_dcmplt>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	d115      	bne.n	8004624 <StartTaskMainTask+0x24c>
 80045f8:	2200      	movs	r2, #0
 80045fa:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <StartTaskMainTask+0x2e8>)
 80045fc:	0030      	movs	r0, r6
 80045fe:	0039      	movs	r1, r7
 8004600:	f7fb fe38 	bl	8000274 <__aeabi_dcmpgt>
 8004604:	2800      	cmp	r0, #0
 8004606:	d10d      	bne.n	8004624 <StartTaskMainTask+0x24c>
 8004608:	2200      	movs	r2, #0
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <StartTaskMainTask+0x2ec>)
 800460c:	4924      	ldr	r1, [pc, #144]	; (80046a0 <StartTaskMainTask+0x2c8>)
 800460e:	6808      	ldr	r0, [r1, #0]
 8004610:	6849      	ldr	r1, [r1, #4]
 8004612:	f7fc fdc3 	bl	800119c <__aeabi_dmul>
 8004616:	4b2c      	ldr	r3, [pc, #176]	; (80046c8 <StartTaskMainTask+0x2f0>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f7fb fe16 	bl	800024c <__aeabi_dcmplt>
 8004620:	2800      	cmp	r0, #0
 8004622:	d01f      	beq.n	8004664 <StartTaskMainTask+0x28c>
			fault_persistance++;
 8004624:	2301      	movs	r3, #1
 8004626:	469c      	mov	ip, r3
 8004628:	44e0      	add	r8, ip
		if(fault_persistance > FAULT_PERSISTANCE_DELAY){
 800462a:	4643      	mov	r3, r8
 800462c:	2b19      	cmp	r3, #25
 800462e:	d900      	bls.n	8004632 <StartTaskMainTask+0x25a>
 8004630:	e70a      	b.n	8004448 <StartTaskMainTask+0x70>
		} else if(PilotState == PILOT_VEHICLE_PRESENT){
 8004632:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <StartTaskMainTask+0x2e0>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d100      	bne.n	800463c <StartTaskMainTask+0x264>
 800463a:	e707      	b.n	800444c <StartTaskMainTask+0x74>
    	} else if(PilotState == PILOT_VEHICLE_NOT_DETECTED){
 800463c:	2b00      	cmp	r3, #0
 800463e:	d000      	beq.n	8004642 <StartTaskMainTask+0x26a>
 8004640:	e71c      	b.n	800447c <StartTaskMainTask+0xa4>
    		set_pwm(FALSE, 0.0);
 8004642:	2200      	movs	r2, #0
 8004644:	2300      	movs	r3, #0
 8004646:	2000      	movs	r0, #0
 8004648:	f000 faca 	bl	8004be0 <set_pwm>
    		state = IDLE;
 800464c:	2500      	movs	r5, #0
 800464e:	e715      	b.n	800447c <StartTaskMainTask+0xa4>
    		set_indicator(LED_DISCO_GREEN, blinker_green = !blinker_green);
 8004650:	465b      	mov	r3, fp
 8004652:	425a      	negs	r2, r3
 8004654:	4153      	adcs	r3, r2
 8004656:	b2db      	uxtb	r3, r3
 8004658:	469b      	mov	fp, r3
 800465a:	0019      	movs	r1, r3
 800465c:	2001      	movs	r0, #1
 800465e:	f000 f8dd 	bl	800481c <set_indicator>
 8004662:	e7ab      	b.n	80045bc <StartTaskMainTask+0x1e4>
			fault_persistance = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	4698      	mov	r8, r3
 8004668:	e7df      	b.n	800462a <StartTaskMainTask+0x252>
    	set_indicator(LED_DISCO_GREEN, FALSE);
 800466a:	2100      	movs	r1, #0
 800466c:	2001      	movs	r0, #1
 800466e:	f000 f8d5 	bl	800481c <set_indicator>
    	set_contactor(FALSE);
 8004672:	2000      	movs	r0, #0
 8004674:	f000 f8be 	bl	80047f4 <set_contactor>
    	set_indicator(LED_READY, FALSE);
 8004678:	2100      	movs	r1, #0
 800467a:	2003      	movs	r0, #3
 800467c:	f000 f8ce 	bl	800481c <set_indicator>
    	set_indicator(LED_CONNECTED, FALSE);
 8004680:	2100      	movs	r1, #0
 8004682:	2004      	movs	r0, #4
 8004684:	f000 f8ca 	bl	800481c <set_indicator>
		set_indicator(LED_CHARGING, FALSE);
 8004688:	2100      	movs	r1, #0
 800468a:	2005      	movs	r0, #5
 800468c:	f000 f8c6 	bl	800481c <set_indicator>
		set_indicator(LED_FAULT, TRUE);
 8004690:	2101      	movs	r1, #1
 8004692:	2006      	movs	r0, #6
 8004694:	f000 f8c2 	bl	800481c <set_indicator>
    	break;
 8004698:	e6f0      	b.n	800447c <StartTaskMainTask+0xa4>
 800469a:	46c0      	nop			; (mov r8, r8)
 800469c:	403c0000 	.word	0x403c0000
 80046a0:	20000008 	.word	0x20000008
 80046a4:	9999999a 	.word	0x9999999a
 80046a8:	40099999 	.word	0x40099999
 80046ac:	20000de0 	.word	0x20000de0
 80046b0:	20000df8 	.word	0x20000df8
 80046b4:	40540000 	.word	0x40540000
 80046b8:	20000df0 	.word	0x20000df0
 80046bc:	40568000 	.word	0x40568000
 80046c0:	4072c000 	.word	0x4072c000
 80046c4:	3ff40000 	.word	0x3ff40000
 80046c8:	20000de8 	.word	0x20000de8

080046cc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	b090      	sub	sp, #64	; 0x40
  osThreadDef(Check, StartCheckTask, osPriorityNormal, 0, 128);
 80046d0:	a80b      	add	r0, sp, #44	; 0x2c
 80046d2:	4c13      	ldr	r4, [pc, #76]	; (8004720 <MX_FREERTOS_Init+0x54>)
 80046d4:	0003      	movs	r3, r0
 80046d6:	0022      	movs	r2, r4
 80046d8:	ca62      	ldmia	r2!, {r1, r5, r6}
 80046da:	c362      	stmia	r3!, {r1, r5, r6}
 80046dc:	ca22      	ldmia	r2!, {r1, r5}
 80046de:	c322      	stmia	r3!, {r1, r5}
  CheckHandle = osThreadCreate(osThread(Check), NULL);
 80046e0:	2100      	movs	r1, #0
 80046e2:	f7fe ff1a 	bl	800351a <osThreadCreate>
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <MX_FREERTOS_Init+0x58>)
 80046e8:	6018      	str	r0, [r3, #0]
  osThreadDef(Pilot, StartTaskPilot, osPriorityNormal, 0, 128);
 80046ea:	a806      	add	r0, sp, #24
 80046ec:	0002      	movs	r2, r0
 80046ee:	0023      	movs	r3, r4
 80046f0:	3314      	adds	r3, #20
 80046f2:	cb62      	ldmia	r3!, {r1, r5, r6}
 80046f4:	c262      	stmia	r2!, {r1, r5, r6}
 80046f6:	cb22      	ldmia	r3!, {r1, r5}
 80046f8:	c222      	stmia	r2!, {r1, r5}
  PilotHandle = osThreadCreate(osThread(Pilot), NULL);
 80046fa:	2100      	movs	r1, #0
 80046fc:	f7fe ff0d 	bl	800351a <osThreadCreate>
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <MX_FREERTOS_Init+0x5c>)
 8004702:	6018      	str	r0, [r3, #0]
  osThreadDef(MainTask, StartTaskMainTask, osPriorityIdle, 0, 128);
 8004704:	a801      	add	r0, sp, #4
 8004706:	0002      	movs	r2, r0
 8004708:	3428      	adds	r4, #40	; 0x28
 800470a:	cc2a      	ldmia	r4!, {r1, r3, r5}
 800470c:	c22a      	stmia	r2!, {r1, r3, r5}
 800470e:	cc0a      	ldmia	r4!, {r1, r3}
 8004710:	c20a      	stmia	r2!, {r1, r3}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8004712:	2100      	movs	r1, #0
 8004714:	f7fe ff01 	bl	800351a <osThreadCreate>
 8004718:	4b04      	ldr	r3, [pc, #16]	; (800472c <MX_FREERTOS_Init+0x60>)
 800471a:	6018      	str	r0, [r3, #0]
}
 800471c:	b010      	add	sp, #64	; 0x40
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	08005408 	.word	0x08005408
 8004724:	20000eb0 	.word	0x20000eb0
 8004728:	20000ea8 	.word	0x20000ea8
 800472c:	20000eac 	.word	0x20000eac

08004730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004732:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004734:	2214      	movs	r2, #20
 8004736:	2100      	movs	r1, #0
 8004738:	a803      	add	r0, sp, #12
 800473a:	f000 fad5 	bl	8004ce8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800473e:	4b28      	ldr	r3, [pc, #160]	; (80047e0 <MX_GPIO_Init+0xb0>)
 8004740:	6959      	ldr	r1, [r3, #20]
 8004742:	2080      	movs	r0, #128	; 0x80
 8004744:	0280      	lsls	r0, r0, #10
 8004746:	4301      	orrs	r1, r0
 8004748:	6159      	str	r1, [r3, #20]
 800474a:	695a      	ldr	r2, [r3, #20]
 800474c:	4002      	ands	r2, r0
 800474e:	9200      	str	r2, [sp, #0]
 8004750:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004752:	6959      	ldr	r1, [r3, #20]
 8004754:	2080      	movs	r0, #128	; 0x80
 8004756:	02c0      	lsls	r0, r0, #11
 8004758:	4301      	orrs	r1, r0
 800475a:	6159      	str	r1, [r3, #20]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	4002      	ands	r2, r0
 8004760:	9201      	str	r2, [sp, #4]
 8004762:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	2180      	movs	r1, #128	; 0x80
 8004768:	0309      	lsls	r1, r1, #12
 800476a:	430a      	orrs	r2, r1
 800476c:	615a      	str	r2, [r3, #20]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	400b      	ands	r3, r1
 8004772:	9302      	str	r3, [sp, #8]
 8004774:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D8_Pin|LED_D9_Pin|LED_D10_Pin|CONTACTOR_Pin 
 8004776:	4f1b      	ldr	r7, [pc, #108]	; (80047e4 <MX_GPIO_Init+0xb4>)
 8004778:	2200      	movs	r2, #0
 800477a:	0039      	movs	r1, r7
 800477c:	481a      	ldr	r0, [pc, #104]	; (80047e8 <MX_GPIO_Init+0xb8>)
 800477e:	f7fd ff8e 	bl	800269e <HAL_GPIO_WritePin>
                          |LED_D11_Pin|LED_D12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8004782:	26c0      	movs	r6, #192	; 0xc0
 8004784:	00b6      	lsls	r6, r6, #2
 8004786:	2200      	movs	r2, #0
 8004788:	0031      	movs	r1, r6
 800478a:	4818      	ldr	r0, [pc, #96]	; (80047ec <MX_GPIO_Init+0xbc>)
 800478c:	f7fd ff87 	bl	800269e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8004790:	2501      	movs	r5, #1
 8004792:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004794:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <MX_GPIO_Init+0xc0>)
 8004796:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004798:	2400      	movs	r4, #0
 800479a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800479c:	a903      	add	r1, sp, #12
 800479e:	2090      	movs	r0, #144	; 0x90
 80047a0:	05c0      	lsls	r0, r0, #23
 80047a2:	f7fd feaf 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LED_D8_Pin|LED_D9_Pin|LED_D10_Pin|CONTACTOR_Pin 
 80047a6:	9703      	str	r7, [sp, #12]
                          |LED_D11_Pin|LED_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ac:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ae:	a903      	add	r1, sp, #12
 80047b0:	480d      	ldr	r0, [pc, #52]	; (80047e8 <MX_GPIO_Init+0xb8>)
 80047b2:	f7fd fea7 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80047b6:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047b8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ba:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047bc:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047be:	a903      	add	r1, sp, #12
 80047c0:	480a      	ldr	r0, [pc, #40]	; (80047ec <MX_GPIO_Init+0xbc>)
 80047c2:	f7fd fe9f 	bl	8002504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIPSW0_Pin|DIPSW1_Pin|DIPSW2_Pin|DIPSW3_Pin;
 80047c6:	23f0      	movs	r3, #240	; 0xf0
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047cc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ce:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d0:	a903      	add	r1, sp, #12
 80047d2:	2090      	movs	r0, #144	; 0x90
 80047d4:	05c0      	lsls	r0, r0, #23
 80047d6:	f7fd fe95 	bl	8002504 <HAL_GPIO_Init>

}
 80047da:	b009      	add	sp, #36	; 0x24
 80047dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	40021000 	.word	0x40021000
 80047e4:	00008037 	.word	0x00008037
 80047e8:	48000400 	.word	0x48000400
 80047ec:	48000800 	.word	0x48000800
 80047f0:	10120000 	.word	0x10120000

080047f4 <set_contactor>:

/* USER CODE BEGIN 2 */
void set_contactor(BOOLEAN state){
 80047f4:	b510      	push	{r4, lr}
	if(state){
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d106      	bne.n	8004808 <set_contactor+0x14>
		HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, GPIO_PIN_SET);
	} else {
		HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, GPIO_PIN_RESET);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2180      	movs	r1, #128	; 0x80
 80047fe:	0209      	lsls	r1, r1, #8
 8004800:	4805      	ldr	r0, [pc, #20]	; (8004818 <set_contactor+0x24>)
 8004802:	f7fd ff4c 	bl	800269e <HAL_GPIO_WritePin>
	}

}
 8004806:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CONTACTOR_GPIO_Port, CONTACTOR_Pin, GPIO_PIN_SET);
 8004808:	2201      	movs	r2, #1
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	0209      	lsls	r1, r1, #8
 800480e:	4802      	ldr	r0, [pc, #8]	; (8004818 <set_contactor+0x24>)
 8004810:	f7fd ff45 	bl	800269e <HAL_GPIO_WritePin>
 8004814:	e7f7      	b.n	8004806 <set_contactor+0x12>
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	48000400 	.word	0x48000400

0800481c <set_indicator>:

void set_indicator(INDICATOR led, BOOLEAN state){
 800481c:	b510      	push	{r4, lr}
	state = state ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800481e:	1e4a      	subs	r2, r1, #1
 8004820:	4191      	sbcs	r1, r2
 8004822:	b2ca      	uxtb	r2, r1
	switch(led){
 8004824:	2806      	cmp	r0, #6
 8004826:	d808      	bhi.n	800483a <set_indicator+0x1e>
 8004828:	0080      	lsls	r0, r0, #2
 800482a:	4b14      	ldr	r3, [pc, #80]	; (800487c <set_indicator+0x60>)
 800482c:	581b      	ldr	r3, [r3, r0]
 800482e:	469f      	mov	pc, r3
	case LED_DISCO_BLUE:
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, state);
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	0049      	lsls	r1, r1, #1
 8004834:	4812      	ldr	r0, [pc, #72]	; (8004880 <set_indicator+0x64>)
 8004836:	f7fd ff32 	bl	800269e <HAL_GPIO_WritePin>
		break;
	case LED_FAULT:
		HAL_GPIO_WritePin(LED_D12_GPIO_Port, LED_D12_Pin, state);
		break;
	}
}
 800483a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, state);
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	0089      	lsls	r1, r1, #2
 8004840:	480f      	ldr	r0, [pc, #60]	; (8004880 <set_indicator+0x64>)
 8004842:	f7fd ff2c 	bl	800269e <HAL_GPIO_WritePin>
		break;
 8004846:	e7f8      	b.n	800483a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D8_GPIO_Port, LED_D8_Pin, state);
 8004848:	2101      	movs	r1, #1
 800484a:	480e      	ldr	r0, [pc, #56]	; (8004884 <set_indicator+0x68>)
 800484c:	f7fd ff27 	bl	800269e <HAL_GPIO_WritePin>
		break;
 8004850:	e7f3      	b.n	800483a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D9_GPIO_Port, LED_D9_Pin, state);
 8004852:	2102      	movs	r1, #2
 8004854:	480b      	ldr	r0, [pc, #44]	; (8004884 <set_indicator+0x68>)
 8004856:	f7fd ff22 	bl	800269e <HAL_GPIO_WritePin>
		break;
 800485a:	e7ee      	b.n	800483a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D10_GPIO_Port, LED_D10_Pin, state);
 800485c:	2104      	movs	r1, #4
 800485e:	4809      	ldr	r0, [pc, #36]	; (8004884 <set_indicator+0x68>)
 8004860:	f7fd ff1d 	bl	800269e <HAL_GPIO_WritePin>
		break;
 8004864:	e7e9      	b.n	800483a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D11_GPIO_Port, LED_D11_Pin, state);
 8004866:	2110      	movs	r1, #16
 8004868:	4806      	ldr	r0, [pc, #24]	; (8004884 <set_indicator+0x68>)
 800486a:	f7fd ff18 	bl	800269e <HAL_GPIO_WritePin>
		break;
 800486e:	e7e4      	b.n	800483a <set_indicator+0x1e>
		HAL_GPIO_WritePin(LED_D12_GPIO_Port, LED_D12_Pin, state);
 8004870:	2120      	movs	r1, #32
 8004872:	4804      	ldr	r0, [pc, #16]	; (8004884 <set_indicator+0x68>)
 8004874:	f7fd ff13 	bl	800269e <HAL_GPIO_WritePin>
}
 8004878:	e7df      	b.n	800483a <set_indicator+0x1e>
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	080054e8 	.word	0x080054e8
 8004880:	48000800 	.word	0x48000800
 8004884:	48000400 	.word	0x48000400

08004888 <read_dip_switch>:

// returns a code from 0 to 15 according to the dip switches's positions
uint16_t read_dip_switch(void){
 8004888:	b570      	push	{r4, r5, r6, lr}
	uint16_t value = 0;
	value |= HAL_GPIO_ReadPin(DIPSW0_GPIO_Port, DIPSW0_Pin) == GPIO_PIN_SET ? 1 : 0;
 800488a:	2590      	movs	r5, #144	; 0x90
 800488c:	05ed      	lsls	r5, r5, #23
 800488e:	2180      	movs	r1, #128	; 0x80
 8004890:	0049      	lsls	r1, r1, #1
 8004892:	0028      	movs	r0, r5
 8004894:	f7fd fefc 	bl	8002690 <HAL_GPIO_ReadPin>
 8004898:	3801      	subs	r0, #1
 800489a:	4244      	negs	r4, r0
 800489c:	4144      	adcs	r4, r0
	value |= HAL_GPIO_ReadPin(DIPSW1_GPIO_Port, DIPSW1_Pin) == GPIO_PIN_SET ? 2 : 0;
 800489e:	2180      	movs	r1, #128	; 0x80
 80048a0:	0089      	lsls	r1, r1, #2
 80048a2:	0028      	movs	r0, r5
 80048a4:	f7fd fef4 	bl	8002690 <HAL_GPIO_ReadPin>
 80048a8:	2801      	cmp	r0, #1
 80048aa:	d016      	beq.n	80048da <read_dip_switch+0x52>
 80048ac:	2000      	movs	r0, #0
 80048ae:	4304      	orrs	r4, r0
	value |= HAL_GPIO_ReadPin(DIPSW2_GPIO_Port, DIPSW2_Pin) == GPIO_PIN_SET ? 4 : 0;
 80048b0:	2180      	movs	r1, #128	; 0x80
 80048b2:	00c9      	lsls	r1, r1, #3
 80048b4:	2090      	movs	r0, #144	; 0x90
 80048b6:	05c0      	lsls	r0, r0, #23
 80048b8:	f7fd feea 	bl	8002690 <HAL_GPIO_ReadPin>
 80048bc:	2801      	cmp	r0, #1
 80048be:	d00e      	beq.n	80048de <read_dip_switch+0x56>
 80048c0:	2000      	movs	r0, #0
 80048c2:	4304      	orrs	r4, r0
	value |= HAL_GPIO_ReadPin(DIPSW3_GPIO_Port, DIPSW3_Pin) == GPIO_PIN_SET ? 8 : 0;
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	0109      	lsls	r1, r1, #4
 80048c8:	2090      	movs	r0, #144	; 0x90
 80048ca:	05c0      	lsls	r0, r0, #23
 80048cc:	f7fd fee0 	bl	8002690 <HAL_GPIO_ReadPin>
 80048d0:	2801      	cmp	r0, #1
 80048d2:	d006      	beq.n	80048e2 <read_dip_switch+0x5a>
 80048d4:	2000      	movs	r0, #0
 80048d6:	4320      	orrs	r0, r4
	return value;
}
 80048d8:	bd70      	pop	{r4, r5, r6, pc}
	value |= HAL_GPIO_ReadPin(DIPSW1_GPIO_Port, DIPSW1_Pin) == GPIO_PIN_SET ? 2 : 0;
 80048da:	3001      	adds	r0, #1
 80048dc:	e7e7      	b.n	80048ae <read_dip_switch+0x26>
	value |= HAL_GPIO_ReadPin(DIPSW2_GPIO_Port, DIPSW2_Pin) == GPIO_PIN_SET ? 4 : 0;
 80048de:	3003      	adds	r0, #3
 80048e0:	e7ef      	b.n	80048c2 <read_dip_switch+0x3a>
	value |= HAL_GPIO_ReadPin(DIPSW3_GPIO_Port, DIPSW3_Pin) == GPIO_PIN_SET ? 8 : 0;
 80048e2:	3007      	adds	r0, #7
 80048e4:	e7f7      	b.n	80048d6 <read_dip_switch+0x4e>

080048e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048e6:	b510      	push	{r4, lr}
 80048e8:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048ea:	2230      	movs	r2, #48	; 0x30
 80048ec:	2100      	movs	r1, #0
 80048ee:	a804      	add	r0, sp, #16
 80048f0:	f000 f9fa 	bl	8004ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048f4:	2410      	movs	r4, #16
 80048f6:	2210      	movs	r2, #16
 80048f8:	2100      	movs	r1, #0
 80048fa:	4668      	mov	r0, sp
 80048fc:	f000 f9f4 	bl	8004ce8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004900:	2312      	movs	r3, #18
 8004902:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004904:	3b11      	subs	r3, #17
 8004906:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004908:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800490a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800490c:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800490e:	3c0e      	subs	r4, #14
 8004910:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004912:	23a0      	movs	r3, #160	; 0xa0
 8004914:	039b      	lsls	r3, r3, #14
 8004916:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004918:	a804      	add	r0, sp, #16
 800491a:	f7fd fec7 	bl	80026ac <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800491e:	2307      	movs	r3, #7
 8004920:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004922:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004924:	2300      	movs	r3, #0
 8004926:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004928:	9303      	str	r3, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800492a:	2101      	movs	r1, #1
 800492c:	4668      	mov	r0, sp
 800492e:	f7fe f919 	bl	8002b64 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8004932:	b010      	add	sp, #64	; 0x40
 8004934:	bd10      	pop	{r4, pc}

08004936 <main>:
{
 8004936:	b510      	push	{r4, lr}
  HAL_Init();
 8004938:	f7fd fa3c 	bl	8001db4 <HAL_Init>
  SystemClock_Config();
 800493c:	f7ff ffd3 	bl	80048e6 <SystemClock_Config>
  MX_GPIO_Init();
 8004940:	f7ff fef6 	bl	8004730 <MX_GPIO_Init>
  MX_DMA_Init();
 8004944:	f7ff fc38 	bl	80041b8 <MX_DMA_Init>
  MX_ADC_Init();
 8004948:	f7ff fb3c 	bl	8003fc4 <MX_ADC_Init>
  MX_TIM2_Init();
 800494c:	f000 f8ec 	bl	8004b28 <MX_TIM2_Init>
  MX_FREERTOS_Init();
 8004950:	f7ff febc 	bl	80046cc <MX_FREERTOS_Init>
  osKernelStart();
 8004954:	f7fe fddc 	bl	8003510 <osKernelStart>
 8004958:	e7fe      	b.n	8004958 <main+0x22>
	...

0800495c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800495e:	6802      	ldr	r2, [r0, #0]
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004962:	429a      	cmp	r2, r3
 8004964:	d000      	beq.n	8004968 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004966:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8004968:	f7fd fa34 	bl	8001dd4 <HAL_IncTick>
}
 800496c:	e7fb      	b.n	8004966 <HAL_TIM_PeriodElapsedCallback+0xa>
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	40012c00 	.word	0x40012c00

08004974 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004974:	4770      	bx	lr
	...

08004978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004978:	b500      	push	{lr}
 800497a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <HAL_MspInit+0x38>)
 800497e:	6999      	ldr	r1, [r3, #24]
 8004980:	2201      	movs	r2, #1
 8004982:	4311      	orrs	r1, r2
 8004984:	6199      	str	r1, [r3, #24]
 8004986:	6999      	ldr	r1, [r3, #24]
 8004988:	400a      	ands	r2, r1
 800498a:	9200      	str	r2, [sp, #0]
 800498c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	0549      	lsls	r1, r1, #21
 8004994:	430a      	orrs	r2, r1
 8004996:	61da      	str	r2, [r3, #28]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	400b      	ands	r3, r1
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80049a0:	2200      	movs	r2, #0
 80049a2:	2103      	movs	r1, #3
 80049a4:	2002      	movs	r0, #2
 80049a6:	4240      	negs	r0, r0
 80049a8:	f7fd fc8a 	bl	80022c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049ac:	b003      	add	sp, #12
 80049ae:	bd00      	pop	{pc}
 80049b0:	40021000 	.word	0x40021000

080049b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b4:	b500      	push	{lr}
 80049b6:	b087      	sub	sp, #28
 80049b8:	0001      	movs	r1, r0
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0); 
 80049ba:	2200      	movs	r2, #0
 80049bc:	200d      	movs	r0, #13
 80049be:	f7fd fc7f 	bl	80022c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn); 
 80049c2:	200d      	movs	r0, #13
 80049c4:	f7fd fcae 	bl	8002324 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80049c8:	4a13      	ldr	r2, [pc, #76]	; (8004a18 <HAL_InitTick+0x64>)
 80049ca:	6991      	ldr	r1, [r2, #24]
 80049cc:	2080      	movs	r0, #128	; 0x80
 80049ce:	0100      	lsls	r0, r0, #4
 80049d0:	4301      	orrs	r1, r0
 80049d2:	6191      	str	r1, [r2, #24]
 80049d4:	6993      	ldr	r3, [r2, #24]
 80049d6:	4003      	ands	r3, r0
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80049dc:	a901      	add	r1, sp, #4
 80049de:	a802      	add	r0, sp, #8
 80049e0:	f7fe f980 	bl	8002ce4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80049e4:	f7fe f96e 	bl	8002cc4 <HAL_RCC_GetPCLK1Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80049e8:	490c      	ldr	r1, [pc, #48]	; (8004a1c <HAL_InitTick+0x68>)
 80049ea:	f7fb fb8d 	bl	8000108 <__udivsi3>
 80049ee:	1e43      	subs	r3, r0, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80049f0:	480b      	ldr	r0, [pc, #44]	; (8004a20 <HAL_InitTick+0x6c>)
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <HAL_InitTick+0x70>)
 80049f4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80049f6:	4a0c      	ldr	r2, [pc, #48]	; (8004a28 <HAL_InitTick+0x74>)
 80049f8:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80049fa:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a00:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004a02:	f7fe fb93 	bl	800312c <HAL_TIM_Base_Init>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_InitTick+0x5c>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004a0a:	2001      	movs	r0, #1
}
 8004a0c:	b007      	add	sp, #28
 8004a0e:	bd00      	pop	{pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8004a10:	4803      	ldr	r0, [pc, #12]	; (8004a20 <HAL_InitTick+0x6c>)
 8004a12:	f7fe fa7c 	bl	8002f0e <HAL_TIM_Base_Start_IT>
 8004a16:	e7f9      	b.n	8004a0c <HAL_InitTick+0x58>
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	000f4240 	.word	0x000f4240
 8004a20:	20000eb4 	.word	0x20000eb4
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	000003e7 	.word	0x000003e7

08004a2c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a2c:	4770      	bx	lr

08004a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a2e:	e7fe      	b.n	8004a2e <HardFault_Handler>

08004a30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004a30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8004a32:	4802      	ldr	r0, [pc, #8]	; (8004a3c <DMA1_Channel1_IRQHandler+0xc>)
 8004a34:	f7fd fd11 	bl	800245a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004a38:	bd10      	pop	{r4, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	20000e18 	.word	0x20000e18

08004a40 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8004a40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a42:	4802      	ldr	r0, [pc, #8]	; (8004a4c <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8004a44:	f7fe fa73 	bl	8002f2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	20000eb4 	.word	0x20000eb4

08004a50 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <SystemInit+0x48>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	2101      	movs	r1, #1
 8004a56:	430a      	orrs	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	480f      	ldr	r0, [pc, #60]	; (8004a9c <SystemInit+0x4c>)
 8004a5e:	4002      	ands	r2, r0
 8004a60:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	480e      	ldr	r0, [pc, #56]	; (8004aa0 <SystemInit+0x50>)
 8004a66:	4002      	ands	r2, r0
 8004a68:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	480d      	ldr	r0, [pc, #52]	; (8004aa4 <SystemInit+0x54>)
 8004a6e:	4002      	ands	r2, r0
 8004a70:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	480c      	ldr	r0, [pc, #48]	; (8004aa8 <SystemInit+0x58>)
 8004a76:	4002      	ands	r2, r0
 8004a78:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	200f      	movs	r0, #15
 8004a7e:	4382      	bics	r2, r0
 8004a80:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8004a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a84:	4809      	ldr	r0, [pc, #36]	; (8004aac <SystemInit+0x5c>)
 8004a86:	4002      	ands	r2, r0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a8c:	438a      	bics	r2, r1
 8004a8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004a90:	2200      	movs	r2, #0
 8004a92:	609a      	str	r2, [r3, #8]

}
 8004a94:	4770      	bx	lr
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	f8ffb80c 	.word	0xf8ffb80c
 8004aa0:	fef6ffff 	.word	0xfef6ffff
 8004aa4:	fffbffff 	.word	0xfffbffff
 8004aa8:	ffc0ffff 	.word	0xffc0ffff
 8004aac:	fffffeac 	.word	0xfffffeac

08004ab0 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim2);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ab0:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM2)
 8004ab2:	6802      	ldr	r2, [r0, #0]
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	05db      	lsls	r3, r3, #23
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004abc:	b002      	add	sp, #8
 8004abe:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ac0:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <HAL_TIM_Base_MspInit+0x24>)
 8004ac2:	69d1      	ldr	r1, [r2, #28]
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4319      	orrs	r1, r3
 8004ac8:	61d1      	str	r1, [r2, #28]
 8004aca:	69d2      	ldr	r2, [r2, #28]
 8004acc:	4013      	ands	r3, r2
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	9b01      	ldr	r3, [sp, #4]
}
 8004ad2:	e7f3      	b.n	8004abc <HAL_TIM_Base_MspInit+0xc>
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ade:	2214      	movs	r2, #20
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	a801      	add	r0, sp, #4
 8004ae4:	f000 f900 	bl	8004ce8 <memset>
  if(timHandle->Instance==TIM2)
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	05db      	lsls	r3, r3, #23
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d001      	beq.n	8004af6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004af2:	b006      	add	sp, #24
 8004af4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af6:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <HAL_TIM_MspPostInit+0x4c>)
 8004af8:	6951      	ldr	r1, [r2, #20]
 8004afa:	2080      	movs	r0, #128	; 0x80
 8004afc:	0280      	lsls	r0, r0, #10
 8004afe:	4301      	orrs	r1, r0
 8004b00:	6151      	str	r1, [r2, #20]
 8004b02:	6953      	ldr	r3, [r2, #20]
 8004b04:	4003      	ands	r3, r0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PILOT_Pin;
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b10:	2302      	movs	r3, #2
 8004b12:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004b14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PILOT_GPIO_Port, &GPIO_InitStruct);
 8004b16:	a901      	add	r1, sp, #4
 8004b18:	2090      	movs	r0, #144	; 0x90
 8004b1a:	05c0      	lsls	r0, r0, #23
 8004b1c:	f7fd fcf2 	bl	8002504 <HAL_GPIO_Init>
}
 8004b20:	e7e7      	b.n	8004af2 <HAL_TIM_MspPostInit+0x1a>
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	40021000 	.word	0x40021000

08004b28 <MX_TIM2_Init>:
{
 8004b28:	b500      	push	{lr}
 8004b2a:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	2100      	movs	r1, #0
 8004b30:	a80a      	add	r0, sp, #40	; 0x28
 8004b32:	f000 f8d9 	bl	8004ce8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b36:	2208      	movs	r2, #8
 8004b38:	2100      	movs	r1, #0
 8004b3a:	a808      	add	r0, sp, #32
 8004b3c:	f000 f8d4 	bl	8004ce8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b40:	221c      	movs	r2, #28
 8004b42:	2100      	movs	r1, #0
 8004b44:	a801      	add	r0, sp, #4
 8004b46:	f000 f8cf 	bl	8004ce8 <memset>
  htim2.Instance = TIM2;
 8004b4a:	4823      	ldr	r0, [pc, #140]	; (8004bd8 <MX_TIM2_Init+0xb0>)
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	05db      	lsls	r3, r3, #23
 8004b50:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b56:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 48000;
 8004b58:	4a20      	ldr	r2, [pc, #128]	; (8004bdc <MX_TIM2_Init+0xb4>)
 8004b5a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b5c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b5e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b60:	f7fe fae4 	bl	800312c <HAL_TIM_Base_Init>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d128      	bne.n	8004bba <MX_TIM2_Init+0x92>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	015b      	lsls	r3, r3, #5
 8004b6c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b6e:	a90a      	add	r1, sp, #40	; 0x28
 8004b70:	4819      	ldr	r0, [pc, #100]	; (8004bd8 <MX_TIM2_Init+0xb0>)
 8004b72:	f7fe fbd5 	bl	8003320 <HAL_TIM_ConfigClockSource>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d122      	bne.n	8004bc0 <MX_TIM2_Init+0x98>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004b7a:	4817      	ldr	r0, [pc, #92]	; (8004bd8 <MX_TIM2_Init+0xb0>)
 8004b7c:	f7fe faf0 	bl	8003160 <HAL_TIM_PWM_Init>
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d120      	bne.n	8004bc6 <MX_TIM2_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b84:	2300      	movs	r3, #0
 8004b86:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b88:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b8a:	a908      	add	r1, sp, #32
 8004b8c:	4812      	ldr	r0, [pc, #72]	; (8004bd8 <MX_TIM2_Init+0xb0>)
 8004b8e:	f7fe fc91 	bl	80034b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d11a      	bne.n	8004bcc <MX_TIM2_Init+0xa4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b96:	2360      	movs	r3, #96	; 0x60
 8004b98:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b9e:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ba0:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	a901      	add	r1, sp, #4
 8004ba6:	480c      	ldr	r0, [pc, #48]	; (8004bd8 <MX_TIM2_Init+0xb0>)
 8004ba8:	f7fe fb38 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d110      	bne.n	8004bd2 <MX_TIM2_Init+0xaa>
  HAL_TIM_MspPostInit(&htim2);
 8004bb0:	4809      	ldr	r0, [pc, #36]	; (8004bd8 <MX_TIM2_Init+0xb0>)
 8004bb2:	f7ff ff91 	bl	8004ad8 <HAL_TIM_MspPostInit>
}
 8004bb6:	b00f      	add	sp, #60	; 0x3c
 8004bb8:	bd00      	pop	{pc}
    Error_Handler();
 8004bba:	f7ff fedb 	bl	8004974 <Error_Handler>
 8004bbe:	e7d3      	b.n	8004b68 <MX_TIM2_Init+0x40>
    Error_Handler();
 8004bc0:	f7ff fed8 	bl	8004974 <Error_Handler>
 8004bc4:	e7d9      	b.n	8004b7a <MX_TIM2_Init+0x52>
    Error_Handler();
 8004bc6:	f7ff fed5 	bl	8004974 <Error_Handler>
 8004bca:	e7db      	b.n	8004b84 <MX_TIM2_Init+0x5c>
    Error_Handler();
 8004bcc:	f7ff fed2 	bl	8004974 <Error_Handler>
 8004bd0:	e7e1      	b.n	8004b96 <MX_TIM2_Init+0x6e>
    Error_Handler();
 8004bd2:	f7ff fecf 	bl	8004974 <Error_Handler>
 8004bd6:	e7eb      	b.n	8004bb0 <MX_TIM2_Init+0x88>
 8004bd8:	20000ef4 	.word	0x20000ef4
 8004bdc:	0000bb80 	.word	0x0000bb80

08004be0 <set_pwm>:
  }
} 

/* USER CODE BEGIN 1 */

void set_pwm(int enable, double amps){
 8004be0:	b530      	push	{r4, r5, lr}
 8004be2:	b089      	sub	sp, #36	; 0x24
 8004be4:	0014      	movs	r4, r2
 8004be6:	001d      	movs	r5, r3
	uint16_t pulse_width;
    TIM_OC_InitTypeDef sConfigOC;

    if(enable){
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d01e      	beq.n	8004c2a <set_pwm+0x4a>
    	pulse_width = 48000.0 * amps / 60.0;
 8004bec:	2200      	movs	r2, #0
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <set_pwm+0x50>)
 8004bf0:	0020      	movs	r0, r4
 8004bf2:	0029      	movs	r1, r5
 8004bf4:	f7fc fad2 	bl	800119c <__aeabi_dmul>
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <set_pwm+0x54>)
 8004bfc:	f7fb fe9a 	bl	8000934 <__aeabi_ddiv>
 8004c00:	f7fb fb6a 	bl	80002d8 <__aeabi_d2uiz>
 8004c04:	b280      	uxth	r0, r0
    } else {
    	// constant 12V on the pilot
    	pulse_width = 48000;
    }

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c06:	2360      	movs	r3, #96	; 0x60
 8004c08:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pulse_width;
 8004c0a:	9002      	str	r0, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c10:	9305      	str	r3, [sp, #20]
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8004c12:	4c09      	ldr	r4, [pc, #36]	; (8004c38 <set_pwm+0x58>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	a901      	add	r1, sp, #4
 8004c18:	0020      	movs	r0, r4
 8004c1a:	f7fe faff 	bl	800321c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004c1e:	2100      	movs	r1, #0
 8004c20:	0020      	movs	r0, r4
 8004c22:	f7fe fc15 	bl	8003450 <HAL_TIM_PWM_Start>
}
 8004c26:	b009      	add	sp, #36	; 0x24
 8004c28:	bd30      	pop	{r4, r5, pc}
    	pulse_width = 48000;
 8004c2a:	4804      	ldr	r0, [pc, #16]	; (8004c3c <set_pwm+0x5c>)
 8004c2c:	e7eb      	b.n	8004c06 <set_pwm+0x26>
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	40e77000 	.word	0x40e77000
 8004c34:	404e0000 	.word	0x404e0000
 8004c38:	20000ef4 	.word	0x20000ef4
 8004c3c:	0000bb80 	.word	0x0000bb80

08004c40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004c40:	480d      	ldr	r0, [pc, #52]	; (8004c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004c42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c44:	480d      	ldr	r0, [pc, #52]	; (8004c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8004c46:	490e      	ldr	r1, [pc, #56]	; (8004c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c48:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <LoopForever+0xe>)
  movs r3, #0
 8004c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c4c:	e002      	b.n	8004c54 <LoopCopyDataInit>

08004c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c52:	3304      	adds	r3, #4

08004c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c58:	d3f9      	bcc.n	8004c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c5a:	4a0b      	ldr	r2, [pc, #44]	; (8004c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c5c:	4c0b      	ldr	r4, [pc, #44]	; (8004c8c <LoopForever+0x16>)
  movs r3, #0
 8004c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c60:	e001      	b.n	8004c66 <LoopFillZerobss>

08004c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c64:	3204      	adds	r2, #4

08004c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c68:	d3fb      	bcc.n	8004c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004c6a:	f7ff fef1 	bl	8004a50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004c6e:	f000 f817 	bl	8004ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004c72:	f7ff fe60 	bl	8004936 <main>

08004c76 <LoopForever>:

LoopForever:
    b LoopForever
 8004c76:	e7fe      	b.n	8004c76 <LoopForever>
  ldr   r0, =_estack
 8004c78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c80:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004c84:	08005558 	.word	0x08005558
  ldr r2, =_sbss
 8004c88:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004c8c:	20000f34 	.word	0x20000f34

08004c90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004c90:	e7fe      	b.n	8004c90 <ADC1_COMP_IRQHandler>
	...

08004c94 <__errno>:
 8004c94:	4b01      	ldr	r3, [pc, #4]	; (8004c9c <__errno+0x8>)
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	4770      	bx	lr
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	20000014 	.word	0x20000014

08004ca0 <__libc_init_array>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	2600      	movs	r6, #0
 8004ca4:	4d0c      	ldr	r5, [pc, #48]	; (8004cd8 <__libc_init_array+0x38>)
 8004ca6:	4c0d      	ldr	r4, [pc, #52]	; (8004cdc <__libc_init_array+0x3c>)
 8004ca8:	1b64      	subs	r4, r4, r5
 8004caa:	10a4      	asrs	r4, r4, #2
 8004cac:	42a6      	cmp	r6, r4
 8004cae:	d109      	bne.n	8004cc4 <__libc_init_array+0x24>
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	f000 fb8d 	bl	80053d0 <_init>
 8004cb6:	4d0a      	ldr	r5, [pc, #40]	; (8004ce0 <__libc_init_array+0x40>)
 8004cb8:	4c0a      	ldr	r4, [pc, #40]	; (8004ce4 <__libc_init_array+0x44>)
 8004cba:	1b64      	subs	r4, r4, r5
 8004cbc:	10a4      	asrs	r4, r4, #2
 8004cbe:	42a6      	cmp	r6, r4
 8004cc0:	d105      	bne.n	8004cce <__libc_init_array+0x2e>
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	00b3      	lsls	r3, r6, #2
 8004cc6:	58eb      	ldr	r3, [r5, r3]
 8004cc8:	4798      	blx	r3
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7ee      	b.n	8004cac <__libc_init_array+0xc>
 8004cce:	00b3      	lsls	r3, r6, #2
 8004cd0:	58eb      	ldr	r3, [r5, r3]
 8004cd2:	4798      	blx	r3
 8004cd4:	3601      	adds	r6, #1
 8004cd6:	e7f2      	b.n	8004cbe <__libc_init_array+0x1e>
 8004cd8:	08005550 	.word	0x08005550
 8004cdc:	08005550 	.word	0x08005550
 8004ce0:	08005550 	.word	0x08005550
 8004ce4:	08005554 	.word	0x08005554

08004ce8 <memset>:
 8004ce8:	0003      	movs	r3, r0
 8004cea:	1882      	adds	r2, r0, r2
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <memset+0xa>
 8004cf0:	4770      	bx	lr
 8004cf2:	7019      	strb	r1, [r3, #0]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	e7f9      	b.n	8004cec <memset+0x4>

08004cf8 <swapfunc>:
 8004cf8:	b530      	push	{r4, r5, lr}
 8004cfa:	2400      	movs	r4, #0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	dc08      	bgt.n	8004d12 <swapfunc+0x1a>
 8004d00:	0892      	lsrs	r2, r2, #2
 8004d02:	6803      	ldr	r3, [r0, #0]
 8004d04:	680c      	ldr	r4, [r1, #0]
 8004d06:	3a01      	subs	r2, #1
 8004d08:	c010      	stmia	r0!, {r4}
 8004d0a:	c108      	stmia	r1!, {r3}
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	dcf8      	bgt.n	8004d02 <swapfunc+0xa>
 8004d10:	bd30      	pop	{r4, r5, pc}
 8004d12:	5d03      	ldrb	r3, [r0, r4]
 8004d14:	5d0d      	ldrb	r5, [r1, r4]
 8004d16:	5505      	strb	r5, [r0, r4]
 8004d18:	550b      	strb	r3, [r1, r4]
 8004d1a:	3401      	adds	r4, #1
 8004d1c:	1b13      	subs	r3, r2, r4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	dcf7      	bgt.n	8004d12 <swapfunc+0x1a>
 8004d22:	e7f5      	b.n	8004d10 <swapfunc+0x18>

08004d24 <med3.isra.1>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	000c      	movs	r4, r1
 8004d28:	0015      	movs	r5, r2
 8004d2a:	0007      	movs	r7, r0
 8004d2c:	001e      	movs	r6, r3
 8004d2e:	4798      	blx	r3
 8004d30:	0029      	movs	r1, r5
 8004d32:	2800      	cmp	r0, #0
 8004d34:	da0b      	bge.n	8004d4e <med3.isra.1+0x2a>
 8004d36:	0020      	movs	r0, r4
 8004d38:	47b0      	blx	r6
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	db05      	blt.n	8004d4a <med3.isra.1+0x26>
 8004d3e:	0029      	movs	r1, r5
 8004d40:	0038      	movs	r0, r7
 8004d42:	47b0      	blx	r6
 8004d44:	2800      	cmp	r0, #0
 8004d46:	db0b      	blt.n	8004d60 <med3.isra.1+0x3c>
 8004d48:	003c      	movs	r4, r7
 8004d4a:	0020      	movs	r0, r4
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d4e:	0020      	movs	r0, r4
 8004d50:	47b0      	blx	r6
 8004d52:	2800      	cmp	r0, #0
 8004d54:	dcf9      	bgt.n	8004d4a <med3.isra.1+0x26>
 8004d56:	0029      	movs	r1, r5
 8004d58:	0038      	movs	r0, r7
 8004d5a:	47b0      	blx	r6
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	dbf3      	blt.n	8004d48 <med3.isra.1+0x24>
 8004d60:	002c      	movs	r4, r5
 8004d62:	e7f2      	b.n	8004d4a <med3.isra.1+0x26>

08004d64 <qsort>:
 8004d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d66:	0017      	movs	r7, r2
 8004d68:	b089      	sub	sp, #36	; 0x24
 8004d6a:	9000      	str	r0, [sp, #0]
 8004d6c:	9102      	str	r1, [sp, #8]
 8004d6e:	9303      	str	r3, [sp, #12]
 8004d70:	2302      	movs	r3, #2
 8004d72:	2203      	movs	r2, #3
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	9b00      	ldr	r3, [sp, #0]
 8004d78:	4213      	tst	r3, r2
 8004d7a:	d106      	bne.n	8004d8a <qsort+0x26>
 8004d7c:	4217      	tst	r7, r2
 8004d7e:	d104      	bne.n	8004d8a <qsort+0x26>
 8004d80:	1f3b      	subs	r3, r7, #4
 8004d82:	001a      	movs	r2, r3
 8004d84:	1e53      	subs	r3, r2, #1
 8004d86:	419a      	sbcs	r2, r3
 8004d88:	9201      	str	r2, [sp, #4]
 8004d8a:	9b02      	ldr	r3, [sp, #8]
 8004d8c:	2b06      	cmp	r3, #6
 8004d8e:	d827      	bhi.n	8004de0 <qsort+0x7c>
 8004d90:	9b00      	ldr	r3, [sp, #0]
 8004d92:	9a00      	ldr	r2, [sp, #0]
 8004d94:	19de      	adds	r6, r3, r7
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	437b      	muls	r3, r7
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	9302      	str	r3, [sp, #8]
 8004d9e:	9b02      	ldr	r3, [sp, #8]
 8004da0:	429e      	cmp	r6, r3
 8004da2:	d300      	bcc.n	8004da6 <qsort+0x42>
 8004da4:	e11f      	b.n	8004fe6 <qsort+0x282>
 8004da6:	0034      	movs	r4, r6
 8004da8:	e015      	b.n	8004dd6 <qsort+0x72>
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	003a      	movs	r2, r7
 8004dae:	0029      	movs	r1, r5
 8004db0:	0020      	movs	r0, r4
 8004db2:	f7ff ffa1 	bl	8004cf8 <swapfunc>
 8004db6:	e00d      	b.n	8004dd4 <qsort+0x70>
 8004db8:	1be5      	subs	r5, r4, r7
 8004dba:	0021      	movs	r1, r4
 8004dbc:	0028      	movs	r0, r5
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	4798      	blx	r3
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	dd0a      	ble.n	8004ddc <qsort+0x78>
 8004dc6:	9b01      	ldr	r3, [sp, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1ee      	bne.n	8004daa <qsort+0x46>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	682a      	ldr	r2, [r5, #0]
 8004dd0:	6022      	str	r2, [r4, #0]
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	002c      	movs	r4, r5
 8004dd6:	9b00      	ldr	r3, [sp, #0]
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d3ed      	bcc.n	8004db8 <qsort+0x54>
 8004ddc:	19f6      	adds	r6, r6, r7
 8004dde:	e7de      	b.n	8004d9e <qsort+0x3a>
 8004de0:	9b02      	ldr	r3, [sp, #8]
 8004de2:	085c      	lsrs	r4, r3, #1
 8004de4:	437c      	muls	r4, r7
 8004de6:	9b00      	ldr	r3, [sp, #0]
 8004de8:	191c      	adds	r4, r3, r4
 8004dea:	9b02      	ldr	r3, [sp, #8]
 8004dec:	2b07      	cmp	r3, #7
 8004dee:	d027      	beq.n	8004e40 <qsort+0xdc>
 8004df0:	1e5e      	subs	r6, r3, #1
 8004df2:	437e      	muls	r6, r7
 8004df4:	9b00      	ldr	r3, [sp, #0]
 8004df6:	199e      	adds	r6, r3, r6
 8004df8:	9304      	str	r3, [sp, #16]
 8004dfa:	9b02      	ldr	r3, [sp, #8]
 8004dfc:	2b28      	cmp	r3, #40	; 0x28
 8004dfe:	d918      	bls.n	8004e32 <qsort+0xce>
 8004e00:	08dd      	lsrs	r5, r3, #3
 8004e02:	437d      	muls	r5, r7
 8004e04:	9b00      	ldr	r3, [sp, #0]
 8004e06:	9800      	ldr	r0, [sp, #0]
 8004e08:	1959      	adds	r1, r3, r5
 8004e0a:	194a      	adds	r2, r1, r5
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	f7ff ff89 	bl	8004d24 <med3.isra.1>
 8004e12:	1962      	adds	r2, r4, r5
 8004e14:	0021      	movs	r1, r4
 8004e16:	9004      	str	r0, [sp, #16]
 8004e18:	9b03      	ldr	r3, [sp, #12]
 8004e1a:	1b60      	subs	r0, r4, r5
 8004e1c:	f7ff ff82 	bl	8004d24 <med3.isra.1>
 8004e20:	0004      	movs	r4, r0
 8004e22:	0068      	lsls	r0, r5, #1
 8004e24:	1a30      	subs	r0, r6, r0
 8004e26:	0032      	movs	r2, r6
 8004e28:	1941      	adds	r1, r0, r5
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	f7ff ff7a 	bl	8004d24 <med3.isra.1>
 8004e30:	0006      	movs	r6, r0
 8004e32:	0021      	movs	r1, r4
 8004e34:	9b03      	ldr	r3, [sp, #12]
 8004e36:	0032      	movs	r2, r6
 8004e38:	9804      	ldr	r0, [sp, #16]
 8004e3a:	f7ff ff73 	bl	8004d24 <med3.isra.1>
 8004e3e:	0004      	movs	r4, r0
 8004e40:	9b01      	ldr	r3, [sp, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d130      	bne.n	8004ea8 <qsort+0x144>
 8004e46:	9b00      	ldr	r3, [sp, #0]
 8004e48:	6821      	ldr	r1, [r4, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	9a00      	ldr	r2, [sp, #0]
 8004e4e:	6011      	str	r1, [r2, #0]
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	9b00      	ldr	r3, [sp, #0]
 8004e54:	19de      	adds	r6, r3, r7
 8004e56:	9b02      	ldr	r3, [sp, #8]
 8004e58:	9604      	str	r6, [sp, #16]
 8004e5a:	1e5c      	subs	r4, r3, #1
 8004e5c:	437c      	muls	r4, r7
 8004e5e:	9b00      	ldr	r3, [sp, #0]
 8004e60:	191c      	adds	r4, r3, r4
 8004e62:	19f3      	adds	r3, r6, r7
 8004e64:	9307      	str	r3, [sp, #28]
 8004e66:	2300      	movs	r3, #0
 8004e68:	9405      	str	r4, [sp, #20]
 8004e6a:	9306      	str	r3, [sp, #24]
 8004e6c:	9b07      	ldr	r3, [sp, #28]
 8004e6e:	1bdd      	subs	r5, r3, r7
 8004e70:	42ac      	cmp	r4, r5
 8004e72:	d200      	bcs.n	8004e76 <qsort+0x112>
 8004e74:	e0ae      	b.n	8004fd4 <qsort+0x270>
 8004e76:	9900      	ldr	r1, [sp, #0]
 8004e78:	0028      	movs	r0, r5
 8004e7a:	9b03      	ldr	r3, [sp, #12]
 8004e7c:	4798      	blx	r3
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	dc32      	bgt.n	8004ee8 <qsort+0x184>
 8004e82:	d10d      	bne.n	8004ea0 <qsort+0x13c>
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d115      	bne.n	8004eb6 <qsort+0x152>
 8004e8a:	9b04      	ldr	r3, [sp, #16]
 8004e8c:	6829      	ldr	r1, [r5, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	9a04      	ldr	r2, [sp, #16]
 8004e92:	6011      	str	r1, [r2, #0]
 8004e94:	602b      	str	r3, [r5, #0]
 8004e96:	9b04      	ldr	r3, [sp, #16]
 8004e98:	19db      	adds	r3, r3, r7
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	9306      	str	r3, [sp, #24]
 8004ea0:	9b07      	ldr	r3, [sp, #28]
 8004ea2:	19db      	adds	r3, r3, r7
 8004ea4:	9307      	str	r3, [sp, #28]
 8004ea6:	e7e1      	b.n	8004e6c <qsort+0x108>
 8004ea8:	9b01      	ldr	r3, [sp, #4]
 8004eaa:	003a      	movs	r2, r7
 8004eac:	0021      	movs	r1, r4
 8004eae:	9800      	ldr	r0, [sp, #0]
 8004eb0:	f7ff ff22 	bl	8004cf8 <swapfunc>
 8004eb4:	e7cd      	b.n	8004e52 <qsort+0xee>
 8004eb6:	9b01      	ldr	r3, [sp, #4]
 8004eb8:	003a      	movs	r2, r7
 8004eba:	0029      	movs	r1, r5
 8004ebc:	9804      	ldr	r0, [sp, #16]
 8004ebe:	f7ff ff1b 	bl	8004cf8 <swapfunc>
 8004ec2:	e7e8      	b.n	8004e96 <qsort+0x132>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d10e      	bne.n	8004ee6 <qsort+0x182>
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11e      	bne.n	8004f0c <qsort+0x1a8>
 8004ece:	9a05      	ldr	r2, [sp, #20]
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	6022      	str	r2, [r4, #0]
 8004ed6:	9206      	str	r2, [sp, #24]
 8004ed8:	9a05      	ldr	r2, [sp, #20]
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	9b05      	ldr	r3, [sp, #20]
 8004ede:	1bdb      	subs	r3, r3, r7
 8004ee0:	9305      	str	r3, [sp, #20]
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	9306      	str	r3, [sp, #24]
 8004ee6:	1be4      	subs	r4, r4, r7
 8004ee8:	42ac      	cmp	r4, r5
 8004eea:	d373      	bcc.n	8004fd4 <qsort+0x270>
 8004eec:	9900      	ldr	r1, [sp, #0]
 8004eee:	0020      	movs	r0, r4
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	4798      	blx	r3
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	dae5      	bge.n	8004ec4 <qsort+0x160>
 8004ef8:	9b01      	ldr	r3, [sp, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <qsort+0x1b6>
 8004efe:	9b01      	ldr	r3, [sp, #4]
 8004f00:	003a      	movs	r2, r7
 8004f02:	0021      	movs	r1, r4
 8004f04:	0028      	movs	r0, r5
 8004f06:	f7ff fef7 	bl	8004cf8 <swapfunc>
 8004f0a:	e00a      	b.n	8004f22 <qsort+0x1be>
 8004f0c:	9b01      	ldr	r3, [sp, #4]
 8004f0e:	003a      	movs	r2, r7
 8004f10:	9905      	ldr	r1, [sp, #20]
 8004f12:	0020      	movs	r0, r4
 8004f14:	f7ff fef0 	bl	8004cf8 <swapfunc>
 8004f18:	e7e0      	b.n	8004edc <qsort+0x178>
 8004f1a:	682b      	ldr	r3, [r5, #0]
 8004f1c:	6822      	ldr	r2, [r4, #0]
 8004f1e:	602a      	str	r2, [r5, #0]
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	1be4      	subs	r4, r4, r7
 8004f24:	e7ba      	b.n	8004e9c <qsort+0x138>
 8004f26:	9b01      	ldr	r3, [sp, #4]
 8004f28:	003a      	movs	r2, r7
 8004f2a:	0029      	movs	r1, r5
 8004f2c:	0020      	movs	r0, r4
 8004f2e:	f7ff fee3 	bl	8004cf8 <swapfunc>
 8004f32:	e00d      	b.n	8004f50 <qsort+0x1ec>
 8004f34:	1be5      	subs	r5, r4, r7
 8004f36:	0021      	movs	r1, r4
 8004f38:	0028      	movs	r0, r5
 8004f3a:	9b03      	ldr	r3, [sp, #12]
 8004f3c:	4798      	blx	r3
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	dd0a      	ble.n	8004f58 <qsort+0x1f4>
 8004f42:	9b01      	ldr	r3, [sp, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ee      	bne.n	8004f26 <qsort+0x1c2>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	682a      	ldr	r2, [r5, #0]
 8004f4c:	6022      	str	r2, [r4, #0]
 8004f4e:	602b      	str	r3, [r5, #0]
 8004f50:	002c      	movs	r4, r5
 8004f52:	9b00      	ldr	r3, [sp, #0]
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	d3ed      	bcc.n	8004f34 <qsort+0x1d0>
 8004f58:	19f6      	adds	r6, r6, r7
 8004f5a:	9b02      	ldr	r3, [sp, #8]
 8004f5c:	429e      	cmp	r6, r3
 8004f5e:	d242      	bcs.n	8004fe6 <qsort+0x282>
 8004f60:	0034      	movs	r4, r6
 8004f62:	e7f6      	b.n	8004f52 <qsort+0x1ee>
 8004f64:	9a00      	ldr	r2, [sp, #0]
 8004f66:	18d3      	adds	r3, r2, r3
 8004f68:	9302      	str	r3, [sp, #8]
 8004f6a:	9b04      	ldr	r3, [sp, #16]
 8004f6c:	1aee      	subs	r6, r5, r3
 8004f6e:	1a9a      	subs	r2, r3, r2
 8004f70:	42b2      	cmp	r2, r6
 8004f72:	dd00      	ble.n	8004f76 <qsort+0x212>
 8004f74:	0032      	movs	r2, r6
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	d004      	beq.n	8004f84 <qsort+0x220>
 8004f7a:	1aa9      	subs	r1, r5, r2
 8004f7c:	9b01      	ldr	r3, [sp, #4]
 8004f7e:	9800      	ldr	r0, [sp, #0]
 8004f80:	f7ff feba 	bl	8004cf8 <swapfunc>
 8004f84:	9b05      	ldr	r3, [sp, #20]
 8004f86:	9a05      	ldr	r2, [sp, #20]
 8004f88:	1b1c      	subs	r4, r3, r4
 8004f8a:	9b02      	ldr	r3, [sp, #8]
 8004f8c:	1a9a      	subs	r2, r3, r2
 8004f8e:	1bd2      	subs	r2, r2, r7
 8004f90:	42a2      	cmp	r2, r4
 8004f92:	d900      	bls.n	8004f96 <qsort+0x232>
 8004f94:	0022      	movs	r2, r4
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	d005      	beq.n	8004fa6 <qsort+0x242>
 8004f9a:	9b02      	ldr	r3, [sp, #8]
 8004f9c:	0028      	movs	r0, r5
 8004f9e:	1a99      	subs	r1, r3, r2
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	f7ff fea9 	bl	8004cf8 <swapfunc>
 8004fa6:	42b7      	cmp	r7, r6
 8004fa8:	d209      	bcs.n	8004fbe <qsort+0x25a>
 8004faa:	0039      	movs	r1, r7
 8004fac:	0030      	movs	r0, r6
 8004fae:	f7fb f8ab 	bl	8000108 <__udivsi3>
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	0001      	movs	r1, r0
 8004fb6:	003a      	movs	r2, r7
 8004fb8:	9800      	ldr	r0, [sp, #0]
 8004fba:	f7ff fed3 	bl	8004d64 <qsort>
 8004fbe:	42a7      	cmp	r7, r4
 8004fc0:	d211      	bcs.n	8004fe6 <qsort+0x282>
 8004fc2:	9b02      	ldr	r3, [sp, #8]
 8004fc4:	0039      	movs	r1, r7
 8004fc6:	1b1b      	subs	r3, r3, r4
 8004fc8:	0020      	movs	r0, r4
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	f7fb f89c 	bl	8000108 <__udivsi3>
 8004fd0:	9002      	str	r0, [sp, #8]
 8004fd2:	e6cd      	b.n	8004d70 <qsort+0xc>
 8004fd4:	9b02      	ldr	r3, [sp, #8]
 8004fd6:	9a06      	ldr	r2, [sp, #24]
 8004fd8:	437b      	muls	r3, r7
 8004fda:	2a00      	cmp	r2, #0
 8004fdc:	d1c2      	bne.n	8004f64 <qsort+0x200>
 8004fde:	9a00      	ldr	r2, [sp, #0]
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	9302      	str	r3, [sp, #8]
 8004fe4:	e7b9      	b.n	8004f5a <qsort+0x1f6>
 8004fe6:	b009      	add	sp, #36	; 0x24
 8004fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004fec <exp>:
 8004fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fee:	b08d      	sub	sp, #52	; 0x34
 8004ff0:	0004      	movs	r4, r0
 8004ff2:	000d      	movs	r5, r1
 8004ff4:	f000 f874 	bl	80050e0 <__ieee754_exp>
 8004ff8:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <exp+0xd4>)
 8004ffa:	0006      	movs	r6, r0
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	000f      	movs	r7, r1
 8005000:	b25b      	sxtb	r3, r3
 8005002:	3301      	adds	r3, #1
 8005004:	d032      	beq.n	800506c <exp+0x80>
 8005006:	0020      	movs	r0, r4
 8005008:	0029      	movs	r1, r5
 800500a:	f000 f9d7 	bl	80053bc <finite>
 800500e:	2800      	cmp	r0, #0
 8005010:	d02c      	beq.n	800506c <exp+0x80>
 8005012:	4a2c      	ldr	r2, [pc, #176]	; (80050c4 <exp+0xd8>)
 8005014:	4b2c      	ldr	r3, [pc, #176]	; (80050c8 <exp+0xdc>)
 8005016:	0020      	movs	r0, r4
 8005018:	0029      	movs	r1, r5
 800501a:	f7fb f92b 	bl	8000274 <__aeabi_dcmpgt>
 800501e:	9001      	str	r0, [sp, #4]
 8005020:	2800      	cmp	r0, #0
 8005022:	d032      	beq.n	800508a <exp+0x9e>
 8005024:	2303      	movs	r3, #3
 8005026:	9302      	str	r3, [sp, #8]
 8005028:	4b28      	ldr	r3, [pc, #160]	; (80050cc <exp+0xe0>)
 800502a:	9406      	str	r4, [sp, #24]
 800502c:	9507      	str	r5, [sp, #28]
 800502e:	9303      	str	r3, [sp, #12]
 8005030:	2300      	movs	r3, #0
 8005032:	930a      	str	r3, [sp, #40]	; 0x28
 8005034:	4b22      	ldr	r3, [pc, #136]	; (80050c0 <exp+0xd4>)
 8005036:	9404      	str	r4, [sp, #16]
 8005038:	9505      	str	r5, [sp, #20]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b25b      	sxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d118      	bne.n	8005074 <exp+0x88>
 8005042:	22e0      	movs	r2, #224	; 0xe0
 8005044:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <exp+0xe4>)
 8005046:	0612      	lsls	r2, r2, #24
 8005048:	9208      	str	r2, [sp, #32]
 800504a:	9309      	str	r3, [sp, #36]	; 0x24
 800504c:	a802      	add	r0, sp, #8
 800504e:	f000 f9bd 	bl	80053cc <matherr>
 8005052:	2800      	cmp	r0, #0
 8005054:	d014      	beq.n	8005080 <exp+0x94>
 8005056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d004      	beq.n	8005068 <exp+0x7c>
 800505e:	f7ff fe19 	bl	8004c94 <__errno>
 8005062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	6003      	str	r3, [r0, #0]
 8005068:	9e08      	ldr	r6, [sp, #32]
 800506a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800506c:	0030      	movs	r0, r6
 800506e:	0039      	movs	r1, r7
 8005070:	b00d      	add	sp, #52	; 0x34
 8005072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005074:	2000      	movs	r0, #0
 8005076:	4917      	ldr	r1, [pc, #92]	; (80050d4 <exp+0xe8>)
 8005078:	9008      	str	r0, [sp, #32]
 800507a:	9109      	str	r1, [sp, #36]	; 0x24
 800507c:	2b02      	cmp	r3, #2
 800507e:	d1e5      	bne.n	800504c <exp+0x60>
 8005080:	f7ff fe08 	bl	8004c94 <__errno>
 8005084:	2322      	movs	r3, #34	; 0x22
 8005086:	6003      	str	r3, [r0, #0]
 8005088:	e7e5      	b.n	8005056 <exp+0x6a>
 800508a:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <exp+0xec>)
 800508c:	4b13      	ldr	r3, [pc, #76]	; (80050dc <exp+0xf0>)
 800508e:	0020      	movs	r0, r4
 8005090:	0029      	movs	r1, r5
 8005092:	f7fb f8db 	bl	800024c <__aeabi_dcmplt>
 8005096:	2800      	cmp	r0, #0
 8005098:	d0e8      	beq.n	800506c <exp+0x80>
 800509a:	2304      	movs	r3, #4
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <exp+0xe0>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	9303      	str	r3, [sp, #12]
 80050a4:	9b01      	ldr	r3, [sp, #4]
 80050a6:	9406      	str	r4, [sp, #24]
 80050a8:	9507      	str	r5, [sp, #28]
 80050aa:	930a      	str	r3, [sp, #40]	; 0x28
 80050ac:	2300      	movs	r3, #0
 80050ae:	9208      	str	r2, [sp, #32]
 80050b0:	9309      	str	r3, [sp, #36]	; 0x24
 80050b2:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <exp+0xd4>)
 80050b4:	9404      	str	r4, [sp, #16]
 80050b6:	9505      	str	r5, [sp, #20]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	b25b      	sxtb	r3, r3
 80050bc:	e7de      	b.n	800507c <exp+0x90>
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	20000078 	.word	0x20000078
 80050c4:	fefa39ef 	.word	0xfefa39ef
 80050c8:	40862e42 	.word	0x40862e42
 80050cc:	0800551c 	.word	0x0800551c
 80050d0:	47efffff 	.word	0x47efffff
 80050d4:	7ff00000 	.word	0x7ff00000
 80050d8:	d52d3051 	.word	0xd52d3051
 80050dc:	c0874910 	.word	0xc0874910

080050e0 <__ieee754_exp>:
 80050e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050e2:	004a      	lsls	r2, r1, #1
 80050e4:	0857      	lsrs	r7, r2, #1
 80050e6:	4a95      	ldr	r2, [pc, #596]	; (800533c <__ieee754_exp+0x25c>)
 80050e8:	b087      	sub	sp, #28
 80050ea:	0005      	movs	r5, r0
 80050ec:	000c      	movs	r4, r1
 80050ee:	0fce      	lsrs	r6, r1, #31
 80050f0:	4297      	cmp	r7, r2
 80050f2:	d800      	bhi.n	80050f6 <__ieee754_exp+0x16>
 80050f4:	e0a6      	b.n	8005244 <__ieee754_exp+0x164>
 80050f6:	4a92      	ldr	r2, [pc, #584]	; (8005340 <__ieee754_exp+0x260>)
 80050f8:	4297      	cmp	r7, r2
 80050fa:	d914      	bls.n	8005126 <__ieee754_exp+0x46>
 80050fc:	030b      	lsls	r3, r1, #12
 80050fe:	0b1b      	lsrs	r3, r3, #12
 8005100:	4303      	orrs	r3, r0
 8005102:	d008      	beq.n	8005116 <__ieee754_exp+0x36>
 8005104:	0002      	movs	r2, r0
 8005106:	000b      	movs	r3, r1
 8005108:	0028      	movs	r0, r5
 800510a:	0021      	movs	r1, r4
 800510c:	f7fb f902 	bl	8000314 <__aeabi_dadd>
 8005110:	0005      	movs	r5, r0
 8005112:	000c      	movs	r4, r1
 8005114:	e003      	b.n	800511e <__ieee754_exp+0x3e>
 8005116:	2e00      	cmp	r6, #0
 8005118:	d001      	beq.n	800511e <__ieee754_exp+0x3e>
 800511a:	2500      	movs	r5, #0
 800511c:	002c      	movs	r4, r5
 800511e:	0028      	movs	r0, r5
 8005120:	0021      	movs	r1, r4
 8005122:	b007      	add	sp, #28
 8005124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005126:	4a87      	ldr	r2, [pc, #540]	; (8005344 <__ieee754_exp+0x264>)
 8005128:	4b87      	ldr	r3, [pc, #540]	; (8005348 <__ieee754_exp+0x268>)
 800512a:	f7fb f8a3 	bl	8000274 <__aeabi_dcmpgt>
 800512e:	2800      	cmp	r0, #0
 8005130:	d006      	beq.n	8005140 <__ieee754_exp+0x60>
 8005132:	4a86      	ldr	r2, [pc, #536]	; (800534c <__ieee754_exp+0x26c>)
 8005134:	4b86      	ldr	r3, [pc, #536]	; (8005350 <__ieee754_exp+0x270>)
 8005136:	0010      	movs	r0, r2
 8005138:	0019      	movs	r1, r3
 800513a:	f7fc f82f 	bl	800119c <__aeabi_dmul>
 800513e:	e7e7      	b.n	8005110 <__ieee754_exp+0x30>
 8005140:	4a84      	ldr	r2, [pc, #528]	; (8005354 <__ieee754_exp+0x274>)
 8005142:	4b85      	ldr	r3, [pc, #532]	; (8005358 <__ieee754_exp+0x278>)
 8005144:	0028      	movs	r0, r5
 8005146:	0021      	movs	r1, r4
 8005148:	f7fb f880 	bl	800024c <__aeabi_dcmplt>
 800514c:	2800      	cmp	r0, #0
 800514e:	d1e4      	bne.n	800511a <__ieee754_exp+0x3a>
 8005150:	4b82      	ldr	r3, [pc, #520]	; (800535c <__ieee754_exp+0x27c>)
 8005152:	00f2      	lsls	r2, r6, #3
 8005154:	9200      	str	r2, [sp, #0]
 8005156:	429f      	cmp	r7, r3
 8005158:	d900      	bls.n	800515c <__ieee754_exp+0x7c>
 800515a:	e087      	b.n	800526c <__ieee754_exp+0x18c>
 800515c:	4b80      	ldr	r3, [pc, #512]	; (8005360 <__ieee754_exp+0x280>)
 800515e:	0021      	movs	r1, r4
 8005160:	189b      	adds	r3, r3, r2
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	0028      	movs	r0, r5
 8005168:	f7fc fa98 	bl	800169c <__aeabi_dsub>
 800516c:	9002      	str	r0, [sp, #8]
 800516e:	9103      	str	r1, [sp, #12]
 8005170:	2001      	movs	r0, #1
 8005172:	4b7c      	ldr	r3, [pc, #496]	; (8005364 <__ieee754_exp+0x284>)
 8005174:	00f2      	lsls	r2, r6, #3
 8005176:	189b      	adds	r3, r3, r2
 8005178:	1b80      	subs	r0, r0, r6
 800517a:	685c      	ldr	r4, [r3, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	9304      	str	r3, [sp, #16]
 8005180:	9405      	str	r4, [sp, #20]
 8005182:	1b83      	subs	r3, r0, r6
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	9a04      	ldr	r2, [sp, #16]
 8005188:	9b05      	ldr	r3, [sp, #20]
 800518a:	9802      	ldr	r0, [sp, #8]
 800518c:	9903      	ldr	r1, [sp, #12]
 800518e:	f7fc fa85 	bl	800169c <__aeabi_dsub>
 8005192:	0005      	movs	r5, r0
 8005194:	000c      	movs	r4, r1
 8005196:	002a      	movs	r2, r5
 8005198:	0023      	movs	r3, r4
 800519a:	0028      	movs	r0, r5
 800519c:	0021      	movs	r1, r4
 800519e:	f7fb fffd 	bl	800119c <__aeabi_dmul>
 80051a2:	0006      	movs	r6, r0
 80051a4:	000f      	movs	r7, r1
 80051a6:	4a70      	ldr	r2, [pc, #448]	; (8005368 <__ieee754_exp+0x288>)
 80051a8:	4b70      	ldr	r3, [pc, #448]	; (800536c <__ieee754_exp+0x28c>)
 80051aa:	f7fb fff7 	bl	800119c <__aeabi_dmul>
 80051ae:	4a70      	ldr	r2, [pc, #448]	; (8005370 <__ieee754_exp+0x290>)
 80051b0:	4b70      	ldr	r3, [pc, #448]	; (8005374 <__ieee754_exp+0x294>)
 80051b2:	f7fc fa73 	bl	800169c <__aeabi_dsub>
 80051b6:	0032      	movs	r2, r6
 80051b8:	003b      	movs	r3, r7
 80051ba:	f7fb ffef 	bl	800119c <__aeabi_dmul>
 80051be:	4a6e      	ldr	r2, [pc, #440]	; (8005378 <__ieee754_exp+0x298>)
 80051c0:	4b6e      	ldr	r3, [pc, #440]	; (800537c <__ieee754_exp+0x29c>)
 80051c2:	f7fb f8a7 	bl	8000314 <__aeabi_dadd>
 80051c6:	0032      	movs	r2, r6
 80051c8:	003b      	movs	r3, r7
 80051ca:	f7fb ffe7 	bl	800119c <__aeabi_dmul>
 80051ce:	4a6c      	ldr	r2, [pc, #432]	; (8005380 <__ieee754_exp+0x2a0>)
 80051d0:	4b6c      	ldr	r3, [pc, #432]	; (8005384 <__ieee754_exp+0x2a4>)
 80051d2:	f7fc fa63 	bl	800169c <__aeabi_dsub>
 80051d6:	0032      	movs	r2, r6
 80051d8:	003b      	movs	r3, r7
 80051da:	f7fb ffdf 	bl	800119c <__aeabi_dmul>
 80051de:	4a6a      	ldr	r2, [pc, #424]	; (8005388 <__ieee754_exp+0x2a8>)
 80051e0:	4b6a      	ldr	r3, [pc, #424]	; (800538c <__ieee754_exp+0x2ac>)
 80051e2:	f7fb f897 	bl	8000314 <__aeabi_dadd>
 80051e6:	0032      	movs	r2, r6
 80051e8:	003b      	movs	r3, r7
 80051ea:	f7fb ffd7 	bl	800119c <__aeabi_dmul>
 80051ee:	0002      	movs	r2, r0
 80051f0:	000b      	movs	r3, r1
 80051f2:	0028      	movs	r0, r5
 80051f4:	0021      	movs	r1, r4
 80051f6:	f7fc fa51 	bl	800169c <__aeabi_dsub>
 80051fa:	9b00      	ldr	r3, [sp, #0]
 80051fc:	0006      	movs	r6, r0
 80051fe:	000f      	movs	r7, r1
 8005200:	0002      	movs	r2, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d160      	bne.n	80052c8 <__ieee754_exp+0x1e8>
 8005206:	000b      	movs	r3, r1
 8005208:	0028      	movs	r0, r5
 800520a:	0021      	movs	r1, r4
 800520c:	f7fb ffc6 	bl	800119c <__aeabi_dmul>
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	9000      	str	r0, [sp, #0]
 8005214:	9101      	str	r1, [sp, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	05db      	lsls	r3, r3, #23
 800521a:	0030      	movs	r0, r6
 800521c:	0039      	movs	r1, r7
 800521e:	f7fc fa3d 	bl	800169c <__aeabi_dsub>
 8005222:	0002      	movs	r2, r0
 8005224:	000b      	movs	r3, r1
 8005226:	9800      	ldr	r0, [sp, #0]
 8005228:	9901      	ldr	r1, [sp, #4]
 800522a:	f7fb fb83 	bl	8000934 <__aeabi_ddiv>
 800522e:	002a      	movs	r2, r5
 8005230:	0023      	movs	r3, r4
 8005232:	f7fc fa33 	bl	800169c <__aeabi_dsub>
 8005236:	0002      	movs	r2, r0
 8005238:	000b      	movs	r3, r1
 800523a:	2000      	movs	r0, #0
 800523c:	4954      	ldr	r1, [pc, #336]	; (8005390 <__ieee754_exp+0x2b0>)
 800523e:	f7fc fa2d 	bl	800169c <__aeabi_dsub>
 8005242:	e765      	b.n	8005110 <__ieee754_exp+0x30>
 8005244:	4b53      	ldr	r3, [pc, #332]	; (8005394 <__ieee754_exp+0x2b4>)
 8005246:	429f      	cmp	r7, r3
 8005248:	d900      	bls.n	800524c <__ieee754_exp+0x16c>
 800524a:	e781      	b.n	8005150 <__ieee754_exp+0x70>
 800524c:	4b52      	ldr	r3, [pc, #328]	; (8005398 <__ieee754_exp+0x2b8>)
 800524e:	429f      	cmp	r7, r3
 8005250:	d835      	bhi.n	80052be <__ieee754_exp+0x1de>
 8005252:	4a3e      	ldr	r2, [pc, #248]	; (800534c <__ieee754_exp+0x26c>)
 8005254:	4b3e      	ldr	r3, [pc, #248]	; (8005350 <__ieee754_exp+0x270>)
 8005256:	f7fb f85d 	bl	8000314 <__aeabi_dadd>
 800525a:	2200      	movs	r2, #0
 800525c:	4b4c      	ldr	r3, [pc, #304]	; (8005390 <__ieee754_exp+0x2b0>)
 800525e:	f7fb f809 	bl	8000274 <__aeabi_dcmpgt>
 8005262:	2800      	cmp	r0, #0
 8005264:	d02e      	beq.n	80052c4 <__ieee754_exp+0x1e4>
 8005266:	2200      	movs	r2, #0
 8005268:	4b49      	ldr	r3, [pc, #292]	; (8005390 <__ieee754_exp+0x2b0>)
 800526a:	e74d      	b.n	8005108 <__ieee754_exp+0x28>
 800526c:	9b00      	ldr	r3, [sp, #0]
 800526e:	4f4b      	ldr	r7, [pc, #300]	; (800539c <__ieee754_exp+0x2bc>)
 8005270:	4a4b      	ldr	r2, [pc, #300]	; (80053a0 <__ieee754_exp+0x2c0>)
 8005272:	18ff      	adds	r7, r7, r3
 8005274:	0028      	movs	r0, r5
 8005276:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <__ieee754_exp+0x2c4>)
 8005278:	0021      	movs	r1, r4
 800527a:	f7fb ff8f 	bl	800119c <__aeabi_dmul>
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f7fb f847 	bl	8000314 <__aeabi_dadd>
 8005286:	f7fc fd1f 	bl	8001cc8 <__aeabi_d2iz>
 800528a:	9000      	str	r0, [sp, #0]
 800528c:	f7fc fd50 	bl	8001d30 <__aeabi_i2d>
 8005290:	4a45      	ldr	r2, [pc, #276]	; (80053a8 <__ieee754_exp+0x2c8>)
 8005292:	4b46      	ldr	r3, [pc, #280]	; (80053ac <__ieee754_exp+0x2cc>)
 8005294:	0006      	movs	r6, r0
 8005296:	000f      	movs	r7, r1
 8005298:	f7fb ff80 	bl	800119c <__aeabi_dmul>
 800529c:	0002      	movs	r2, r0
 800529e:	000b      	movs	r3, r1
 80052a0:	0028      	movs	r0, r5
 80052a2:	0021      	movs	r1, r4
 80052a4:	f7fc f9fa 	bl	800169c <__aeabi_dsub>
 80052a8:	4a41      	ldr	r2, [pc, #260]	; (80053b0 <__ieee754_exp+0x2d0>)
 80052aa:	9002      	str	r0, [sp, #8]
 80052ac:	9103      	str	r1, [sp, #12]
 80052ae:	4b41      	ldr	r3, [pc, #260]	; (80053b4 <__ieee754_exp+0x2d4>)
 80052b0:	0030      	movs	r0, r6
 80052b2:	0039      	movs	r1, r7
 80052b4:	f7fb ff72 	bl	800119c <__aeabi_dmul>
 80052b8:	9004      	str	r0, [sp, #16]
 80052ba:	9105      	str	r1, [sp, #20]
 80052bc:	e763      	b.n	8005186 <__ieee754_exp+0xa6>
 80052be:	2300      	movs	r3, #0
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	e768      	b.n	8005196 <__ieee754_exp+0xb6>
 80052c4:	9000      	str	r0, [sp, #0]
 80052c6:	e766      	b.n	8005196 <__ieee754_exp+0xb6>
 80052c8:	000b      	movs	r3, r1
 80052ca:	0028      	movs	r0, r5
 80052cc:	0021      	movs	r1, r4
 80052ce:	f7fb ff65 	bl	800119c <__aeabi_dmul>
 80052d2:	000d      	movs	r5, r1
 80052d4:	2180      	movs	r1, #128	; 0x80
 80052d6:	0004      	movs	r4, r0
 80052d8:	0032      	movs	r2, r6
 80052da:	003b      	movs	r3, r7
 80052dc:	2000      	movs	r0, #0
 80052de:	05c9      	lsls	r1, r1, #23
 80052e0:	f7fc f9dc 	bl	800169c <__aeabi_dsub>
 80052e4:	0002      	movs	r2, r0
 80052e6:	000b      	movs	r3, r1
 80052e8:	0020      	movs	r0, r4
 80052ea:	0029      	movs	r1, r5
 80052ec:	f7fb fb22 	bl	8000934 <__aeabi_ddiv>
 80052f0:	0002      	movs	r2, r0
 80052f2:	000b      	movs	r3, r1
 80052f4:	9804      	ldr	r0, [sp, #16]
 80052f6:	9905      	ldr	r1, [sp, #20]
 80052f8:	f7fc f9d0 	bl	800169c <__aeabi_dsub>
 80052fc:	9a02      	ldr	r2, [sp, #8]
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	f7fc f9cc 	bl	800169c <__aeabi_dsub>
 8005304:	0002      	movs	r2, r0
 8005306:	000b      	movs	r3, r1
 8005308:	2000      	movs	r0, #0
 800530a:	4921      	ldr	r1, [pc, #132]	; (8005390 <__ieee754_exp+0x2b0>)
 800530c:	f7fc f9c6 	bl	800169c <__aeabi_dsub>
 8005310:	4b29      	ldr	r3, [pc, #164]	; (80053b8 <__ieee754_exp+0x2d8>)
 8005312:	9a00      	ldr	r2, [sp, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	db05      	blt.n	8005324 <__ieee754_exp+0x244>
 8005318:	9c00      	ldr	r4, [sp, #0]
 800531a:	0005      	movs	r5, r0
 800531c:	0526      	lsls	r6, r4, #20
 800531e:	1873      	adds	r3, r6, r1
 8005320:	001c      	movs	r4, r3
 8005322:	e6fc      	b.n	800511e <__ieee754_exp+0x3e>
 8005324:	25fa      	movs	r5, #250	; 0xfa
 8005326:	00ad      	lsls	r5, r5, #2
 8005328:	46ac      	mov	ip, r5
 800532a:	9c00      	ldr	r4, [sp, #0]
 800532c:	2200      	movs	r2, #0
 800532e:	4464      	add	r4, ip
 8005330:	0526      	lsls	r6, r4, #20
 8005332:	1873      	adds	r3, r6, r1
 8005334:	0019      	movs	r1, r3
 8005336:	23b8      	movs	r3, #184	; 0xb8
 8005338:	045b      	lsls	r3, r3, #17
 800533a:	e6fe      	b.n	800513a <__ieee754_exp+0x5a>
 800533c:	40862e41 	.word	0x40862e41
 8005340:	7fefffff 	.word	0x7fefffff
 8005344:	fefa39ef 	.word	0xfefa39ef
 8005348:	40862e42 	.word	0x40862e42
 800534c:	8800759c 	.word	0x8800759c
 8005350:	7e37e43c 	.word	0x7e37e43c
 8005354:	d52d3051 	.word	0xd52d3051
 8005358:	c0874910 	.word	0xc0874910
 800535c:	3ff0a2b1 	.word	0x3ff0a2b1
 8005360:	08005530 	.word	0x08005530
 8005364:	08005540 	.word	0x08005540
 8005368:	72bea4d0 	.word	0x72bea4d0
 800536c:	3e663769 	.word	0x3e663769
 8005370:	c5d26bf1 	.word	0xc5d26bf1
 8005374:	3ebbbd41 	.word	0x3ebbbd41
 8005378:	af25de2c 	.word	0xaf25de2c
 800537c:	3f11566a 	.word	0x3f11566a
 8005380:	16bebd93 	.word	0x16bebd93
 8005384:	3f66c16c 	.word	0x3f66c16c
 8005388:	5555553e 	.word	0x5555553e
 800538c:	3fc55555 	.word	0x3fc55555
 8005390:	3ff00000 	.word	0x3ff00000
 8005394:	3fd62e42 	.word	0x3fd62e42
 8005398:	3e2fffff 	.word	0x3e2fffff
 800539c:	08005520 	.word	0x08005520
 80053a0:	652b82fe 	.word	0x652b82fe
 80053a4:	3ff71547 	.word	0x3ff71547
 80053a8:	fee00000 	.word	0xfee00000
 80053ac:	3fe62e42 	.word	0x3fe62e42
 80053b0:	35793c76 	.word	0x35793c76
 80053b4:	3dea39ef 	.word	0x3dea39ef
 80053b8:	fffffc03 	.word	0xfffffc03

080053bc <finite>:
 80053bc:	0048      	lsls	r0, r1, #1
 80053be:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <finite+0xc>)
 80053c0:	0840      	lsrs	r0, r0, #1
 80053c2:	18c0      	adds	r0, r0, r3
 80053c4:	0fc0      	lsrs	r0, r0, #31
 80053c6:	4770      	bx	lr
 80053c8:	80100000 	.word	0x80100000

080053cc <matherr>:
 80053cc:	2000      	movs	r0, #0
 80053ce:	4770      	bx	lr

080053d0 <_init>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d6:	bc08      	pop	{r3}
 80053d8:	469e      	mov	lr, r3
 80053da:	4770      	bx	lr

080053dc <_fini>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr
